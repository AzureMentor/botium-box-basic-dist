# import Agent from "./generated/prisma.graphql"
# import AgentCreateInput from "./generated/prisma.graphql"
# import AgentUpdateInput from "./generated/prisma.graphql"
# import AgentWhereInput from "./generated/prisma.graphql"
# import AgentOrderByInput from "./generated/prisma.graphql"

# import Chatbot from "./generated/prisma.graphql"
# import ChatbotCreateInput from "./generated/prisma.graphql"
# import ChatbotUpdateInput from "./generated/prisma.graphql"
# import ChatbotWhereInput from "./generated/prisma.graphql"
# import ChatbotOrderByInput from "./generated/prisma.graphql"

# import TestSession, TestSessionCreateInput, TestSessionWhereInput, TestSessionOrderByInput from "./generated/prisma.graphql"
# import TestSessionTestCaseResult, TestSessionTestCaseResultWhereInput, TestSessionTestCaseResultOrderByInput from "./generated/prisma.graphql"
# import TestSessionSubscriptionPayload from "./generated/prisma.graphql"
# import TestSessionJob, TestSessionJobLog, TestSessionJobLogOrderByInput from "./generated/prisma.graphql"

# import PerformanceTestSession PerformanceTestSessionCreateInput, PerformanceTestSessionCreatetagsInput, PerformanceTestSessionWhereInput, PerformanceTestSessionOrderByInput from "./generated/prisma.graphql"
# import PerformanceTestSessionAggregatedResult, PerformanceTestSessionAggregatedResultWhereInput, PerformanceTestSessionAggregatedResultOrderByInput from "./generated/prisma.graphql"
# import PerformanceTestSessionJob, PerformanceTestSessionJobWhereInput, PerformanceTestSessionJobOrderByInput from "./generated/prisma.graphql"

# import TestSet, TestSetCreateInput, TestSetUpdateInput from "./generated/prisma.graphql"
# import TestSetScript, TestSetScriptCreateInput, TestSetScriptUpdateInput from "./generated/prisma.graphql"
# import TestSetRepository, TestSetRepositoryCreateInput, TestSetRepositoryUpdateInput from "./generated/prisma.graphql"
# import TestSetFolder, TestSetFolderCreateInput, TestSetFolderUpdateInput from "./generated/prisma.graphql"
# import TestSetExcel, TestSetExcelCreateInput, TestSetExcelUpdateInput from "./generated/prisma.graphql"

# import DeviceSet, DeviceSetCreateInput, DeviceSetUpdateInput, DeviceDescriptorCreateInput from "./generated/prisma.graphql"
# import Client, UserRole, UserCreateInput, UserUpdateInput, UserWhereInput, UserOrderByInput from "./generated/prisma.graphql"
# import ApiKey, ApiKeyCreateInput, ApiKeyUpdateInput, ApiKeyWhereInput, ApiKeyOrderByInput from "./generated/prisma.graphql"
# import DeviceProvider, DeviceProviderCreateInput, DeviceProviderUpdateInput, DeviceProviderWhereInput, DeviceProviderOrderByInput from "./generated/prisma.graphql"
# import RegisteredComponent, RegisteredComponentCreateInput, RegisteredComponentUpdateInput, RegisteredComponentWhereInput, RegisteredComponentOrderByInput from "./generated/prisma.graphql"
# import SystemSettings, SystemSettingsCreateInput, SystemSettingsUpdateInput from "./generated/prisma.graphql"
# import Tag from "./generated/prisma.graphql"

directive @hasPermission(permission: String!) on FIELD_DEFINITION
directive @hasAnyPermission(permissions: [String]) on FIELD_DEFINITION
directive @clientFilter on FIELD_DEFINITION
directive @assertClient(query: [String!], argsBase: [String], idParam: [String], selector: [String]) on FIELD_DEFINITION
directive @clientConnector(dataParam: [String!]) on FIELD_DEFINITION
directive @clientDisconnector(dataParam: String!) on FIELD_DEFINITION
directive @licenseOperable(dataParam: [String!]) on FIELD_DEFINITION
directive @tagsResolver(dataParam: String!, field: String) on FIELD_DEFINITION

type Query {
  autologin: AuthPayload
  me: User
  license: License

  testprojects(where: TestProjectWhereInput, orderBy: TestProjectOrderByInput, skip: Int, first: Int): [TestProject!]! @hasPermission(permission: "TESTPROJECTS_SELECT") @clientFilter
  testproject(id: ID!): TestProject @hasPermission(permission: "TESTPROJECTS_SELECT") @assertClient(query: "testProject")

  agents(where: AgentWhereInput, orderBy: AgentOrderByInput, skip: Int, first: Int): [Agent!]! @hasAnyPermission(permissions: ["AGENTS_SELECT", "TESTPROJECTS_SELECT"])
  agent(id: ID!): Agent @hasPermission(permission: "AGENTS_SELECT")

  chatbots(where: ChatbotWhereInput, orderBy: ChatbotOrderByInput, skip: Int, first: Int): [Chatbot!]! @hasAnyPermission(permissions: ["CHATBOTS_SELECT", "TESTPROJECTS_SELECT"]) @clientFilter
  chatbot(id: ID!): Chatbot @hasPermission(permission: "CHATBOTS_SELECT") @assertClient(query: "chatbot")
  availablewatsonworkspaces(url: String!, version: String!, apikey: String, username: String, password: String): [DropDownValue!]! @hasPermission(permission: "CHATBOTS_SELECT")

  testsessions(where: TestSessionWhereInput, orderBy: TestSessionOrderByInput, skip: Int, first: Int): [TestSession!]! @hasPermission(permission: "TESTSESSIONS_SELECT") @clientFilter
  testsession(id: ID!): TestSession @hasPermission(permission: "TESTSESSIONS_SELECT") @assertClient(query: "testSession")
  testsessiontestcaseresult(id: ID!): TestSessionTestCaseResult @hasPermission(permission: "TESTSESSIONS_SELECT") @assertClient(query: "testSessionTestCaseResult", selector: "{ testSession { client { id } } }")
  testsessionjoblogs(jobId: ID!, orderBy: TestSessionJobLogOrderByInput, skip: Int, first: Int): [TestSessionJobLog!]! @hasPermission(permission: "TESTSESSIONS_REPORTS") @assertClient(query: "testSessionJob", idParam: "jobId", selector: "{ testSession { client { id } } }")

  performancetestsessions(where: PerformanceTestSessionWhereInput, orderBy: PerformanceTestSessionOrderByInput, skip: Int, first: Int): [PerformanceTestSession!]! @hasPermission(permission: "PERFORMANCETESTSESSIONS_SELECT") @clientFilter
  performancetestsessionssimplifiedwithstatus(where: PerformanceTestSessionWhereInput, orderBy: PerformanceTestSessionOrderByInput, skip: Int, first: Int): [PerformanceTestSessionSimplifiedWithStatus!]! @hasPermission(permission: "PERFORMANCETESTSESSIONS_SELECT") @clientFilter
  performancetestsession(id: ID!): PerformanceTestSession @hasPermission(permission: "PERFORMANCETESTSESSIONS_SELECT") @assertClient(query: "performanceTestSession")
  performancetestsessionstatus(id: ID!): PerformanceTestSessionStatus @hasPermission(permission: "PERFORMANCETESTSESSIONS_SELECT") @assertClient(query: "performanceTestSession")
  performancetestsessionjobs(where: PerformanceTestSessionJobWhereInput, orderBy: PerformanceTestSessionJobOrderByInput, skip: Int, first: Int): [PerformanceTestSessionJob!]! @hasPermission(permission: "PERFORMANCETESTSESSIONS_SELECT") @assertClient(query: "performanceTestSessionJobs", selector: "{ testSession { client { id } } }")
  performancetestsessionaggregatedresults(where: PerformanceTestSessionAggregatedResultWhereInput, orderBy: PerformanceTestSessionAggregatedResultOrderByInput, skip: Int, first: Int): [PerformanceTestSessionAggregatedResult!]! @hasPermission(permission: "PERFORMANCETESTSESSIONS_SELECT") @assertClient(query: "performanceTestSessionJobs", selector: "{ testSession { client { id } } }")

  testsets(where: TestSetWhereInput, orderBy: TestSetOrderByInput, skip: Int, first: Int): [TestSet!]! @hasPermission(permission: "TESTSETS_SELECT") @clientFilter
  testset(id: ID!): TestSet @hasPermission(permission: "TESTSETS_SELECT") @assertClient(query: "testSet")
  testsetscript(id: ID!): TestSetScript @hasPermission(permission: "TESTSETS_SELECT") @assertClient(query: "testSetScript", selector: "{ testSet { client { id } } }")
  testsetscripts(testSetId: ID!, skip: Int, first: Int): [TestSetScript!]! @hasPermission(permission: "TESTSETS_SELECT") @assertClient(query: "testSet", idParam: "testSetId")
  validatetestsetscript(script: String!, scriptType: TestSetScriptType!): ValidateTestSetScriptOutput! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"])
  clonetestsetoptions: CloneTestSetOptionsPossible! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"])
  testsetrepository(id: ID!): TestSetRepository @hasPermission(permission: "TESTSETS_SELECT") @assertClient(query: "testSetRepository", selector: "{ testSet { client { id } } }")
  testsetrepositories(testSetId: ID!, skip: Int, first: Int): [TestSetRepository!]! @hasPermission(permission: "TESTSETS_SELECT") @assertClient(query: "testSet", idParam: "testSetId")
  testsetfolder(id: ID!): TestSetFolder  @hasPermission(permission: "TESTSETS_SELECT") @assertClient(query: "testSetFolder", selector: "{ testSet { client { id } } }")
  testsetfolders(testSetId: ID!, skip: Int, first: Int): [TestSetFolder!]! @hasPermission(permission: "TESTSETS_SELECT") @assertClient(query: "testSet", idParam: "testSetId")
  testsetexcel(id: ID!): TestSetExcel @hasPermission(permission: "TESTSETS_SELECT")  @assertClient(query: "testSetExcel", selector: "{ testSet { client { id } } }")
  testsetexcels(testSetId: ID!, skip: Int, first: Int): [TestSetExcel!]! @hasPermission(permission: "TESTSETS_SELECT") @assertClient(query: "testSet", idParam: "testSetId")

  devicesets(where: DeviceSetWhereInput, orderBy: DeviceSetOrderByInput, skip: Int, first: Int): [DeviceSet!]! @hasAnyPermission(permissions: ["DEVICESETS_SELECT", "TESTPROJECTS_SELECT"])
  deviceset(id: ID!): DeviceSet @hasPermission(permission: "DEVICESETS_SELECT")
  availabledevices(provider: ID!): [DropDownValue!]! @hasAnyPermission(permissions: ["DEVICESETS_CREATE", "DEVICESETS_UPDATE", "DEVICESETS_SELECT"])

  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, first: Int): [User!]! @hasPermission(permission: "USERS_MANAGE")
  user(id: ID!): User @hasPermission(permission: "USERS_MANAGE")
  userroles: [UserRole!]! @hasAnyPermission(permissions: ["USERS_MANAGE", "APIKEYS_SELECT", "APIKEYS_MANAGE"])
  clients: [Client!]! @hasAnyPermission(permissions: ["USERS_MANAGE", "APIKEYS_SELECT", "APIKEYS_MANAGE"])
  apikeys(where: ApiKeyWhereInput, orderBy: ApiKeyOrderByInput, skip: Int, first: Int): [ApiKey!]! @hasPermission(permission: "APIKEYS_SELECT")
  apikey(id: ID!): ApiKey @hasPermission(permission: "APIKEYS_SELECT")
  deviceproviders(where: DeviceProviderWhereInput, orderBy: DeviceProviderOrderByInput, skip: Int, first: Int): [DeviceProvider!]! @hasAnyPermission(permissions: ["DEVICEPROVIDERS_SELECT", "DEVICESETS_SELECT"])
  deviceprovider(id: ID!): DeviceProvider @hasPermission(permission: "DEVICEPROVIDERS_SELECT")
  registeredcomponents(where: RegisteredComponentWhereInput, orderBy: RegisteredComponentOrderByInput, skip: Int, first: Int): [RegisteredComponent!]! @hasAnyPermission(permissions: ["REGISTEREDCOMPONENTS_SELECT", "TESTPROJECTS_SELECT"])
  registeredcomponent(id: ID!): RegisteredComponent @hasPermission(permission: "REGISTEREDCOMPONENTS_SELECT")
  systemsettings: SystemSettings @hasPermission(permission: "SYSTEMSETTINGS_MANAGE")
  availableconnectors: [DropDownValue!]! @hasAnyPermission(permissions: ["CHATBOTS_SELECT", "CHATBOTS_CREATE", "CHATBOTS_UPDATE"])
  tags: [Tag!]!

  chartTestSetResultCount(testProjectId: ID): [ChartTestSetResultCount!]! @hasPermission(permission: "TESTSESSIONS_SELECT")
  chartFailedCountByChatbotByDay(timeFrame: ChartTimeFrame): [CountByDaySeries!]! @hasPermission(permission: "TESTSESSIONS_SELECT")
  chartFailedCountByTestSetByDay(testProjectId: ID, timeFrame: ChartTimeFrame): [CountByDaySeries!]! @hasPermission(permission: "TESTSESSIONS_SELECT")
  chartTestProjectTrainingStatusByTestSet(testProjectId: ID!): [ChartTrainingStatus!]! @hasPermission(permission: "TESTSESSIONS_SELECT")
  chartTestProjectTrainingStatusByDeviceSet(testProjectId: ID!): [ChartTrainingStatus!]! @hasPermission(permission: "TESTSESSIONS_SELECT")

  liveChatConvoSteps(conversationId: String!): [String!]! @hasPermission(permission: "CHATBOTS_LIVECHAT")
}

type Mutation {
  login(name: String, email: String, password: String!): AuthPayload!

  createTestProject(testProject: TestProjectCreateInput!): TestProject! @hasPermission(permission: "TESTPROJECTS_CREATE") @assertClient(query: ["chatbot", "testSet"], argsBase: ["testProject.chatbot.connect", "testProject.testSets.connect"]) @clientConnector(dataParam: ["testProject", "testProject.chatbot.create", "testProject.testSets.create"]) @tagsResolver(dataParam: "testProject") @licenseOperable
  quickstartTestProject(testProject: TestProjectCreateInput!, startProject: Boolean!): ID! @hasPermission(permission: "TESTPROJECTS_CREATE") @assertClient(query: ["chatbot", "testSet"], argsBase: ["testProject.chatbot.connect", "testProject.testSets.connect"]) @clientConnector(dataParam: ["testProject", "testProject.chatbot.create", "testProject.testSets.create"]) @tagsResolver(dataParam: "testProject") @licenseOperable
  startTestProject(id: ID!): TestSessionCreated! @hasPermission(permission: "TESTSESSIONS_CREATE") @assertClient(query: "testProject") @licenseOperable
  updateTestProject(id: ID!, testProject: TestProjectUpdateInput!): TestProject! @hasPermission(permission: "TESTPROJECTS_UPDATE") @assertClient(query: "testProject") @clientDisconnector(dataParam: "testProject") @tagsResolver(dataParam: "testProject") @licenseOperable
  deleteTestProject(id: ID!): Boolean! @hasPermission(permission: "TESTPROJECTS_DELETE") @assertClient(query: "testProject") @licenseOperable
  createAgent(agent: AgentCreateInput!): Agent! @hasPermission(permission: "AGENTS_CREATE") @tagsResolver(dataParam: "agent") @licenseOperable
  updateAgent(id: ID!, agent: AgentUpdateInput!): Agent! @hasPermission(permission: "AGENTS_UPDATE") @tagsResolver(dataParam: "agent") @licenseOperable
  deleteAgent(id: ID!): Boolean! @hasPermission(permission: "AGENTS_DELETE") @licenseOperable

  createChatbot(chatbot: ChatbotCreateInput!): Chatbot! @hasPermission(permission: "CHATBOTS_CREATE") @clientConnector(dataParam: "chatbot") @tagsResolver(dataParam: "chatbot") @licenseOperable
  updateChatbot(id: ID!, chatbot: ChatbotUpdateInput!): Chatbot! @hasPermission(permission: "CHATBOTS_UPDATE") @assertClient(query: "chatbot") @clientDisconnector(dataParam: "chatbot") @tagsResolver(dataParam: "chatbot") @licenseOperable
  deleteChatbot(id: ID!): Boolean! @hasPermission(permission: "CHATBOTS_DELETE") @assertClient(query: "chatbot") @licenseOperable
  createTestSession(testSession: TestSessionCreateInput!): TestSession! @hasPermission(permission: "TESTSESSIONS_CREATE") @assertClient(query: ["chatbot", "testSet"], argsBase: ["testSession.chatbot.connect", "testSession.testSets.connect"]) @clientConnector(dataParam: ["testSession", "testSession.chatbot.create", "testSession.testSets.create"]) @tagsResolver(dataParam: "testSession") @licenseOperable
  importFromDialogflow(chatbotId: ID!, testSetId: ID, newTestSetName: String, importer: String): ID! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: ["chatbot", "testSet"], idParam: ["chatbotId", "testSetId"]) @licenseOperable
  importFromAlexa(chatbotId: ID!, testSetId: ID, newTestSetName: String, buildconvos: Boolean, expandcustomslots: Boolean, expandbuiltinslots: Boolean, expandbuiltinslotsid: String, slotsamples: String, invocation: String): ID! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: ["chatbot", "testSet"], idParam: ["chatbotId", "testSetId"]) @licenseOperable
  importFromWatson(chatbotId: ID!, testSetId: ID, newTestSetName: String, buildconvos: Boolean): ID! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: ["chatbot", "testSet"], idParam: ["chatbotId", "testSetId"]) @licenseOperable

  deleteTestSession(id: ID!): Boolean! @hasPermission(permission: "TESTSESSIONS_DELETE") @assertClient(query: "testSession") @licenseOperable
  cancelTestSession(id: ID!): Boolean! @hasPermission(permission: "TESTSESSIONS_CREATE") @assertClient(query: "testSession") @licenseOperable
  stopTestSession(id: ID!): Boolean! @hasPermission(permission: "TESTSESSIONS_CREATE") @assertClient(query: "testSession") @licenseOperable

  createPerformanceTestSession(testProjectId: ID!, options: PerformanceTestSessionCreate!): ID! @hasPermission(permission: "PERFORMANCETESTSESSIONS_CREATE") @assertClient(query: ["chatbot", "testSet"], argsBase: ["performanceTestSession.chatbot.connect", "performanceTestSession.testSets.connect"]) @clientConnector(dataParam: ["performanceTestSession", "performanceTestSession.chatbot.create", "performanceTestSession.testSets.create"]) @tagsResolver(dataParam: "options") @licenseOperable
  deletePerformanceTestSession(id: ID!): Boolean! @hasPermission(permission: "PERFORMANCETESTSESSIONS_DELETE") @assertClient(query: "performanceTestSession") @licenseOperable

  createTestSet(testSet: TestSetCreateInput!): TestSet! @hasPermission(permission: "TESTSETS_CREATE") @clientConnector(dataParam: "testSet") @tagsResolver(dataParam: "testSet") @licenseOperable
  updateTestSet(id: ID!, testSet: TestSetUpdateInput!): TestSet! @hasPermission(permission: "TESTSETS_UPDATE") @assertClient(query: "testSet") @clientDisconnector(dataParam: "testSet") @tagsResolver(dataParam: "testSet") @licenseOperable
  deleteTestSet(id: ID!): Boolean! @hasPermission(permission: "TESTSETS_DELETE") @assertClient(query: "testSet") @licenseOperable
  cloneTestSet(id: ID!, options: CloneTestSetOptionsChoosen!): TestSet! @hasPermission(permission: "TESTSETS_CREATE") @assertClient(query: "testSet") @licenseOperable
  exportTestSetToGit(id: ID!, options: ExportTestSetToGitOptionsChoosen!): Boolean! @hasPermission(permission: "TESTSETS_UPDATE") @assertClient(query: "testSet") @licenseOperable
  exportTestSetToFolder(id: ID!, options: ExportTestSetToFolderOptionsChoosen!): Boolean! @hasPermission(permission: "TESTSETS_UPDATE") @assertClient(query: "testSet") @licenseOperable
  importTestSetFromZip(id: ID!, options: ImportTestSetFromZipOptionsChoosen!): Boolean! @hasPermission(permission: "TESTSETS_UPDATE") @assertClient(query: "testSet") @licenseOperable
  updateTestSetStats(id: ID!): TestSet! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: "testSet") @licenseOperable
  createTestSetScript(testSetScript: TestSetScriptCreateInput!): TestSetScript! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: "testSet", idParam: "testSetScript.testSet.connect.id", selector: "{ client { id } }") @clientConnector(dataParam: ["testSetScript.testSet.create"]) @licenseOperable
  updateTestSetScript(id: ID!, testSetScript: TestSetScriptUpdateInput!): TestSetScript! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: "testSetScript", selector: "{ testSet { client { id } } }") @licenseOperable
  deleteTestSetScript(id: ID!): Boolean! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: "testSetScript", selector: "{ testSet { client { id } } }") @licenseOperable
  createTestSetRepository(testSetRepository: TestSetRepositoryCreateInput!): TestSetRepository! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: "testSet", idParam: "testSetRepository.testSet.connect.id", selector: "{ client { id } }") @clientConnector(dataParam: ["testSetRepository.testSet.create"]) @licenseOperable
  updateTestSetRepository(id: ID!, testSetRepository: TestSetRepositoryUpdateInput!): TestSetRepository! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: "testSetRepository", selector: "{ testSet { client { id } } }") @licenseOperable
  deleteTestSetRepository(id: ID!): Boolean! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: "testSetRepository", selector: "{ testSet { client { id } } }") @licenseOperable
  createTestSetFolder(testSetFolder: TestSetFolderCreateInput!): TestSetFolder! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: "testSet", idParam: "testSetFolder.testSet.connect.id", selector: "{ client { id } }") @clientConnector(dataParam: ["testSetFolder.testSet.create"]) @licenseOperable
  updateTestSetFolder(id: ID!, testSetFolder: TestSetFolderUpdateInput!): TestSetFolder! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: "testSetFolder", selector: "{ testSet { client { id } } }") @licenseOperable
  deleteTestSetFolder(id: ID!): Boolean! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: "testSetFolder", selector: "{ testSet { client { id } } }") @licenseOperable
  createTestSetExcel(testSetExcel: TestSetExcelCreateInput!): TestSetExcel! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: "testSet", idParam: "testSetExcel.testSet.connect.id", selector: "{ client { id } }") @clientConnector(dataParam: ["testSetExcel.testSet.create"]) @licenseOperable
  updateTestSetExcel(id: ID!, testSetExcel: TestSetExcelUpdateInput!): TestSetExcel! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: "testSetExcel", selector: "{ testSet { client { id } } }") @licenseOperable
  deleteTestSetExcel(id: ID!): Boolean! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: "testSetExcel", selector: "{ testSet { client { id } } }") @licenseOperable

  createDeviceSet(deviceSet: DeviceSetCreateInput!): DeviceSet! @hasPermission(permission: "DEVICESETS_CREATE") @tagsResolver(dataParam: "deviceSet") @licenseOperable
  updateDeviceSet(id: ID!, deviceSet: DeviceSetUpdateInput!): DeviceSet! @hasPermission(permission: "DEVICESETS_UPDATE") @tagsResolver(dataParam: "deviceSet") @licenseOperable
  deleteDeviceSet(id: ID!): Boolean! @hasPermission(permission: "DEVICESETS_DELETE") @licenseOperable

  createUser(user: UserCreateInput!): User! @hasPermission(permission: "USERS_MANAGE") @licenseOperable
  updateUser(id: ID!, user: UserUpdateInput!): User! @hasPermission(permission: "USERS_MANAGE") @licenseOperable
  deleteUser(id: ID!): Boolean! @hasPermission(permission: "USERS_MANAGE") @licenseOperable

  createApiKey(apiKey: ApiKeyCreateInput!): ApiKey! @hasPermission(permission: "APIKEYS_MANAGE") @licenseOperable
  updateApiKey(id: ID!, apiKey: ApiKeyUpdateInput!): ApiKey! @hasPermission(permission: "APIKEYS_MANAGE") @licenseOperable
  deleteApiKey(id: ID!): Boolean! @hasPermission(permission: "APIKEYS_MANAGE") @licenseOperable

  createDeviceProvider(deviceProvider: DeviceProviderCreateInput!): DeviceProvider! @hasPermission(permission: "DEVICEPROVIDERS_MANAGE") @licenseOperable
  updateDeviceProvider(id: ID!, deviceProvider: DeviceProviderUpdateInput!): DeviceProvider! @hasPermission(permission: "DEVICEPROVIDERS_MANAGE") @licenseOperable
  deleteDeviceProvider(id: ID!): Boolean! @hasPermission(permission: "DEVICEPROVIDERS_MANAGE") @licenseOperable

  createRegisteredComponent(registeredComponent: RegisteredComponentCreateInput!): RegisteredComponent! @hasPermission(permission: "REGISTEREDCOMPONENTS_MANAGE") @licenseOperable
  updateRegisteredComponent(id: ID!, registeredComponent: RegisteredComponentUpdateInput!): RegisteredComponent! @hasPermission(permission: "REGISTEREDCOMPONENTS_MANAGE") @licenseOperable
  deleteRegisteredComponent(id: ID!): Boolean! @hasPermission(permission: "REGISTEREDCOMPONENTS_MANAGE") @licenseOperable

  updateSystemSettings(systemSettings: SystemSettingsUpdateInput!): SystemSettings! @hasPermission(permission: "SYSTEMSETTINGS_MANAGE") @licenseOperable
  importPrisma(prismaFile: String!): Boolean! @hasPermission(permission: "IMPORT_PRISMA") @licenseOperable
  importPrismaFromUrl(prismaUrl: String!): Boolean! @hasPermission(permission: "IMPORT_PRISMA") @licenseOperable

  liveChatStartBot(chatbotId: ID!): String! @hasPermission(permission: "CHATBOTS_LIVECHAT") @assertClient(query: "chatbot", idParam: "chatbotId") @licenseOperable
  liveChatSendToBot(chatbotId: ID!, conversationId: String!, convoStep: String!): Boolean! @hasPermission(permission: "CHATBOTS_LIVECHAT") @assertClient(query: "chatbot", idParam: "chatbotId") @licenseOperable
  liveChatStopBot(chatbotId: ID!, conversationId: String!): Boolean! @hasPermission(permission: "CHATBOTS_LIVECHAT") @assertClient(query: "chatbot", idParam: "chatbotId") @licenseOperable
  liveChatSaveConvoSteps(chatbotId: ID!, conversationId: String!, testSetId: ID, newTestSetName: String, testCaseName: String!, splitToConvoAndUtterancesMe: Boolean!, splitToConvoAndUtterancesBot: Boolean!, types: [String!]!): ID! @hasAnyPermission(permissions: ["TESTSETS_CREATE", "TESTSETS_UPDATE"]) @assertClient(query: ["chatbot", "testSet"], idParam: ["chatbotId", "testSetId"]) @licenseOperable
}

type Subscription {

  liveChatConvoStepAdded(conversationId: String!): LiveChatConvoStep!
  testSessionProgress(testSessionId: ID!): TestSession!@hasPermission(permission: "TESTSESSIONS_SELECT") @assertClient(query: "testSession", idParam: "testSessionId")
}

type ZapScanAlert {
  id: Int!
  method: Verb
  confidence: String
  risk: String
  alert: String
  solution: String
  evidence: String
  references: [String]
}

type ZapScanResult {
  inScope: [UrlInScope]!
}

type UrlInScope {
  processed: Boolean
  statusReason: String
  method: Verb
  reasonNotProcessed: String
  messageId: Int
  url: String
  statusCode: Int
}

enum Verb {
  POST,
  PUT,
  DELETE,
  GET
}

type LiveChatConvoStep {
  err: String
  convoStep: String
}

type DropDownValue {
  name: String!
  description: String
  value: String
}

enum Trend {
  GOOD
  BAD
  CONSTANT
  UNKNOWN
}

enum ChartTimeFrame {
  TODAY
  LASTWEEK
  LAST2WEEKS
  LASTMONTH
  LAST2MONTHS
  ALL
}

type ChartTestSetResultCount {
  id: ID!
  name: String!
  lastRun: DateTime!
  lastTestSessionId: ID!
  testCaseLastTotalCount: Int!
  testCaseLastSuccessCount: Int!
  testCaseLastSuccessRate: Float!
  previousRun: DateTime
  previousTestSessionId: ID
  testCasePreviousTotalCount: Int
  testCasePreviousSuccessCount: Int
  testCasePreviousSuccessRate: Float
  testCaseTrend: Trend!
}

type CountByDaySeries {
  id: ID!
  name: String!
  data: [Int]!
}

type ChartTrainingStatus {
  id: ID!
  name: String!
  totalCount: Int!
  successCount: Int!
  failedCount: Int!
}

type ValidateTestSetScriptOutput {
  name: String
  description: String
  script: String!
  scriptType: TestSetScriptType!
}

type CloneTestSetOptionsPossible {
  humanifiers: [String]!
}

input CloneTestSetOptionsChoosen {
  name: String,
  output: CloneTestSetOptionsOutputType!,humanifiersToExecute: [String]!,
  percentToHumanify: Float!
}

enum CloneTestSetOptionsOutputType {
  LOCAL
  FOLDER
}

input ExportTestSetToGitOptionsChoosen {
  id: ID!,
  gitbranch: String,
  gituser: String,
  gitpassword: String,
  gitcomment: String
}

input ExportTestSetToFolderOptionsChoosen {
  id: ID!,
  subdirectory: String
}

input ImportTestSetFromZipOptionsChoosen {
  filename: String!,
  filecontent: String!,
  overwrite: Boolean
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String!
  roles: [UserRole!]
  clients: [Client!]
}

type License {
  edition: String!
  isValid: Boolean!
  isOperable: Boolean!
  validity: DateTime
  operability: DateTime
}

input PerformanceTestSessionCreate {
  name: String!
  description: String
  parallelConvoCount: Int!
  parallelJobCount: Int!
  tickRepeatInitial: Int!
  tickRepeatPerTick: Int!
  tickMaxTime: Int!
  tickTime: Int!
  dataDensity: Int
  tags: PerformanceTestSessionCreatetagsInput
}

type PerformanceTestSessionSimplifiedWithStatus implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  tags: [String!]!
  parallelConvoCount: Int!
  parallelJobCount: Int!
  tickRepeatInitial: Int
  tickRepeatPerTick: Int
  tickMaxTime: Int!
  tickTime: Int!
  dataDensity: Int
  status: String!
}

type PerformanceTestSessionStatus implements Node {
  id: ID!
  status: String!
}

type TestSessionCreated implements Node {
  id: ID!
  testSets: [TestSet!]!
}

