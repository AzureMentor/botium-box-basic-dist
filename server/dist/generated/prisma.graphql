# source: http://192.168.99.100:4466/box/dev
# timestamp: Fri Sep 06 2019 18:24:29 GMT+0200 (GMT+02:00)

type Agent implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  tags: [String!]!
  heartbeat: DateTime
  debug: Boolean
  capabilities(where: CapabilityWhereInput, orderBy: CapabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Capability!]
}

"""A connection to a list of items."""
type AgentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AgentEdge]!
  aggregate: AggregateAgent!
}

input AgentCreateInput {
  name: String!
  description: String
  heartbeat: DateTime
  debug: Boolean
  tags: AgentCreatetagsInput
  capabilities: CapabilityCreateManyInput
}

input AgentCreateOneInput {
  create: AgentCreateInput
  connect: AgentWhereUniqueInput
}

input AgentCreatetagsInput {
  set: [String!]
}

"""An edge in a connection."""
type AgentEdge {
  """The item at the end of the edge."""
  node: Agent!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AgentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  heartbeat_ASC
  heartbeat_DESC
  debug_ASC
  debug_DESC
}

type AgentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  tags: [String!]!
  heartbeat: DateTime
  debug: Boolean
}

type AgentSubscriptionPayload {
  mutation: MutationType!
  node: Agent
  updatedFields: [String!]
  previousValues: AgentPreviousValues
}

input AgentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AgentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AgentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AgentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AgentWhereInput
}

input AgentUpdateDataInput {
  name: String
  description: String
  heartbeat: DateTime
  debug: Boolean
  tags: AgentUpdatetagsInput
  capabilities: CapabilityUpdateManyInput
}

input AgentUpdateInput {
  name: String
  description: String
  heartbeat: DateTime
  debug: Boolean
  tags: AgentUpdatetagsInput
  capabilities: CapabilityUpdateManyInput
}

input AgentUpdateManyMutationInput {
  name: String
  description: String
  heartbeat: DateTime
  debug: Boolean
  tags: AgentUpdatetagsInput
}

input AgentUpdateOneInput {
  create: AgentCreateInput
  connect: AgentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AgentUpdateDataInput
  upsert: AgentUpsertNestedInput
}

input AgentUpdatetagsInput {
  set: [String!]
}

input AgentUpsertNestedInput {
  update: AgentUpdateDataInput!
  create: AgentCreateInput!
}

input AgentWhereInput {
  """Logical AND on all given filters."""
  AND: [AgentWhereInput!]

  """Logical OR on all given filters."""
  OR: [AgentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AgentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  heartbeat: DateTime

  """All values that are not equal to given value."""
  heartbeat_not: DateTime

  """All values that are contained in given list."""
  heartbeat_in: [DateTime!]

  """All values that are not contained in given list."""
  heartbeat_not_in: [DateTime!]

  """All values less than the given value."""
  heartbeat_lt: DateTime

  """All values less than or equal the given value."""
  heartbeat_lte: DateTime

  """All values greater than the given value."""
  heartbeat_gt: DateTime

  """All values greater than or equal the given value."""
  heartbeat_gte: DateTime
  debug: Boolean

  """All values that are not equal to given value."""
  debug_not: Boolean
  capabilities_every: CapabilityWhereInput
  capabilities_some: CapabilityWhereInput
  capabilities_none: CapabilityWhereInput
}

input AgentWhereUniqueInput {
  id: ID
  name: String
}

type AggregateAgent {
  count: Int!
}

type AggregateApiKey {
  count: Int!
}

type AggregateCapability {
  count: Int!
}

type AggregateChatbot {
  count: Int!
}

type AggregateClient {
  count: Int!
}

type AggregateDeviceDescriptor {
  count: Int!
}

type AggregateDeviceProvider {
  count: Int!
}

type AggregateDeviceSet {
  count: Int!
}

type AggregatePerformanceTestSession {
  count: Int!
}

type AggregatePerformanceTestSessionAggregatedResult {
  count: Int!
}

type AggregatePerformanceTestSessionJob {
  count: Int!
}

type AggregateRegisteredComponent {
  count: Int!
}

type AggregateSecurityAlert {
  count: Int!
}

type AggregateSystemSettings {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateTestProject {
  count: Int!
}

type AggregateTestSession {
  count: Int!
}

type AggregateTestSessionJob {
  count: Int!
}

type AggregateTestSessionJobLog {
  count: Int!
}

type AggregateTestSessionTestCaseResult {
  count: Int!
}

type AggregateTestSessionTestCaseResultAttachment {
  count: Int!
}

type AggregateTestSessionTestCaseResultTranscript {
  count: Int!
}

type AggregateTestSet {
  count: Int!
}

type AggregateTestSetCompiledConvo {
  count: Int!
}

type AggregateTestSetExcel {
  count: Int!
}

type AggregateTestSetFolder {
  count: Int!
}

type AggregateTestSetRepository {
  count: Int!
}

type AggregateTestSetScript {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserRole {
  count: Int!
}

type ApiKey implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  key: String!
  validFrom: DateTime
  validTo: DateTime
  clients(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Client!]
  permissions: [String!]!
}

"""A connection to a list of items."""
type ApiKeyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ApiKeyEdge]!
  aggregate: AggregateApiKey!
}

input ApiKeyCreateInput {
  name: String!
  key: String!
  validFrom: DateTime
  validTo: DateTime
  permissions: ApiKeyCreatepermissionsInput
  clients: ClientCreateManyInput
}

input ApiKeyCreatepermissionsInput {
  set: [String!]
}

"""An edge in a connection."""
type ApiKeyEdge {
  """The item at the end of the edge."""
  node: ApiKey!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ApiKeyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  key_ASC
  key_DESC
  validFrom_ASC
  validFrom_DESC
  validTo_ASC
  validTo_DESC
}

type ApiKeyPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  key: String!
  validFrom: DateTime
  validTo: DateTime
  permissions: [String!]!
}

type ApiKeySubscriptionPayload {
  mutation: MutationType!
  node: ApiKey
  updatedFields: [String!]
  previousValues: ApiKeyPreviousValues
}

input ApiKeySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ApiKeySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ApiKeySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ApiKeySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ApiKeyWhereInput
}

input ApiKeyUpdateInput {
  name: String
  key: String
  validFrom: DateTime
  validTo: DateTime
  permissions: ApiKeyUpdatepermissionsInput
  clients: ClientUpdateManyInput
}

input ApiKeyUpdateManyMutationInput {
  name: String
  key: String
  validFrom: DateTime
  validTo: DateTime
  permissions: ApiKeyUpdatepermissionsInput
}

input ApiKeyUpdatepermissionsInput {
  set: [String!]
}

input ApiKeyWhereInput {
  """Logical AND on all given filters."""
  AND: [ApiKeyWhereInput!]

  """Logical OR on all given filters."""
  OR: [ApiKeyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ApiKeyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  key: String

  """All values that are not equal to given value."""
  key_not: String

  """All values that are contained in given list."""
  key_in: [String!]

  """All values that are not contained in given list."""
  key_not_in: [String!]

  """All values less than the given value."""
  key_lt: String

  """All values less than or equal the given value."""
  key_lte: String

  """All values greater than the given value."""
  key_gt: String

  """All values greater than or equal the given value."""
  key_gte: String

  """All values containing the given string."""
  key_contains: String

  """All values not containing the given string."""
  key_not_contains: String

  """All values starting with the given string."""
  key_starts_with: String

  """All values not starting with the given string."""
  key_not_starts_with: String

  """All values ending with the given string."""
  key_ends_with: String

  """All values not ending with the given string."""
  key_not_ends_with: String
  validFrom: DateTime

  """All values that are not equal to given value."""
  validFrom_not: DateTime

  """All values that are contained in given list."""
  validFrom_in: [DateTime!]

  """All values that are not contained in given list."""
  validFrom_not_in: [DateTime!]

  """All values less than the given value."""
  validFrom_lt: DateTime

  """All values less than or equal the given value."""
  validFrom_lte: DateTime

  """All values greater than the given value."""
  validFrom_gt: DateTime

  """All values greater than or equal the given value."""
  validFrom_gte: DateTime
  validTo: DateTime

  """All values that are not equal to given value."""
  validTo_not: DateTime

  """All values that are contained in given list."""
  validTo_in: [DateTime!]

  """All values that are not contained in given list."""
  validTo_not_in: [DateTime!]

  """All values less than the given value."""
  validTo_lt: DateTime

  """All values less than or equal the given value."""
  validTo_lte: DateTime

  """All values greater than the given value."""
  validTo_gt: DateTime

  """All values greater than or equal the given value."""
  validTo_gte: DateTime
  clients_every: ClientWhereInput
  clients_some: ClientWhereInput
  clients_none: ClientWhereInput
}

input ApiKeyWhereUniqueInput {
  id: ID
  name: String
  key: String
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Capability implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  type: CapabilityType!
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  jsonValue: String
}

"""A connection to a list of items."""
type CapabilityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CapabilityEdge]!
  aggregate: AggregateCapability!
}

input CapabilityCreateInput {
  name: String!
  type: CapabilityType!
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  jsonValue: String
}

input CapabilityCreateManyInput {
  create: [CapabilityCreateInput!]
  connect: [CapabilityWhereUniqueInput!]
}

"""An edge in a connection."""
type CapabilityEdge {
  """The item at the end of the edge."""
  node: Capability!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CapabilityOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  stringValue_ASC
  stringValue_DESC
  intValue_ASC
  intValue_DESC
  booleanValue_ASC
  booleanValue_DESC
  jsonValue_ASC
  jsonValue_DESC
}

type CapabilityPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  type: CapabilityType!
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  jsonValue: String
}

input CapabilityScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CapabilityScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CapabilityScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CapabilityScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  type: CapabilityType

  """All values that are not equal to given value."""
  type_not: CapabilityType

  """All values that are contained in given list."""
  type_in: [CapabilityType!]

  """All values that are not contained in given list."""
  type_not_in: [CapabilityType!]
  stringValue: String

  """All values that are not equal to given value."""
  stringValue_not: String

  """All values that are contained in given list."""
  stringValue_in: [String!]

  """All values that are not contained in given list."""
  stringValue_not_in: [String!]

  """All values less than the given value."""
  stringValue_lt: String

  """All values less than or equal the given value."""
  stringValue_lte: String

  """All values greater than the given value."""
  stringValue_gt: String

  """All values greater than or equal the given value."""
  stringValue_gte: String

  """All values containing the given string."""
  stringValue_contains: String

  """All values not containing the given string."""
  stringValue_not_contains: String

  """All values starting with the given string."""
  stringValue_starts_with: String

  """All values not starting with the given string."""
  stringValue_not_starts_with: String

  """All values ending with the given string."""
  stringValue_ends_with: String

  """All values not ending with the given string."""
  stringValue_not_ends_with: String
  intValue: Int

  """All values that are not equal to given value."""
  intValue_not: Int

  """All values that are contained in given list."""
  intValue_in: [Int!]

  """All values that are not contained in given list."""
  intValue_not_in: [Int!]

  """All values less than the given value."""
  intValue_lt: Int

  """All values less than or equal the given value."""
  intValue_lte: Int

  """All values greater than the given value."""
  intValue_gt: Int

  """All values greater than or equal the given value."""
  intValue_gte: Int
  booleanValue: Boolean

  """All values that are not equal to given value."""
  booleanValue_not: Boolean
  jsonValue: String

  """All values that are not equal to given value."""
  jsonValue_not: String

  """All values that are contained in given list."""
  jsonValue_in: [String!]

  """All values that are not contained in given list."""
  jsonValue_not_in: [String!]

  """All values less than the given value."""
  jsonValue_lt: String

  """All values less than or equal the given value."""
  jsonValue_lte: String

  """All values greater than the given value."""
  jsonValue_gt: String

  """All values greater than or equal the given value."""
  jsonValue_gte: String

  """All values containing the given string."""
  jsonValue_contains: String

  """All values not containing the given string."""
  jsonValue_not_contains: String

  """All values starting with the given string."""
  jsonValue_starts_with: String

  """All values not starting with the given string."""
  jsonValue_not_starts_with: String

  """All values ending with the given string."""
  jsonValue_ends_with: String

  """All values not ending with the given string."""
  jsonValue_not_ends_with: String
}

type CapabilitySubscriptionPayload {
  mutation: MutationType!
  node: Capability
  updatedFields: [String!]
  previousValues: CapabilityPreviousValues
}

input CapabilitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CapabilitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CapabilitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CapabilitySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CapabilityWhereInput
}

enum CapabilityType {
  STRING
  TEXT
  INT
  BOOLEAN
  JSON
  JS
}

input CapabilityUpdateDataInput {
  name: String
  type: CapabilityType
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  jsonValue: String
}

input CapabilityUpdateInput {
  name: String
  type: CapabilityType
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  jsonValue: String
}

input CapabilityUpdateManyDataInput {
  name: String
  type: CapabilityType
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  jsonValue: String
}

input CapabilityUpdateManyInput {
  create: [CapabilityCreateInput!]
  connect: [CapabilityWhereUniqueInput!]
  set: [CapabilityWhereUniqueInput!]
  disconnect: [CapabilityWhereUniqueInput!]
  delete: [CapabilityWhereUniqueInput!]
  update: [CapabilityUpdateWithWhereUniqueNestedInput!]
  updateMany: [CapabilityUpdateManyWithWhereNestedInput!]
  deleteMany: [CapabilityScalarWhereInput!]
  upsert: [CapabilityUpsertWithWhereUniqueNestedInput!]
}

input CapabilityUpdateManyMutationInput {
  name: String
  type: CapabilityType
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  jsonValue: String
}

input CapabilityUpdateManyWithWhereNestedInput {
  where: CapabilityScalarWhereInput!
  data: CapabilityUpdateManyDataInput!
}

input CapabilityUpdateWithWhereUniqueNestedInput {
  where: CapabilityWhereUniqueInput!
  data: CapabilityUpdateDataInput!
}

input CapabilityUpsertWithWhereUniqueNestedInput {
  where: CapabilityWhereUniqueInput!
  update: CapabilityUpdateDataInput!
  create: CapabilityCreateInput!
}

input CapabilityWhereInput {
  """Logical AND on all given filters."""
  AND: [CapabilityWhereInput!]

  """Logical OR on all given filters."""
  OR: [CapabilityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CapabilityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  type: CapabilityType

  """All values that are not equal to given value."""
  type_not: CapabilityType

  """All values that are contained in given list."""
  type_in: [CapabilityType!]

  """All values that are not contained in given list."""
  type_not_in: [CapabilityType!]
  stringValue: String

  """All values that are not equal to given value."""
  stringValue_not: String

  """All values that are contained in given list."""
  stringValue_in: [String!]

  """All values that are not contained in given list."""
  stringValue_not_in: [String!]

  """All values less than the given value."""
  stringValue_lt: String

  """All values less than or equal the given value."""
  stringValue_lte: String

  """All values greater than the given value."""
  stringValue_gt: String

  """All values greater than or equal the given value."""
  stringValue_gte: String

  """All values containing the given string."""
  stringValue_contains: String

  """All values not containing the given string."""
  stringValue_not_contains: String

  """All values starting with the given string."""
  stringValue_starts_with: String

  """All values not starting with the given string."""
  stringValue_not_starts_with: String

  """All values ending with the given string."""
  stringValue_ends_with: String

  """All values not ending with the given string."""
  stringValue_not_ends_with: String
  intValue: Int

  """All values that are not equal to given value."""
  intValue_not: Int

  """All values that are contained in given list."""
  intValue_in: [Int!]

  """All values that are not contained in given list."""
  intValue_not_in: [Int!]

  """All values less than the given value."""
  intValue_lt: Int

  """All values less than or equal the given value."""
  intValue_lte: Int

  """All values greater than the given value."""
  intValue_gt: Int

  """All values greater than or equal the given value."""
  intValue_gte: Int
  booleanValue: Boolean

  """All values that are not equal to given value."""
  booleanValue_not: Boolean
  jsonValue: String

  """All values that are not equal to given value."""
  jsonValue_not: String

  """All values that are contained in given list."""
  jsonValue_in: [String!]

  """All values that are not contained in given list."""
  jsonValue_not_in: [String!]

  """All values less than the given value."""
  jsonValue_lt: String

  """All values less than or equal the given value."""
  jsonValue_lte: String

  """All values greater than the given value."""
  jsonValue_gt: String

  """All values greater than or equal the given value."""
  jsonValue_gte: String

  """All values containing the given string."""
  jsonValue_contains: String

  """All values not containing the given string."""
  jsonValue_not_contains: String

  """All values starting with the given string."""
  jsonValue_starts_with: String

  """All values not starting with the given string."""
  jsonValue_not_starts_with: String

  """All values ending with the given string."""
  jsonValue_ends_with: String

  """All values not ending with the given string."""
  jsonValue_not_ends_with: String
}

input CapabilityWhereUniqueInput {
  id: ID
}

type Chatbot implements Node {
  id: ID!
  client: Client
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  tags: [String!]!
  allowHtmlDisplay: Boolean
  retryUserSaysNumRetries: Int
  retryUserSaysFactor: Int
  retryUserSaysMinTimeout: Int
  retryUserSaysOnErrorRegexp: [String!]!
  capabilities(where: CapabilityWhereInput, orderBy: CapabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Capability!]
  sources(where: CapabilityWhereInput, orderBy: CapabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Capability!]
  envs(where: CapabilityWhereInput, orderBy: CapabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Capability!]
}

"""A connection to a list of items."""
type ChatbotConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatbotEdge]!
  aggregate: AggregateChatbot!
}

input ChatbotCreateInput {
  name: String!
  description: String
  allowHtmlDisplay: Boolean
  retryUserSaysNumRetries: Int
  retryUserSaysFactor: Int
  retryUserSaysMinTimeout: Int
  tags: ChatbotCreatetagsInput
  retryUserSaysOnErrorRegexp: ChatbotCreateretryUserSaysOnErrorRegexpInput
  client: ClientCreateOneInput
  capabilities: CapabilityCreateManyInput
  sources: CapabilityCreateManyInput
  envs: CapabilityCreateManyInput
}

input ChatbotCreateOneInput {
  create: ChatbotCreateInput
  connect: ChatbotWhereUniqueInput
}

input ChatbotCreateretryUserSaysOnErrorRegexpInput {
  set: [String!]
}

input ChatbotCreatetagsInput {
  set: [String!]
}

"""An edge in a connection."""
type ChatbotEdge {
  """The item at the end of the edge."""
  node: Chatbot!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChatbotOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  allowHtmlDisplay_ASC
  allowHtmlDisplay_DESC
  retryUserSaysNumRetries_ASC
  retryUserSaysNumRetries_DESC
  retryUserSaysFactor_ASC
  retryUserSaysFactor_DESC
  retryUserSaysMinTimeout_ASC
  retryUserSaysMinTimeout_DESC
}

type ChatbotPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  tags: [String!]!
  allowHtmlDisplay: Boolean
  retryUserSaysNumRetries: Int
  retryUserSaysFactor: Int
  retryUserSaysMinTimeout: Int
  retryUserSaysOnErrorRegexp: [String!]!
}

type ChatbotSubscriptionPayload {
  mutation: MutationType!
  node: Chatbot
  updatedFields: [String!]
  previousValues: ChatbotPreviousValues
}

input ChatbotSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatbotSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatbotSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatbotSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChatbotWhereInput
}

input ChatbotUpdateDataInput {
  name: String
  description: String
  allowHtmlDisplay: Boolean
  retryUserSaysNumRetries: Int
  retryUserSaysFactor: Int
  retryUserSaysMinTimeout: Int
  tags: ChatbotUpdatetagsInput
  retryUserSaysOnErrorRegexp: ChatbotUpdateretryUserSaysOnErrorRegexpInput
  client: ClientUpdateOneInput
  capabilities: CapabilityUpdateManyInput
  sources: CapabilityUpdateManyInput
  envs: CapabilityUpdateManyInput
}

input ChatbotUpdateInput {
  name: String
  description: String
  allowHtmlDisplay: Boolean
  retryUserSaysNumRetries: Int
  retryUserSaysFactor: Int
  retryUserSaysMinTimeout: Int
  tags: ChatbotUpdatetagsInput
  retryUserSaysOnErrorRegexp: ChatbotUpdateretryUserSaysOnErrorRegexpInput
  client: ClientUpdateOneInput
  capabilities: CapabilityUpdateManyInput
  sources: CapabilityUpdateManyInput
  envs: CapabilityUpdateManyInput
}

input ChatbotUpdateManyMutationInput {
  name: String
  description: String
  allowHtmlDisplay: Boolean
  retryUserSaysNumRetries: Int
  retryUserSaysFactor: Int
  retryUserSaysMinTimeout: Int
  tags: ChatbotUpdatetagsInput
  retryUserSaysOnErrorRegexp: ChatbotUpdateretryUserSaysOnErrorRegexpInput
}

input ChatbotUpdateOneRequiredInput {
  create: ChatbotCreateInput
  connect: ChatbotWhereUniqueInput
  update: ChatbotUpdateDataInput
  upsert: ChatbotUpsertNestedInput
}

input ChatbotUpdateretryUserSaysOnErrorRegexpInput {
  set: [String!]
}

input ChatbotUpdatetagsInput {
  set: [String!]
}

input ChatbotUpsertNestedInput {
  update: ChatbotUpdateDataInput!
  create: ChatbotCreateInput!
}

input ChatbotWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatbotWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatbotWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatbotWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  allowHtmlDisplay: Boolean

  """All values that are not equal to given value."""
  allowHtmlDisplay_not: Boolean
  retryUserSaysNumRetries: Int

  """All values that are not equal to given value."""
  retryUserSaysNumRetries_not: Int

  """All values that are contained in given list."""
  retryUserSaysNumRetries_in: [Int!]

  """All values that are not contained in given list."""
  retryUserSaysNumRetries_not_in: [Int!]

  """All values less than the given value."""
  retryUserSaysNumRetries_lt: Int

  """All values less than or equal the given value."""
  retryUserSaysNumRetries_lte: Int

  """All values greater than the given value."""
  retryUserSaysNumRetries_gt: Int

  """All values greater than or equal the given value."""
  retryUserSaysNumRetries_gte: Int
  retryUserSaysFactor: Int

  """All values that are not equal to given value."""
  retryUserSaysFactor_not: Int

  """All values that are contained in given list."""
  retryUserSaysFactor_in: [Int!]

  """All values that are not contained in given list."""
  retryUserSaysFactor_not_in: [Int!]

  """All values less than the given value."""
  retryUserSaysFactor_lt: Int

  """All values less than or equal the given value."""
  retryUserSaysFactor_lte: Int

  """All values greater than the given value."""
  retryUserSaysFactor_gt: Int

  """All values greater than or equal the given value."""
  retryUserSaysFactor_gte: Int
  retryUserSaysMinTimeout: Int

  """All values that are not equal to given value."""
  retryUserSaysMinTimeout_not: Int

  """All values that are contained in given list."""
  retryUserSaysMinTimeout_in: [Int!]

  """All values that are not contained in given list."""
  retryUserSaysMinTimeout_not_in: [Int!]

  """All values less than the given value."""
  retryUserSaysMinTimeout_lt: Int

  """All values less than or equal the given value."""
  retryUserSaysMinTimeout_lte: Int

  """All values greater than the given value."""
  retryUserSaysMinTimeout_gt: Int

  """All values greater than or equal the given value."""
  retryUserSaysMinTimeout_gte: Int
  client: ClientWhereInput
  capabilities_every: CapabilityWhereInput
  capabilities_some: CapabilityWhereInput
  capabilities_none: CapabilityWhereInput
  sources_every: CapabilityWhereInput
  sources_some: CapabilityWhereInput
  sources_none: CapabilityWhereInput
  envs_every: CapabilityWhereInput
  envs_some: CapabilityWhereInput
  envs_none: CapabilityWhereInput
}

input ChatbotWhereUniqueInput {
  id: ID
}

type Client implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

"""A connection to a list of items."""
type ClientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClientEdge]!
  aggregate: AggregateClient!
}

input ClientCreateInput {
  name: String!
}

input ClientCreateManyInput {
  create: [ClientCreateInput!]
  connect: [ClientWhereUniqueInput!]
}

input ClientCreateOneInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
}

"""An edge in a connection."""
type ClientEdge {
  """The item at the end of the edge."""
  node: Client!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ClientOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type ClientPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

input ClientScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ClientScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClientScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClientScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type ClientSubscriptionPayload {
  mutation: MutationType!
  node: Client
  updatedFields: [String!]
  previousValues: ClientPreviousValues
}

input ClientSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ClientSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClientSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClientSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ClientWhereInput
}

input ClientUpdateDataInput {
  name: String
}

input ClientUpdateInput {
  name: String
}

input ClientUpdateManyDataInput {
  name: String
}

input ClientUpdateManyInput {
  create: [ClientCreateInput!]
  connect: [ClientWhereUniqueInput!]
  set: [ClientWhereUniqueInput!]
  disconnect: [ClientWhereUniqueInput!]
  delete: [ClientWhereUniqueInput!]
  update: [ClientUpdateWithWhereUniqueNestedInput!]
  updateMany: [ClientUpdateManyWithWhereNestedInput!]
  deleteMany: [ClientScalarWhereInput!]
  upsert: [ClientUpsertWithWhereUniqueNestedInput!]
}

input ClientUpdateManyMutationInput {
  name: String
}

input ClientUpdateManyWithWhereNestedInput {
  where: ClientScalarWhereInput!
  data: ClientUpdateManyDataInput!
}

input ClientUpdateOneInput {
  create: ClientCreateInput
  connect: ClientWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ClientUpdateDataInput
  upsert: ClientUpsertNestedInput
}

input ClientUpdateWithWhereUniqueNestedInput {
  where: ClientWhereUniqueInput!
  data: ClientUpdateDataInput!
}

input ClientUpsertNestedInput {
  update: ClientUpdateDataInput!
  create: ClientCreateInput!
}

input ClientUpsertWithWhereUniqueNestedInput {
  where: ClientWhereUniqueInput!
  update: ClientUpdateDataInput!
  create: ClientCreateInput!
}

input ClientWhereInput {
  """Logical AND on all given filters."""
  AND: [ClientWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClientWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClientWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input ClientWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

type DeviceDescriptor implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  type: DeviceType!
  capabilities: String!
}

"""A connection to a list of items."""
type DeviceDescriptorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DeviceDescriptorEdge]!
  aggregate: AggregateDeviceDescriptor!
}

input DeviceDescriptorCreateInput {
  name: String!
  type: DeviceType!
  capabilities: String!
}

input DeviceDescriptorCreateManyInput {
  create: [DeviceDescriptorCreateInput!]
  connect: [DeviceDescriptorWhereUniqueInput!]
}

"""An edge in a connection."""
type DeviceDescriptorEdge {
  """The item at the end of the edge."""
  node: DeviceDescriptor!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DeviceDescriptorOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  capabilities_ASC
  capabilities_DESC
}

type DeviceDescriptorPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  type: DeviceType!
  capabilities: String!
}

input DeviceDescriptorScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DeviceDescriptorScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeviceDescriptorScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeviceDescriptorScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  type: DeviceType

  """All values that are not equal to given value."""
  type_not: DeviceType

  """All values that are contained in given list."""
  type_in: [DeviceType!]

  """All values that are not contained in given list."""
  type_not_in: [DeviceType!]
  capabilities: String

  """All values that are not equal to given value."""
  capabilities_not: String

  """All values that are contained in given list."""
  capabilities_in: [String!]

  """All values that are not contained in given list."""
  capabilities_not_in: [String!]

  """All values less than the given value."""
  capabilities_lt: String

  """All values less than or equal the given value."""
  capabilities_lte: String

  """All values greater than the given value."""
  capabilities_gt: String

  """All values greater than or equal the given value."""
  capabilities_gte: String

  """All values containing the given string."""
  capabilities_contains: String

  """All values not containing the given string."""
  capabilities_not_contains: String

  """All values starting with the given string."""
  capabilities_starts_with: String

  """All values not starting with the given string."""
  capabilities_not_starts_with: String

  """All values ending with the given string."""
  capabilities_ends_with: String

  """All values not ending with the given string."""
  capabilities_not_ends_with: String
}

type DeviceDescriptorSubscriptionPayload {
  mutation: MutationType!
  node: DeviceDescriptor
  updatedFields: [String!]
  previousValues: DeviceDescriptorPreviousValues
}

input DeviceDescriptorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DeviceDescriptorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeviceDescriptorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeviceDescriptorSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DeviceDescriptorWhereInput
}

input DeviceDescriptorUpdateDataInput {
  name: String
  type: DeviceType
  capabilities: String
}

input DeviceDescriptorUpdateInput {
  name: String
  type: DeviceType
  capabilities: String
}

input DeviceDescriptorUpdateManyDataInput {
  name: String
  type: DeviceType
  capabilities: String
}

input DeviceDescriptorUpdateManyInput {
  create: [DeviceDescriptorCreateInput!]
  connect: [DeviceDescriptorWhereUniqueInput!]
  set: [DeviceDescriptorWhereUniqueInput!]
  disconnect: [DeviceDescriptorWhereUniqueInput!]
  delete: [DeviceDescriptorWhereUniqueInput!]
  update: [DeviceDescriptorUpdateWithWhereUniqueNestedInput!]
  updateMany: [DeviceDescriptorUpdateManyWithWhereNestedInput!]
  deleteMany: [DeviceDescriptorScalarWhereInput!]
  upsert: [DeviceDescriptorUpsertWithWhereUniqueNestedInput!]
}

input DeviceDescriptorUpdateManyMutationInput {
  name: String
  type: DeviceType
  capabilities: String
}

input DeviceDescriptorUpdateManyWithWhereNestedInput {
  where: DeviceDescriptorScalarWhereInput!
  data: DeviceDescriptorUpdateManyDataInput!
}

input DeviceDescriptorUpdateWithWhereUniqueNestedInput {
  where: DeviceDescriptorWhereUniqueInput!
  data: DeviceDescriptorUpdateDataInput!
}

input DeviceDescriptorUpsertWithWhereUniqueNestedInput {
  where: DeviceDescriptorWhereUniqueInput!
  update: DeviceDescriptorUpdateDataInput!
  create: DeviceDescriptorCreateInput!
}

input DeviceDescriptorWhereInput {
  """Logical AND on all given filters."""
  AND: [DeviceDescriptorWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeviceDescriptorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeviceDescriptorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  type: DeviceType

  """All values that are not equal to given value."""
  type_not: DeviceType

  """All values that are contained in given list."""
  type_in: [DeviceType!]

  """All values that are not contained in given list."""
  type_not_in: [DeviceType!]
  capabilities: String

  """All values that are not equal to given value."""
  capabilities_not: String

  """All values that are contained in given list."""
  capabilities_in: [String!]

  """All values that are not contained in given list."""
  capabilities_not_in: [String!]

  """All values less than the given value."""
  capabilities_lt: String

  """All values less than or equal the given value."""
  capabilities_lte: String

  """All values greater than the given value."""
  capabilities_gt: String

  """All values greater than or equal the given value."""
  capabilities_gte: String

  """All values containing the given string."""
  capabilities_contains: String

  """All values not containing the given string."""
  capabilities_not_contains: String

  """All values starting with the given string."""
  capabilities_starts_with: String

  """All values not starting with the given string."""
  capabilities_not_starts_with: String

  """All values ending with the given string."""
  capabilities_ends_with: String

  """All values not ending with the given string."""
  capabilities_not_ends_with: String
}

input DeviceDescriptorWhereUniqueInput {
  id: ID
}

type DeviceProvider implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  type: DeviceProviderType!
  url: String
  username: String
  password: String
}

"""A connection to a list of items."""
type DeviceProviderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DeviceProviderEdge]!
  aggregate: AggregateDeviceProvider!
}

input DeviceProviderCreateInput {
  name: String!
  type: DeviceProviderType!
  url: String
  username: String
  password: String
}

input DeviceProviderCreateOneInput {
  create: DeviceProviderCreateInput
  connect: DeviceProviderWhereUniqueInput
}

"""An edge in a connection."""
type DeviceProviderEdge {
  """The item at the end of the edge."""
  node: DeviceProvider!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DeviceProviderOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  url_ASC
  url_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
}

type DeviceProviderPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  type: DeviceProviderType!
  url: String
  username: String
  password: String
}

type DeviceProviderSubscriptionPayload {
  mutation: MutationType!
  node: DeviceProvider
  updatedFields: [String!]
  previousValues: DeviceProviderPreviousValues
}

input DeviceProviderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DeviceProviderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeviceProviderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeviceProviderSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DeviceProviderWhereInput
}

enum DeviceProviderType {
  SAUCELABS
  TESTOBJECTS
  EXPERITEST
  LOCALSELENIUM
  INTEGRATED
}

input DeviceProviderUpdateDataInput {
  name: String
  type: DeviceProviderType
  url: String
  username: String
  password: String
}

input DeviceProviderUpdateInput {
  name: String
  type: DeviceProviderType
  url: String
  username: String
  password: String
}

input DeviceProviderUpdateManyMutationInput {
  name: String
  type: DeviceProviderType
  url: String
  username: String
  password: String
}

input DeviceProviderUpdateOneRequiredInput {
  create: DeviceProviderCreateInput
  connect: DeviceProviderWhereUniqueInput
  update: DeviceProviderUpdateDataInput
  upsert: DeviceProviderUpsertNestedInput
}

input DeviceProviderUpsertNestedInput {
  update: DeviceProviderUpdateDataInput!
  create: DeviceProviderCreateInput!
}

input DeviceProviderWhereInput {
  """Logical AND on all given filters."""
  AND: [DeviceProviderWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeviceProviderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeviceProviderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  type: DeviceProviderType

  """All values that are not equal to given value."""
  type_not: DeviceProviderType

  """All values that are contained in given list."""
  type_in: [DeviceProviderType!]

  """All values that are not contained in given list."""
  type_not_in: [DeviceProviderType!]
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
}

input DeviceProviderWhereUniqueInput {
  id: ID
  name: String
}

type DeviceSet implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  tags: [String!]!
  provider: DeviceProvider!
  devices(where: DeviceDescriptorWhereInput, orderBy: DeviceDescriptorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DeviceDescriptor!]
}

"""A connection to a list of items."""
type DeviceSetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DeviceSetEdge]!
  aggregate: AggregateDeviceSet!
}

input DeviceSetCreateInput {
  name: String!
  description: String
  tags: DeviceSetCreatetagsInput
  provider: DeviceProviderCreateOneInput!
  devices: DeviceDescriptorCreateManyInput
}

input DeviceSetCreateManyInput {
  create: [DeviceSetCreateInput!]
  connect: [DeviceSetWhereUniqueInput!]
}

input DeviceSetCreateOneInput {
  create: DeviceSetCreateInput
  connect: DeviceSetWhereUniqueInput
}

input DeviceSetCreatetagsInput {
  set: [String!]
}

"""An edge in a connection."""
type DeviceSetEdge {
  """The item at the end of the edge."""
  node: DeviceSet!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DeviceSetOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type DeviceSetPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  tags: [String!]!
}

input DeviceSetScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DeviceSetScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeviceSetScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeviceSetScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type DeviceSetSubscriptionPayload {
  mutation: MutationType!
  node: DeviceSet
  updatedFields: [String!]
  previousValues: DeviceSetPreviousValues
}

input DeviceSetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DeviceSetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeviceSetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeviceSetSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DeviceSetWhereInput
}

input DeviceSetUpdateDataInput {
  name: String
  description: String
  tags: DeviceSetUpdatetagsInput
  provider: DeviceProviderUpdateOneRequiredInput
  devices: DeviceDescriptorUpdateManyInput
}

input DeviceSetUpdateInput {
  name: String
  description: String
  tags: DeviceSetUpdatetagsInput
  provider: DeviceProviderUpdateOneRequiredInput
  devices: DeviceDescriptorUpdateManyInput
}

input DeviceSetUpdateManyDataInput {
  name: String
  description: String
  tags: DeviceSetUpdatetagsInput
}

input DeviceSetUpdateManyInput {
  create: [DeviceSetCreateInput!]
  connect: [DeviceSetWhereUniqueInput!]
  set: [DeviceSetWhereUniqueInput!]
  disconnect: [DeviceSetWhereUniqueInput!]
  delete: [DeviceSetWhereUniqueInput!]
  update: [DeviceSetUpdateWithWhereUniqueNestedInput!]
  updateMany: [DeviceSetUpdateManyWithWhereNestedInput!]
  deleteMany: [DeviceSetScalarWhereInput!]
  upsert: [DeviceSetUpsertWithWhereUniqueNestedInput!]
}

input DeviceSetUpdateManyMutationInput {
  name: String
  description: String
  tags: DeviceSetUpdatetagsInput
}

input DeviceSetUpdateManyWithWhereNestedInput {
  where: DeviceSetScalarWhereInput!
  data: DeviceSetUpdateManyDataInput!
}

input DeviceSetUpdateOneInput {
  create: DeviceSetCreateInput
  connect: DeviceSetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DeviceSetUpdateDataInput
  upsert: DeviceSetUpsertNestedInput
}

input DeviceSetUpdatetagsInput {
  set: [String!]
}

input DeviceSetUpdateWithWhereUniqueNestedInput {
  where: DeviceSetWhereUniqueInput!
  data: DeviceSetUpdateDataInput!
}

input DeviceSetUpsertNestedInput {
  update: DeviceSetUpdateDataInput!
  create: DeviceSetCreateInput!
}

input DeviceSetUpsertWithWhereUniqueNestedInput {
  where: DeviceSetWhereUniqueInput!
  update: DeviceSetUpdateDataInput!
  create: DeviceSetCreateInput!
}

input DeviceSetWhereInput {
  """Logical AND on all given filters."""
  AND: [DeviceSetWhereInput!]

  """Logical OR on all given filters."""
  OR: [DeviceSetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DeviceSetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  provider: DeviceProviderWhereInput
  devices_every: DeviceDescriptorWhereInput
  devices_some: DeviceDescriptorWhereInput
  devices_none: DeviceDescriptorWhereInput
}

input DeviceSetWhereUniqueInput {
  id: ID
}

enum DeviceType {
  DESKTOP
  MOBILEBROWSER
  MOBILEAPP
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createTag(data: TagCreateInput!): Tag!
  createTestSession(data: TestSessionCreateInput!): TestSession!
  createTestSessionTestCaseResult(data: TestSessionTestCaseResultCreateInput!): TestSessionTestCaseResult!
  createTestSessionTestCaseResultAttachment(data: TestSessionTestCaseResultAttachmentCreateInput!): TestSessionTestCaseResultAttachment!
  createTestSessionJob(data: TestSessionJobCreateInput!): TestSessionJob!
  createTestSessionJobLog(data: TestSessionJobLogCreateInput!): TestSessionJobLog!
  createPerformanceTestSession(data: PerformanceTestSessionCreateInput!): PerformanceTestSession!
  createPerformanceTestSessionAggregatedResult(data: PerformanceTestSessionAggregatedResultCreateInput!): PerformanceTestSessionAggregatedResult!
  createUser(data: UserCreateInput!): User!
  createApiKey(data: ApiKeyCreateInput!): ApiKey!
  createSystemSettings(data: SystemSettingsCreateInput!): SystemSettings!
  createTestSetRepository(data: TestSetRepositoryCreateInput!): TestSetRepository!
  createDeviceDescriptor(data: DeviceDescriptorCreateInput!): DeviceDescriptor!
  createAgent(data: AgentCreateInput!): Agent!
  createTestSetFolder(data: TestSetFolderCreateInput!): TestSetFolder!
  createTestProject(data: TestProjectCreateInput!): TestProject!
  createTestSetScript(data: TestSetScriptCreateInput!): TestSetScript!
  createPerformanceTestSessionJob(data: PerformanceTestSessionJobCreateInput!): PerformanceTestSessionJob!
  createTestSessionTestCaseResultTranscript(data: TestSessionTestCaseResultTranscriptCreateInput!): TestSessionTestCaseResultTranscript!
  createChatbot(data: ChatbotCreateInput!): Chatbot!
  createTestSet(data: TestSetCreateInput!): TestSet!
  createDeviceSet(data: DeviceSetCreateInput!): DeviceSet!
  createTestSetCompiledConvo(data: TestSetCompiledConvoCreateInput!): TestSetCompiledConvo!
  createRegisteredComponent(data: RegisteredComponentCreateInput!): RegisteredComponent!
  createSecurityAlert(data: SecurityAlertCreateInput!): SecurityAlert!
  createCapability(data: CapabilityCreateInput!): Capability!
  createTestSetExcel(data: TestSetExcelCreateInput!): TestSetExcel!
  createDeviceProvider(data: DeviceProviderCreateInput!): DeviceProvider!
  createUserRole(data: UserRoleCreateInput!): UserRole!
  createClient(data: ClientCreateInput!): Client!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateTestSession(data: TestSessionUpdateInput!, where: TestSessionWhereUniqueInput!): TestSession
  updateTestSessionTestCaseResult(data: TestSessionTestCaseResultUpdateInput!, where: TestSessionTestCaseResultWhereUniqueInput!): TestSessionTestCaseResult
  updateTestSessionTestCaseResultAttachment(data: TestSessionTestCaseResultAttachmentUpdateInput!, where: TestSessionTestCaseResultAttachmentWhereUniqueInput!): TestSessionTestCaseResultAttachment
  updateTestSessionJob(data: TestSessionJobUpdateInput!, where: TestSessionJobWhereUniqueInput!): TestSessionJob
  updateTestSessionJobLog(data: TestSessionJobLogUpdateInput!, where: TestSessionJobLogWhereUniqueInput!): TestSessionJobLog
  updatePerformanceTestSession(data: PerformanceTestSessionUpdateInput!, where: PerformanceTestSessionWhereUniqueInput!): PerformanceTestSession
  updatePerformanceTestSessionAggregatedResult(data: PerformanceTestSessionAggregatedResultUpdateInput!, where: PerformanceTestSessionAggregatedResultWhereUniqueInput!): PerformanceTestSessionAggregatedResult
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateApiKey(data: ApiKeyUpdateInput!, where: ApiKeyWhereUniqueInput!): ApiKey
  updateSystemSettings(data: SystemSettingsUpdateInput!, where: SystemSettingsWhereUniqueInput!): SystemSettings
  updateTestSetRepository(data: TestSetRepositoryUpdateInput!, where: TestSetRepositoryWhereUniqueInput!): TestSetRepository
  updateDeviceDescriptor(data: DeviceDescriptorUpdateInput!, where: DeviceDescriptorWhereUniqueInput!): DeviceDescriptor
  updateAgent(data: AgentUpdateInput!, where: AgentWhereUniqueInput!): Agent
  updateTestSetFolder(data: TestSetFolderUpdateInput!, where: TestSetFolderWhereUniqueInput!): TestSetFolder
  updateTestProject(data: TestProjectUpdateInput!, where: TestProjectWhereUniqueInput!): TestProject
  updateTestSetScript(data: TestSetScriptUpdateInput!, where: TestSetScriptWhereUniqueInput!): TestSetScript
  updatePerformanceTestSessionJob(data: PerformanceTestSessionJobUpdateInput!, where: PerformanceTestSessionJobWhereUniqueInput!): PerformanceTestSessionJob
  updateTestSessionTestCaseResultTranscript(data: TestSessionTestCaseResultTranscriptUpdateInput!, where: TestSessionTestCaseResultTranscriptWhereUniqueInput!): TestSessionTestCaseResultTranscript
  updateChatbot(data: ChatbotUpdateInput!, where: ChatbotWhereUniqueInput!): Chatbot
  updateTestSet(data: TestSetUpdateInput!, where: TestSetWhereUniqueInput!): TestSet
  updateDeviceSet(data: DeviceSetUpdateInput!, where: DeviceSetWhereUniqueInput!): DeviceSet
  updateTestSetCompiledConvo(data: TestSetCompiledConvoUpdateInput!, where: TestSetCompiledConvoWhereUniqueInput!): TestSetCompiledConvo
  updateRegisteredComponent(data: RegisteredComponentUpdateInput!, where: RegisteredComponentWhereUniqueInput!): RegisteredComponent
  updateSecurityAlert(data: SecurityAlertUpdateInput!, where: SecurityAlertWhereUniqueInput!): SecurityAlert
  updateCapability(data: CapabilityUpdateInput!, where: CapabilityWhereUniqueInput!): Capability
  updateTestSetExcel(data: TestSetExcelUpdateInput!, where: TestSetExcelWhereUniqueInput!): TestSetExcel
  updateDeviceProvider(data: DeviceProviderUpdateInput!, where: DeviceProviderWhereUniqueInput!): DeviceProvider
  updateUserRole(data: UserRoleUpdateInput!, where: UserRoleWhereUniqueInput!): UserRole
  updateClient(data: ClientUpdateInput!, where: ClientWhereUniqueInput!): Client
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTestSession(where: TestSessionWhereUniqueInput!): TestSession
  deleteTestSessionTestCaseResult(where: TestSessionTestCaseResultWhereUniqueInput!): TestSessionTestCaseResult
  deleteTestSessionTestCaseResultAttachment(where: TestSessionTestCaseResultAttachmentWhereUniqueInput!): TestSessionTestCaseResultAttachment
  deleteTestSessionJob(where: TestSessionJobWhereUniqueInput!): TestSessionJob
  deleteTestSessionJobLog(where: TestSessionJobLogWhereUniqueInput!): TestSessionJobLog
  deletePerformanceTestSession(where: PerformanceTestSessionWhereUniqueInput!): PerformanceTestSession
  deletePerformanceTestSessionAggregatedResult(where: PerformanceTestSessionAggregatedResultWhereUniqueInput!): PerformanceTestSessionAggregatedResult
  deleteUser(where: UserWhereUniqueInput!): User
  deleteApiKey(where: ApiKeyWhereUniqueInput!): ApiKey
  deleteSystemSettings(where: SystemSettingsWhereUniqueInput!): SystemSettings
  deleteTestSetRepository(where: TestSetRepositoryWhereUniqueInput!): TestSetRepository
  deleteDeviceDescriptor(where: DeviceDescriptorWhereUniqueInput!): DeviceDescriptor
  deleteAgent(where: AgentWhereUniqueInput!): Agent
  deleteTestSetFolder(where: TestSetFolderWhereUniqueInput!): TestSetFolder
  deleteTestProject(where: TestProjectWhereUniqueInput!): TestProject
  deleteTestSetScript(where: TestSetScriptWhereUniqueInput!): TestSetScript
  deletePerformanceTestSessionJob(where: PerformanceTestSessionJobWhereUniqueInput!): PerformanceTestSessionJob
  deleteTestSessionTestCaseResultTranscript(where: TestSessionTestCaseResultTranscriptWhereUniqueInput!): TestSessionTestCaseResultTranscript
  deleteChatbot(where: ChatbotWhereUniqueInput!): Chatbot
  deleteTestSet(where: TestSetWhereUniqueInput!): TestSet
  deleteDeviceSet(where: DeviceSetWhereUniqueInput!): DeviceSet
  deleteTestSetCompiledConvo(where: TestSetCompiledConvoWhereUniqueInput!): TestSetCompiledConvo
  deleteRegisteredComponent(where: RegisteredComponentWhereUniqueInput!): RegisteredComponent
  deleteSecurityAlert(where: SecurityAlertWhereUniqueInput!): SecurityAlert
  deleteCapability(where: CapabilityWhereUniqueInput!): Capability
  deleteTestSetExcel(where: TestSetExcelWhereUniqueInput!): TestSetExcel
  deleteDeviceProvider(where: DeviceProviderWhereUniqueInput!): DeviceProvider
  deleteUserRole(where: UserRoleWhereUniqueInput!): UserRole
  deleteClient(where: ClientWhereUniqueInput!): Client
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  upsertTestSession(where: TestSessionWhereUniqueInput!, create: TestSessionCreateInput!, update: TestSessionUpdateInput!): TestSession!
  upsertTestSessionTestCaseResult(where: TestSessionTestCaseResultWhereUniqueInput!, create: TestSessionTestCaseResultCreateInput!, update: TestSessionTestCaseResultUpdateInput!): TestSessionTestCaseResult!
  upsertTestSessionTestCaseResultAttachment(where: TestSessionTestCaseResultAttachmentWhereUniqueInput!, create: TestSessionTestCaseResultAttachmentCreateInput!, update: TestSessionTestCaseResultAttachmentUpdateInput!): TestSessionTestCaseResultAttachment!
  upsertTestSessionJob(where: TestSessionJobWhereUniqueInput!, create: TestSessionJobCreateInput!, update: TestSessionJobUpdateInput!): TestSessionJob!
  upsertTestSessionJobLog(where: TestSessionJobLogWhereUniqueInput!, create: TestSessionJobLogCreateInput!, update: TestSessionJobLogUpdateInput!): TestSessionJobLog!
  upsertPerformanceTestSession(where: PerformanceTestSessionWhereUniqueInput!, create: PerformanceTestSessionCreateInput!, update: PerformanceTestSessionUpdateInput!): PerformanceTestSession!
  upsertPerformanceTestSessionAggregatedResult(where: PerformanceTestSessionAggregatedResultWhereUniqueInput!, create: PerformanceTestSessionAggregatedResultCreateInput!, update: PerformanceTestSessionAggregatedResultUpdateInput!): PerformanceTestSessionAggregatedResult!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertApiKey(where: ApiKeyWhereUniqueInput!, create: ApiKeyCreateInput!, update: ApiKeyUpdateInput!): ApiKey!
  upsertSystemSettings(where: SystemSettingsWhereUniqueInput!, create: SystemSettingsCreateInput!, update: SystemSettingsUpdateInput!): SystemSettings!
  upsertTestSetRepository(where: TestSetRepositoryWhereUniqueInput!, create: TestSetRepositoryCreateInput!, update: TestSetRepositoryUpdateInput!): TestSetRepository!
  upsertDeviceDescriptor(where: DeviceDescriptorWhereUniqueInput!, create: DeviceDescriptorCreateInput!, update: DeviceDescriptorUpdateInput!): DeviceDescriptor!
  upsertAgent(where: AgentWhereUniqueInput!, create: AgentCreateInput!, update: AgentUpdateInput!): Agent!
  upsertTestSetFolder(where: TestSetFolderWhereUniqueInput!, create: TestSetFolderCreateInput!, update: TestSetFolderUpdateInput!): TestSetFolder!
  upsertTestProject(where: TestProjectWhereUniqueInput!, create: TestProjectCreateInput!, update: TestProjectUpdateInput!): TestProject!
  upsertTestSetScript(where: TestSetScriptWhereUniqueInput!, create: TestSetScriptCreateInput!, update: TestSetScriptUpdateInput!): TestSetScript!
  upsertPerformanceTestSessionJob(where: PerformanceTestSessionJobWhereUniqueInput!, create: PerformanceTestSessionJobCreateInput!, update: PerformanceTestSessionJobUpdateInput!): PerformanceTestSessionJob!
  upsertTestSessionTestCaseResultTranscript(where: TestSessionTestCaseResultTranscriptWhereUniqueInput!, create: TestSessionTestCaseResultTranscriptCreateInput!, update: TestSessionTestCaseResultTranscriptUpdateInput!): TestSessionTestCaseResultTranscript!
  upsertChatbot(where: ChatbotWhereUniqueInput!, create: ChatbotCreateInput!, update: ChatbotUpdateInput!): Chatbot!
  upsertTestSet(where: TestSetWhereUniqueInput!, create: TestSetCreateInput!, update: TestSetUpdateInput!): TestSet!
  upsertDeviceSet(where: DeviceSetWhereUniqueInput!, create: DeviceSetCreateInput!, update: DeviceSetUpdateInput!): DeviceSet!
  upsertTestSetCompiledConvo(where: TestSetCompiledConvoWhereUniqueInput!, create: TestSetCompiledConvoCreateInput!, update: TestSetCompiledConvoUpdateInput!): TestSetCompiledConvo!
  upsertRegisteredComponent(where: RegisteredComponentWhereUniqueInput!, create: RegisteredComponentCreateInput!, update: RegisteredComponentUpdateInput!): RegisteredComponent!
  upsertSecurityAlert(where: SecurityAlertWhereUniqueInput!, create: SecurityAlertCreateInput!, update: SecurityAlertUpdateInput!): SecurityAlert!
  upsertCapability(where: CapabilityWhereUniqueInput!, create: CapabilityCreateInput!, update: CapabilityUpdateInput!): Capability!
  upsertTestSetExcel(where: TestSetExcelWhereUniqueInput!, create: TestSetExcelCreateInput!, update: TestSetExcelUpdateInput!): TestSetExcel!
  upsertDeviceProvider(where: DeviceProviderWhereUniqueInput!, create: DeviceProviderCreateInput!, update: DeviceProviderUpdateInput!): DeviceProvider!
  upsertUserRole(where: UserRoleWhereUniqueInput!, create: UserRoleCreateInput!, update: UserRoleUpdateInput!): UserRole!
  upsertClient(where: ClientWhereUniqueInput!, create: ClientCreateInput!, update: ClientUpdateInput!): Client!
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  updateManyTestSessions(data: TestSessionUpdateManyMutationInput!, where: TestSessionWhereInput): BatchPayload!
  updateManyTestSessionTestCaseResults(data: TestSessionTestCaseResultUpdateManyMutationInput!, where: TestSessionTestCaseResultWhereInput): BatchPayload!
  updateManyTestSessionTestCaseResultAttachments(data: TestSessionTestCaseResultAttachmentUpdateManyMutationInput!, where: TestSessionTestCaseResultAttachmentWhereInput): BatchPayload!
  updateManyTestSessionJobs(data: TestSessionJobUpdateManyMutationInput!, where: TestSessionJobWhereInput): BatchPayload!
  updateManyTestSessionJobLogs(data: TestSessionJobLogUpdateManyMutationInput!, where: TestSessionJobLogWhereInput): BatchPayload!
  updateManyPerformanceTestSessions(data: PerformanceTestSessionUpdateManyMutationInput!, where: PerformanceTestSessionWhereInput): BatchPayload!
  updateManyPerformanceTestSessionAggregatedResults(data: PerformanceTestSessionAggregatedResultUpdateManyMutationInput!, where: PerformanceTestSessionAggregatedResultWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyApiKeys(data: ApiKeyUpdateManyMutationInput!, where: ApiKeyWhereInput): BatchPayload!
  updateManySystemSettingses(data: SystemSettingsUpdateManyMutationInput!, where: SystemSettingsWhereInput): BatchPayload!
  updateManyTestSetRepositories(data: TestSetRepositoryUpdateManyMutationInput!, where: TestSetRepositoryWhereInput): BatchPayload!
  updateManyDeviceDescriptors(data: DeviceDescriptorUpdateManyMutationInput!, where: DeviceDescriptorWhereInput): BatchPayload!
  updateManyAgents(data: AgentUpdateManyMutationInput!, where: AgentWhereInput): BatchPayload!
  updateManyTestSetFolders(data: TestSetFolderUpdateManyMutationInput!, where: TestSetFolderWhereInput): BatchPayload!
  updateManyTestProjects(data: TestProjectUpdateManyMutationInput!, where: TestProjectWhereInput): BatchPayload!
  updateManyTestSetScripts(data: TestSetScriptUpdateManyMutationInput!, where: TestSetScriptWhereInput): BatchPayload!
  updateManyPerformanceTestSessionJobs(data: PerformanceTestSessionJobUpdateManyMutationInput!, where: PerformanceTestSessionJobWhereInput): BatchPayload!
  updateManyTestSessionTestCaseResultTranscripts(data: TestSessionTestCaseResultTranscriptUpdateManyMutationInput!, where: TestSessionTestCaseResultTranscriptWhereInput): BatchPayload!
  updateManyChatbots(data: ChatbotUpdateManyMutationInput!, where: ChatbotWhereInput): BatchPayload!
  updateManyTestSets(data: TestSetUpdateManyMutationInput!, where: TestSetWhereInput): BatchPayload!
  updateManyDeviceSets(data: DeviceSetUpdateManyMutationInput!, where: DeviceSetWhereInput): BatchPayload!
  updateManyTestSetCompiledConvoes(data: TestSetCompiledConvoUpdateManyMutationInput!, where: TestSetCompiledConvoWhereInput): BatchPayload!
  updateManyRegisteredComponents(data: RegisteredComponentUpdateManyMutationInput!, where: RegisteredComponentWhereInput): BatchPayload!
  updateManySecurityAlerts(data: SecurityAlertUpdateManyMutationInput!, where: SecurityAlertWhereInput): BatchPayload!
  updateManyCapabilities(data: CapabilityUpdateManyMutationInput!, where: CapabilityWhereInput): BatchPayload!
  updateManyTestSetExcels(data: TestSetExcelUpdateManyMutationInput!, where: TestSetExcelWhereInput): BatchPayload!
  updateManyDeviceProviders(data: DeviceProviderUpdateManyMutationInput!, where: DeviceProviderWhereInput): BatchPayload!
  updateManyUserRoles(data: UserRoleUpdateManyMutationInput!, where: UserRoleWhereInput): BatchPayload!
  updateManyClients(data: ClientUpdateManyMutationInput!, where: ClientWhereInput): BatchPayload!
  deleteManyTags(where: TagWhereInput): BatchPayload!
  deleteManyTestSessions(where: TestSessionWhereInput): BatchPayload!
  deleteManyTestSessionTestCaseResults(where: TestSessionTestCaseResultWhereInput): BatchPayload!
  deleteManyTestSessionTestCaseResultAttachments(where: TestSessionTestCaseResultAttachmentWhereInput): BatchPayload!
  deleteManyTestSessionJobs(where: TestSessionJobWhereInput): BatchPayload!
  deleteManyTestSessionJobLogs(where: TestSessionJobLogWhereInput): BatchPayload!
  deleteManyPerformanceTestSessions(where: PerformanceTestSessionWhereInput): BatchPayload!
  deleteManyPerformanceTestSessionAggregatedResults(where: PerformanceTestSessionAggregatedResultWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyApiKeys(where: ApiKeyWhereInput): BatchPayload!
  deleteManySystemSettingses(where: SystemSettingsWhereInput): BatchPayload!
  deleteManyTestSetRepositories(where: TestSetRepositoryWhereInput): BatchPayload!
  deleteManyDeviceDescriptors(where: DeviceDescriptorWhereInput): BatchPayload!
  deleteManyAgents(where: AgentWhereInput): BatchPayload!
  deleteManyTestSetFolders(where: TestSetFolderWhereInput): BatchPayload!
  deleteManyTestProjects(where: TestProjectWhereInput): BatchPayload!
  deleteManyTestSetScripts(where: TestSetScriptWhereInput): BatchPayload!
  deleteManyPerformanceTestSessionJobs(where: PerformanceTestSessionJobWhereInput): BatchPayload!
  deleteManyTestSessionTestCaseResultTranscripts(where: TestSessionTestCaseResultTranscriptWhereInput): BatchPayload!
  deleteManyChatbots(where: ChatbotWhereInput): BatchPayload!
  deleteManyTestSets(where: TestSetWhereInput): BatchPayload!
  deleteManyDeviceSets(where: DeviceSetWhereInput): BatchPayload!
  deleteManyTestSetCompiledConvoes(where: TestSetCompiledConvoWhereInput): BatchPayload!
  deleteManyRegisteredComponents(where: RegisteredComponentWhereInput): BatchPayload!
  deleteManySecurityAlerts(where: SecurityAlertWhereInput): BatchPayload!
  deleteManyCapabilities(where: CapabilityWhereInput): BatchPayload!
  deleteManyTestSetExcels(where: TestSetExcelWhereInput): BatchPayload!
  deleteManyDeviceProviders(where: DeviceProviderWhereInput): BatchPayload!
  deleteManyUserRoles(where: UserRoleWhereInput): BatchPayload!
  deleteManyClients(where: ClientWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PerformanceTestSession implements Node {
  id: ID!
  client: Client
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  tags: [String!]!
  chatbot: Chatbot!
  testSets(where: TestSetWhereInput, orderBy: TestSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSet!]
  registeredComponents(where: RegisteredComponentWhereInput, orderBy: RegisteredComponentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RegisteredComponent!]
  testProject: TestProject
  results(where: PerformanceTestSessionAggregatedResultWhereInput, orderBy: PerformanceTestSessionAggregatedResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PerformanceTestSessionAggregatedResult!]
  jobs(where: PerformanceTestSessionJobWhereInput, orderBy: PerformanceTestSessionJobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PerformanceTestSessionJob!]
  capabilities(where: CapabilityWhereInput, orderBy: CapabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Capability!]
  sources(where: CapabilityWhereInput, orderBy: CapabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Capability!]
  envs(where: CapabilityWhereInput, orderBy: CapabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Capability!]
  parallelConvoCount: Int!
  parallelJobCount: Int!
  dataDensity: Int
  tickRepeatInitial: Int
  tickRepeatPerTick: Int
  tickMaxTime: Int!
  tickTime: Int!
}

type PerformanceTestSessionAggregatedResult implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  testSession: PerformanceTestSession!
  job: PerformanceTestSessionJob!
  stepIndex: Int!
  convo: String!
  execCount: Int!
  execDurationMin: Int
  execDurationMax: Int
  execDurationSum: Int
  waitCount: Int!
  waitDurationMin: Int
  waitDurationMax: Int
  waitDurationSum: Int
  stepStartAt: DateTime!
}

"""A connection to a list of items."""
type PerformanceTestSessionAggregatedResultConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PerformanceTestSessionAggregatedResultEdge]!
  aggregate: AggregatePerformanceTestSessionAggregatedResult!
}

input PerformanceTestSessionAggregatedResultCreateInput {
  stepIndex: Int!
  convo: String!
  execCount: Int!
  execDurationMin: Int
  execDurationMax: Int
  execDurationSum: Int
  waitCount: Int!
  waitDurationMin: Int
  waitDurationMax: Int
  waitDurationSum: Int
  stepStartAt: DateTime!
  testSession: PerformanceTestSessionCreateOneWithoutResultsInput!
  job: PerformanceTestSessionJobCreateOneInput!
}

input PerformanceTestSessionAggregatedResultCreateManyWithoutTestSessionInput {
  create: [PerformanceTestSessionAggregatedResultCreateWithoutTestSessionInput!]
  connect: [PerformanceTestSessionAggregatedResultWhereUniqueInput!]
}

input PerformanceTestSessionAggregatedResultCreateWithoutTestSessionInput {
  stepIndex: Int!
  convo: String!
  execCount: Int!
  execDurationMin: Int
  execDurationMax: Int
  execDurationSum: Int
  waitCount: Int!
  waitDurationMin: Int
  waitDurationMax: Int
  waitDurationSum: Int
  stepStartAt: DateTime!
  job: PerformanceTestSessionJobCreateOneInput!
}

"""An edge in a connection."""
type PerformanceTestSessionAggregatedResultEdge {
  """The item at the end of the edge."""
  node: PerformanceTestSessionAggregatedResult!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PerformanceTestSessionAggregatedResultOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  stepIndex_ASC
  stepIndex_DESC
  convo_ASC
  convo_DESC
  execCount_ASC
  execCount_DESC
  execDurationMin_ASC
  execDurationMin_DESC
  execDurationMax_ASC
  execDurationMax_DESC
  execDurationSum_ASC
  execDurationSum_DESC
  waitCount_ASC
  waitCount_DESC
  waitDurationMin_ASC
  waitDurationMin_DESC
  waitDurationMax_ASC
  waitDurationMax_DESC
  waitDurationSum_ASC
  waitDurationSum_DESC
  stepStartAt_ASC
  stepStartAt_DESC
}

type PerformanceTestSessionAggregatedResultPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  stepIndex: Int!
  convo: String!
  execCount: Int!
  execDurationMin: Int
  execDurationMax: Int
  execDurationSum: Int
  waitCount: Int!
  waitDurationMin: Int
  waitDurationMax: Int
  waitDurationSum: Int
  stepStartAt: DateTime!
}

input PerformanceTestSessionAggregatedResultScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PerformanceTestSessionAggregatedResultScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PerformanceTestSessionAggregatedResultScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PerformanceTestSessionAggregatedResultScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  stepIndex: Int

  """All values that are not equal to given value."""
  stepIndex_not: Int

  """All values that are contained in given list."""
  stepIndex_in: [Int!]

  """All values that are not contained in given list."""
  stepIndex_not_in: [Int!]

  """All values less than the given value."""
  stepIndex_lt: Int

  """All values less than or equal the given value."""
  stepIndex_lte: Int

  """All values greater than the given value."""
  stepIndex_gt: Int

  """All values greater than or equal the given value."""
  stepIndex_gte: Int
  convo: String

  """All values that are not equal to given value."""
  convo_not: String

  """All values that are contained in given list."""
  convo_in: [String!]

  """All values that are not contained in given list."""
  convo_not_in: [String!]

  """All values less than the given value."""
  convo_lt: String

  """All values less than or equal the given value."""
  convo_lte: String

  """All values greater than the given value."""
  convo_gt: String

  """All values greater than or equal the given value."""
  convo_gte: String

  """All values containing the given string."""
  convo_contains: String

  """All values not containing the given string."""
  convo_not_contains: String

  """All values starting with the given string."""
  convo_starts_with: String

  """All values not starting with the given string."""
  convo_not_starts_with: String

  """All values ending with the given string."""
  convo_ends_with: String

  """All values not ending with the given string."""
  convo_not_ends_with: String
  execCount: Int

  """All values that are not equal to given value."""
  execCount_not: Int

  """All values that are contained in given list."""
  execCount_in: [Int!]

  """All values that are not contained in given list."""
  execCount_not_in: [Int!]

  """All values less than the given value."""
  execCount_lt: Int

  """All values less than or equal the given value."""
  execCount_lte: Int

  """All values greater than the given value."""
  execCount_gt: Int

  """All values greater than or equal the given value."""
  execCount_gte: Int
  execDurationMin: Int

  """All values that are not equal to given value."""
  execDurationMin_not: Int

  """All values that are contained in given list."""
  execDurationMin_in: [Int!]

  """All values that are not contained in given list."""
  execDurationMin_not_in: [Int!]

  """All values less than the given value."""
  execDurationMin_lt: Int

  """All values less than or equal the given value."""
  execDurationMin_lte: Int

  """All values greater than the given value."""
  execDurationMin_gt: Int

  """All values greater than or equal the given value."""
  execDurationMin_gte: Int
  execDurationMax: Int

  """All values that are not equal to given value."""
  execDurationMax_not: Int

  """All values that are contained in given list."""
  execDurationMax_in: [Int!]

  """All values that are not contained in given list."""
  execDurationMax_not_in: [Int!]

  """All values less than the given value."""
  execDurationMax_lt: Int

  """All values less than or equal the given value."""
  execDurationMax_lte: Int

  """All values greater than the given value."""
  execDurationMax_gt: Int

  """All values greater than or equal the given value."""
  execDurationMax_gte: Int
  execDurationSum: Int

  """All values that are not equal to given value."""
  execDurationSum_not: Int

  """All values that are contained in given list."""
  execDurationSum_in: [Int!]

  """All values that are not contained in given list."""
  execDurationSum_not_in: [Int!]

  """All values less than the given value."""
  execDurationSum_lt: Int

  """All values less than or equal the given value."""
  execDurationSum_lte: Int

  """All values greater than the given value."""
  execDurationSum_gt: Int

  """All values greater than or equal the given value."""
  execDurationSum_gte: Int
  waitCount: Int

  """All values that are not equal to given value."""
  waitCount_not: Int

  """All values that are contained in given list."""
  waitCount_in: [Int!]

  """All values that are not contained in given list."""
  waitCount_not_in: [Int!]

  """All values less than the given value."""
  waitCount_lt: Int

  """All values less than or equal the given value."""
  waitCount_lte: Int

  """All values greater than the given value."""
  waitCount_gt: Int

  """All values greater than or equal the given value."""
  waitCount_gte: Int
  waitDurationMin: Int

  """All values that are not equal to given value."""
  waitDurationMin_not: Int

  """All values that are contained in given list."""
  waitDurationMin_in: [Int!]

  """All values that are not contained in given list."""
  waitDurationMin_not_in: [Int!]

  """All values less than the given value."""
  waitDurationMin_lt: Int

  """All values less than or equal the given value."""
  waitDurationMin_lte: Int

  """All values greater than the given value."""
  waitDurationMin_gt: Int

  """All values greater than or equal the given value."""
  waitDurationMin_gte: Int
  waitDurationMax: Int

  """All values that are not equal to given value."""
  waitDurationMax_not: Int

  """All values that are contained in given list."""
  waitDurationMax_in: [Int!]

  """All values that are not contained in given list."""
  waitDurationMax_not_in: [Int!]

  """All values less than the given value."""
  waitDurationMax_lt: Int

  """All values less than or equal the given value."""
  waitDurationMax_lte: Int

  """All values greater than the given value."""
  waitDurationMax_gt: Int

  """All values greater than or equal the given value."""
  waitDurationMax_gte: Int
  waitDurationSum: Int

  """All values that are not equal to given value."""
  waitDurationSum_not: Int

  """All values that are contained in given list."""
  waitDurationSum_in: [Int!]

  """All values that are not contained in given list."""
  waitDurationSum_not_in: [Int!]

  """All values less than the given value."""
  waitDurationSum_lt: Int

  """All values less than or equal the given value."""
  waitDurationSum_lte: Int

  """All values greater than the given value."""
  waitDurationSum_gt: Int

  """All values greater than or equal the given value."""
  waitDurationSum_gte: Int
  stepStartAt: DateTime

  """All values that are not equal to given value."""
  stepStartAt_not: DateTime

  """All values that are contained in given list."""
  stepStartAt_in: [DateTime!]

  """All values that are not contained in given list."""
  stepStartAt_not_in: [DateTime!]

  """All values less than the given value."""
  stepStartAt_lt: DateTime

  """All values less than or equal the given value."""
  stepStartAt_lte: DateTime

  """All values greater than the given value."""
  stepStartAt_gt: DateTime

  """All values greater than or equal the given value."""
  stepStartAt_gte: DateTime
}

type PerformanceTestSessionAggregatedResultSubscriptionPayload {
  mutation: MutationType!
  node: PerformanceTestSessionAggregatedResult
  updatedFields: [String!]
  previousValues: PerformanceTestSessionAggregatedResultPreviousValues
}

input PerformanceTestSessionAggregatedResultSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PerformanceTestSessionAggregatedResultSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PerformanceTestSessionAggregatedResultSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PerformanceTestSessionAggregatedResultSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PerformanceTestSessionAggregatedResultWhereInput
}

input PerformanceTestSessionAggregatedResultUpdateInput {
  stepIndex: Int
  convo: String
  execCount: Int
  execDurationMin: Int
  execDurationMax: Int
  execDurationSum: Int
  waitCount: Int
  waitDurationMin: Int
  waitDurationMax: Int
  waitDurationSum: Int
  stepStartAt: DateTime
  testSession: PerformanceTestSessionUpdateOneRequiredWithoutResultsInput
  job: PerformanceTestSessionJobUpdateOneRequiredInput
}

input PerformanceTestSessionAggregatedResultUpdateManyDataInput {
  stepIndex: Int
  convo: String
  execCount: Int
  execDurationMin: Int
  execDurationMax: Int
  execDurationSum: Int
  waitCount: Int
  waitDurationMin: Int
  waitDurationMax: Int
  waitDurationSum: Int
  stepStartAt: DateTime
}

input PerformanceTestSessionAggregatedResultUpdateManyMutationInput {
  stepIndex: Int
  convo: String
  execCount: Int
  execDurationMin: Int
  execDurationMax: Int
  execDurationSum: Int
  waitCount: Int
  waitDurationMin: Int
  waitDurationMax: Int
  waitDurationSum: Int
  stepStartAt: DateTime
}

input PerformanceTestSessionAggregatedResultUpdateManyWithoutTestSessionInput {
  create: [PerformanceTestSessionAggregatedResultCreateWithoutTestSessionInput!]
  connect: [PerformanceTestSessionAggregatedResultWhereUniqueInput!]
  set: [PerformanceTestSessionAggregatedResultWhereUniqueInput!]
  disconnect: [PerformanceTestSessionAggregatedResultWhereUniqueInput!]
  delete: [PerformanceTestSessionAggregatedResultWhereUniqueInput!]
  update: [PerformanceTestSessionAggregatedResultUpdateWithWhereUniqueWithoutTestSessionInput!]
  updateMany: [PerformanceTestSessionAggregatedResultUpdateManyWithWhereNestedInput!]
  deleteMany: [PerformanceTestSessionAggregatedResultScalarWhereInput!]
  upsert: [PerformanceTestSessionAggregatedResultUpsertWithWhereUniqueWithoutTestSessionInput!]
}

input PerformanceTestSessionAggregatedResultUpdateManyWithWhereNestedInput {
  where: PerformanceTestSessionAggregatedResultScalarWhereInput!
  data: PerformanceTestSessionAggregatedResultUpdateManyDataInput!
}

input PerformanceTestSessionAggregatedResultUpdateWithoutTestSessionDataInput {
  stepIndex: Int
  convo: String
  execCount: Int
  execDurationMin: Int
  execDurationMax: Int
  execDurationSum: Int
  waitCount: Int
  waitDurationMin: Int
  waitDurationMax: Int
  waitDurationSum: Int
  stepStartAt: DateTime
  job: PerformanceTestSessionJobUpdateOneRequiredInput
}

input PerformanceTestSessionAggregatedResultUpdateWithWhereUniqueWithoutTestSessionInput {
  where: PerformanceTestSessionAggregatedResultWhereUniqueInput!
  data: PerformanceTestSessionAggregatedResultUpdateWithoutTestSessionDataInput!
}

input PerformanceTestSessionAggregatedResultUpsertWithWhereUniqueWithoutTestSessionInput {
  where: PerformanceTestSessionAggregatedResultWhereUniqueInput!
  update: PerformanceTestSessionAggregatedResultUpdateWithoutTestSessionDataInput!
  create: PerformanceTestSessionAggregatedResultCreateWithoutTestSessionInput!
}

input PerformanceTestSessionAggregatedResultWhereInput {
  """Logical AND on all given filters."""
  AND: [PerformanceTestSessionAggregatedResultWhereInput!]

  """Logical OR on all given filters."""
  OR: [PerformanceTestSessionAggregatedResultWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PerformanceTestSessionAggregatedResultWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  stepIndex: Int

  """All values that are not equal to given value."""
  stepIndex_not: Int

  """All values that are contained in given list."""
  stepIndex_in: [Int!]

  """All values that are not contained in given list."""
  stepIndex_not_in: [Int!]

  """All values less than the given value."""
  stepIndex_lt: Int

  """All values less than or equal the given value."""
  stepIndex_lte: Int

  """All values greater than the given value."""
  stepIndex_gt: Int

  """All values greater than or equal the given value."""
  stepIndex_gte: Int
  convo: String

  """All values that are not equal to given value."""
  convo_not: String

  """All values that are contained in given list."""
  convo_in: [String!]

  """All values that are not contained in given list."""
  convo_not_in: [String!]

  """All values less than the given value."""
  convo_lt: String

  """All values less than or equal the given value."""
  convo_lte: String

  """All values greater than the given value."""
  convo_gt: String

  """All values greater than or equal the given value."""
  convo_gte: String

  """All values containing the given string."""
  convo_contains: String

  """All values not containing the given string."""
  convo_not_contains: String

  """All values starting with the given string."""
  convo_starts_with: String

  """All values not starting with the given string."""
  convo_not_starts_with: String

  """All values ending with the given string."""
  convo_ends_with: String

  """All values not ending with the given string."""
  convo_not_ends_with: String
  execCount: Int

  """All values that are not equal to given value."""
  execCount_not: Int

  """All values that are contained in given list."""
  execCount_in: [Int!]

  """All values that are not contained in given list."""
  execCount_not_in: [Int!]

  """All values less than the given value."""
  execCount_lt: Int

  """All values less than or equal the given value."""
  execCount_lte: Int

  """All values greater than the given value."""
  execCount_gt: Int

  """All values greater than or equal the given value."""
  execCount_gte: Int
  execDurationMin: Int

  """All values that are not equal to given value."""
  execDurationMin_not: Int

  """All values that are contained in given list."""
  execDurationMin_in: [Int!]

  """All values that are not contained in given list."""
  execDurationMin_not_in: [Int!]

  """All values less than the given value."""
  execDurationMin_lt: Int

  """All values less than or equal the given value."""
  execDurationMin_lte: Int

  """All values greater than the given value."""
  execDurationMin_gt: Int

  """All values greater than or equal the given value."""
  execDurationMin_gte: Int
  execDurationMax: Int

  """All values that are not equal to given value."""
  execDurationMax_not: Int

  """All values that are contained in given list."""
  execDurationMax_in: [Int!]

  """All values that are not contained in given list."""
  execDurationMax_not_in: [Int!]

  """All values less than the given value."""
  execDurationMax_lt: Int

  """All values less than or equal the given value."""
  execDurationMax_lte: Int

  """All values greater than the given value."""
  execDurationMax_gt: Int

  """All values greater than or equal the given value."""
  execDurationMax_gte: Int
  execDurationSum: Int

  """All values that are not equal to given value."""
  execDurationSum_not: Int

  """All values that are contained in given list."""
  execDurationSum_in: [Int!]

  """All values that are not contained in given list."""
  execDurationSum_not_in: [Int!]

  """All values less than the given value."""
  execDurationSum_lt: Int

  """All values less than or equal the given value."""
  execDurationSum_lte: Int

  """All values greater than the given value."""
  execDurationSum_gt: Int

  """All values greater than or equal the given value."""
  execDurationSum_gte: Int
  waitCount: Int

  """All values that are not equal to given value."""
  waitCount_not: Int

  """All values that are contained in given list."""
  waitCount_in: [Int!]

  """All values that are not contained in given list."""
  waitCount_not_in: [Int!]

  """All values less than the given value."""
  waitCount_lt: Int

  """All values less than or equal the given value."""
  waitCount_lte: Int

  """All values greater than the given value."""
  waitCount_gt: Int

  """All values greater than or equal the given value."""
  waitCount_gte: Int
  waitDurationMin: Int

  """All values that are not equal to given value."""
  waitDurationMin_not: Int

  """All values that are contained in given list."""
  waitDurationMin_in: [Int!]

  """All values that are not contained in given list."""
  waitDurationMin_not_in: [Int!]

  """All values less than the given value."""
  waitDurationMin_lt: Int

  """All values less than or equal the given value."""
  waitDurationMin_lte: Int

  """All values greater than the given value."""
  waitDurationMin_gt: Int

  """All values greater than or equal the given value."""
  waitDurationMin_gte: Int
  waitDurationMax: Int

  """All values that are not equal to given value."""
  waitDurationMax_not: Int

  """All values that are contained in given list."""
  waitDurationMax_in: [Int!]

  """All values that are not contained in given list."""
  waitDurationMax_not_in: [Int!]

  """All values less than the given value."""
  waitDurationMax_lt: Int

  """All values less than or equal the given value."""
  waitDurationMax_lte: Int

  """All values greater than the given value."""
  waitDurationMax_gt: Int

  """All values greater than or equal the given value."""
  waitDurationMax_gte: Int
  waitDurationSum: Int

  """All values that are not equal to given value."""
  waitDurationSum_not: Int

  """All values that are contained in given list."""
  waitDurationSum_in: [Int!]

  """All values that are not contained in given list."""
  waitDurationSum_not_in: [Int!]

  """All values less than the given value."""
  waitDurationSum_lt: Int

  """All values less than or equal the given value."""
  waitDurationSum_lte: Int

  """All values greater than the given value."""
  waitDurationSum_gt: Int

  """All values greater than or equal the given value."""
  waitDurationSum_gte: Int
  stepStartAt: DateTime

  """All values that are not equal to given value."""
  stepStartAt_not: DateTime

  """All values that are contained in given list."""
  stepStartAt_in: [DateTime!]

  """All values that are not contained in given list."""
  stepStartAt_not_in: [DateTime!]

  """All values less than the given value."""
  stepStartAt_lt: DateTime

  """All values less than or equal the given value."""
  stepStartAt_lte: DateTime

  """All values greater than the given value."""
  stepStartAt_gt: DateTime

  """All values greater than or equal the given value."""
  stepStartAt_gte: DateTime
  testSession: PerformanceTestSessionWhereInput
  job: PerformanceTestSessionJobWhereInput
}

input PerformanceTestSessionAggregatedResultWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type PerformanceTestSessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PerformanceTestSessionEdge]!
  aggregate: AggregatePerformanceTestSession!
}

input PerformanceTestSessionCreateInput {
  name: String!
  description: String
  parallelConvoCount: Int!
  parallelJobCount: Int!
  dataDensity: Int
  tickRepeatInitial: Int
  tickRepeatPerTick: Int
  tickMaxTime: Int!
  tickTime: Int!
  tags: PerformanceTestSessionCreatetagsInput
  client: ClientCreateOneInput
  chatbot: ChatbotCreateOneInput!
  testSets: TestSetCreateManyInput
  registeredComponents: RegisteredComponentCreateManyInput
  testProject: TestProjectCreateOneInput
  results: PerformanceTestSessionAggregatedResultCreateManyWithoutTestSessionInput
  jobs: PerformanceTestSessionJobCreateManyWithoutTestSessionInput
  capabilities: CapabilityCreateManyInput
  sources: CapabilityCreateManyInput
  envs: CapabilityCreateManyInput
}

input PerformanceTestSessionCreateOneWithoutJobsInput {
  create: PerformanceTestSessionCreateWithoutJobsInput
  connect: PerformanceTestSessionWhereUniqueInput
}

input PerformanceTestSessionCreateOneWithoutResultsInput {
  create: PerformanceTestSessionCreateWithoutResultsInput
  connect: PerformanceTestSessionWhereUniqueInput
}

input PerformanceTestSessionCreatetagsInput {
  set: [String!]
}

input PerformanceTestSessionCreateWithoutJobsInput {
  name: String!
  description: String
  parallelConvoCount: Int!
  parallelJobCount: Int!
  dataDensity: Int
  tickRepeatInitial: Int
  tickRepeatPerTick: Int
  tickMaxTime: Int!
  tickTime: Int!
  tags: PerformanceTestSessionCreatetagsInput
  client: ClientCreateOneInput
  chatbot: ChatbotCreateOneInput!
  testSets: TestSetCreateManyInput
  registeredComponents: RegisteredComponentCreateManyInput
  testProject: TestProjectCreateOneInput
  results: PerformanceTestSessionAggregatedResultCreateManyWithoutTestSessionInput
  capabilities: CapabilityCreateManyInput
  sources: CapabilityCreateManyInput
  envs: CapabilityCreateManyInput
}

input PerformanceTestSessionCreateWithoutResultsInput {
  name: String!
  description: String
  parallelConvoCount: Int!
  parallelJobCount: Int!
  dataDensity: Int
  tickRepeatInitial: Int
  tickRepeatPerTick: Int
  tickMaxTime: Int!
  tickTime: Int!
  tags: PerformanceTestSessionCreatetagsInput
  client: ClientCreateOneInput
  chatbot: ChatbotCreateOneInput!
  testSets: TestSetCreateManyInput
  registeredComponents: RegisteredComponentCreateManyInput
  testProject: TestProjectCreateOneInput
  jobs: PerformanceTestSessionJobCreateManyWithoutTestSessionInput
  capabilities: CapabilityCreateManyInput
  sources: CapabilityCreateManyInput
  envs: CapabilityCreateManyInput
}

"""An edge in a connection."""
type PerformanceTestSessionEdge {
  """The item at the end of the edge."""
  node: PerformanceTestSession!

  """A cursor for use in pagination."""
  cursor: String!
}

type PerformanceTestSessionJob implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  testSession: PerformanceTestSession!
  jobId: Int
  status: TestSessionJobStatus!
  err: String
  started: DateTime
  finished: DateTime
  agentName: String
}

"""A connection to a list of items."""
type PerformanceTestSessionJobConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PerformanceTestSessionJobEdge]!
  aggregate: AggregatePerformanceTestSessionJob!
}

input PerformanceTestSessionJobCreateInput {
  jobId: Int
  status: TestSessionJobStatus!
  err: String
  started: DateTime
  finished: DateTime
  agentName: String
  testSession: PerformanceTestSessionCreateOneWithoutJobsInput!
}

input PerformanceTestSessionJobCreateManyWithoutTestSessionInput {
  create: [PerformanceTestSessionJobCreateWithoutTestSessionInput!]
  connect: [PerformanceTestSessionJobWhereUniqueInput!]
}

input PerformanceTestSessionJobCreateOneInput {
  create: PerformanceTestSessionJobCreateInput
  connect: PerformanceTestSessionJobWhereUniqueInput
}

input PerformanceTestSessionJobCreateWithoutTestSessionInput {
  jobId: Int
  status: TestSessionJobStatus!
  err: String
  started: DateTime
  finished: DateTime
  agentName: String
}

"""An edge in a connection."""
type PerformanceTestSessionJobEdge {
  """The item at the end of the edge."""
  node: PerformanceTestSessionJob!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PerformanceTestSessionJobOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  jobId_ASC
  jobId_DESC
  status_ASC
  status_DESC
  err_ASC
  err_DESC
  started_ASC
  started_DESC
  finished_ASC
  finished_DESC
  agentName_ASC
  agentName_DESC
}

type PerformanceTestSessionJobPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  jobId: Int
  status: TestSessionJobStatus!
  err: String
  started: DateTime
  finished: DateTime
  agentName: String
}

input PerformanceTestSessionJobScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PerformanceTestSessionJobScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PerformanceTestSessionJobScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PerformanceTestSessionJobScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  jobId: Int

  """All values that are not equal to given value."""
  jobId_not: Int

  """All values that are contained in given list."""
  jobId_in: [Int!]

  """All values that are not contained in given list."""
  jobId_not_in: [Int!]

  """All values less than the given value."""
  jobId_lt: Int

  """All values less than or equal the given value."""
  jobId_lte: Int

  """All values greater than the given value."""
  jobId_gt: Int

  """All values greater than or equal the given value."""
  jobId_gte: Int
  status: TestSessionJobStatus

  """All values that are not equal to given value."""
  status_not: TestSessionJobStatus

  """All values that are contained in given list."""
  status_in: [TestSessionJobStatus!]

  """All values that are not contained in given list."""
  status_not_in: [TestSessionJobStatus!]
  err: String

  """All values that are not equal to given value."""
  err_not: String

  """All values that are contained in given list."""
  err_in: [String!]

  """All values that are not contained in given list."""
  err_not_in: [String!]

  """All values less than the given value."""
  err_lt: String

  """All values less than or equal the given value."""
  err_lte: String

  """All values greater than the given value."""
  err_gt: String

  """All values greater than or equal the given value."""
  err_gte: String

  """All values containing the given string."""
  err_contains: String

  """All values not containing the given string."""
  err_not_contains: String

  """All values starting with the given string."""
  err_starts_with: String

  """All values not starting with the given string."""
  err_not_starts_with: String

  """All values ending with the given string."""
  err_ends_with: String

  """All values not ending with the given string."""
  err_not_ends_with: String
  started: DateTime

  """All values that are not equal to given value."""
  started_not: DateTime

  """All values that are contained in given list."""
  started_in: [DateTime!]

  """All values that are not contained in given list."""
  started_not_in: [DateTime!]

  """All values less than the given value."""
  started_lt: DateTime

  """All values less than or equal the given value."""
  started_lte: DateTime

  """All values greater than the given value."""
  started_gt: DateTime

  """All values greater than or equal the given value."""
  started_gte: DateTime
  finished: DateTime

  """All values that are not equal to given value."""
  finished_not: DateTime

  """All values that are contained in given list."""
  finished_in: [DateTime!]

  """All values that are not contained in given list."""
  finished_not_in: [DateTime!]

  """All values less than the given value."""
  finished_lt: DateTime

  """All values less than or equal the given value."""
  finished_lte: DateTime

  """All values greater than the given value."""
  finished_gt: DateTime

  """All values greater than or equal the given value."""
  finished_gte: DateTime
  agentName: String

  """All values that are not equal to given value."""
  agentName_not: String

  """All values that are contained in given list."""
  agentName_in: [String!]

  """All values that are not contained in given list."""
  agentName_not_in: [String!]

  """All values less than the given value."""
  agentName_lt: String

  """All values less than or equal the given value."""
  agentName_lte: String

  """All values greater than the given value."""
  agentName_gt: String

  """All values greater than or equal the given value."""
  agentName_gte: String

  """All values containing the given string."""
  agentName_contains: String

  """All values not containing the given string."""
  agentName_not_contains: String

  """All values starting with the given string."""
  agentName_starts_with: String

  """All values not starting with the given string."""
  agentName_not_starts_with: String

  """All values ending with the given string."""
  agentName_ends_with: String

  """All values not ending with the given string."""
  agentName_not_ends_with: String
}

type PerformanceTestSessionJobSubscriptionPayload {
  mutation: MutationType!
  node: PerformanceTestSessionJob
  updatedFields: [String!]
  previousValues: PerformanceTestSessionJobPreviousValues
}

input PerformanceTestSessionJobSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PerformanceTestSessionJobSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PerformanceTestSessionJobSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PerformanceTestSessionJobSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PerformanceTestSessionJobWhereInput
}

input PerformanceTestSessionJobUpdateDataInput {
  jobId: Int
  status: TestSessionJobStatus
  err: String
  started: DateTime
  finished: DateTime
  agentName: String
  testSession: PerformanceTestSessionUpdateOneRequiredWithoutJobsInput
}

input PerformanceTestSessionJobUpdateInput {
  jobId: Int
  status: TestSessionJobStatus
  err: String
  started: DateTime
  finished: DateTime
  agentName: String
  testSession: PerformanceTestSessionUpdateOneRequiredWithoutJobsInput
}

input PerformanceTestSessionJobUpdateManyDataInput {
  jobId: Int
  status: TestSessionJobStatus
  err: String
  started: DateTime
  finished: DateTime
  agentName: String
}

input PerformanceTestSessionJobUpdateManyMutationInput {
  jobId: Int
  status: TestSessionJobStatus
  err: String
  started: DateTime
  finished: DateTime
  agentName: String
}

input PerformanceTestSessionJobUpdateManyWithoutTestSessionInput {
  create: [PerformanceTestSessionJobCreateWithoutTestSessionInput!]
  connect: [PerformanceTestSessionJobWhereUniqueInput!]
  set: [PerformanceTestSessionJobWhereUniqueInput!]
  disconnect: [PerformanceTestSessionJobWhereUniqueInput!]
  delete: [PerformanceTestSessionJobWhereUniqueInput!]
  update: [PerformanceTestSessionJobUpdateWithWhereUniqueWithoutTestSessionInput!]
  updateMany: [PerformanceTestSessionJobUpdateManyWithWhereNestedInput!]
  deleteMany: [PerformanceTestSessionJobScalarWhereInput!]
  upsert: [PerformanceTestSessionJobUpsertWithWhereUniqueWithoutTestSessionInput!]
}

input PerformanceTestSessionJobUpdateManyWithWhereNestedInput {
  where: PerformanceTestSessionJobScalarWhereInput!
  data: PerformanceTestSessionJobUpdateManyDataInput!
}

input PerformanceTestSessionJobUpdateOneRequiredInput {
  create: PerformanceTestSessionJobCreateInput
  connect: PerformanceTestSessionJobWhereUniqueInput
  update: PerformanceTestSessionJobUpdateDataInput
  upsert: PerformanceTestSessionJobUpsertNestedInput
}

input PerformanceTestSessionJobUpdateWithoutTestSessionDataInput {
  jobId: Int
  status: TestSessionJobStatus
  err: String
  started: DateTime
  finished: DateTime
  agentName: String
}

input PerformanceTestSessionJobUpdateWithWhereUniqueWithoutTestSessionInput {
  where: PerformanceTestSessionJobWhereUniqueInput!
  data: PerformanceTestSessionJobUpdateWithoutTestSessionDataInput!
}

input PerformanceTestSessionJobUpsertNestedInput {
  update: PerformanceTestSessionJobUpdateDataInput!
  create: PerformanceTestSessionJobCreateInput!
}

input PerformanceTestSessionJobUpsertWithWhereUniqueWithoutTestSessionInput {
  where: PerformanceTestSessionJobWhereUniqueInput!
  update: PerformanceTestSessionJobUpdateWithoutTestSessionDataInput!
  create: PerformanceTestSessionJobCreateWithoutTestSessionInput!
}

input PerformanceTestSessionJobWhereInput {
  """Logical AND on all given filters."""
  AND: [PerformanceTestSessionJobWhereInput!]

  """Logical OR on all given filters."""
  OR: [PerformanceTestSessionJobWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PerformanceTestSessionJobWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  jobId: Int

  """All values that are not equal to given value."""
  jobId_not: Int

  """All values that are contained in given list."""
  jobId_in: [Int!]

  """All values that are not contained in given list."""
  jobId_not_in: [Int!]

  """All values less than the given value."""
  jobId_lt: Int

  """All values less than or equal the given value."""
  jobId_lte: Int

  """All values greater than the given value."""
  jobId_gt: Int

  """All values greater than or equal the given value."""
  jobId_gte: Int
  status: TestSessionJobStatus

  """All values that are not equal to given value."""
  status_not: TestSessionJobStatus

  """All values that are contained in given list."""
  status_in: [TestSessionJobStatus!]

  """All values that are not contained in given list."""
  status_not_in: [TestSessionJobStatus!]
  err: String

  """All values that are not equal to given value."""
  err_not: String

  """All values that are contained in given list."""
  err_in: [String!]

  """All values that are not contained in given list."""
  err_not_in: [String!]

  """All values less than the given value."""
  err_lt: String

  """All values less than or equal the given value."""
  err_lte: String

  """All values greater than the given value."""
  err_gt: String

  """All values greater than or equal the given value."""
  err_gte: String

  """All values containing the given string."""
  err_contains: String

  """All values not containing the given string."""
  err_not_contains: String

  """All values starting with the given string."""
  err_starts_with: String

  """All values not starting with the given string."""
  err_not_starts_with: String

  """All values ending with the given string."""
  err_ends_with: String

  """All values not ending with the given string."""
  err_not_ends_with: String
  started: DateTime

  """All values that are not equal to given value."""
  started_not: DateTime

  """All values that are contained in given list."""
  started_in: [DateTime!]

  """All values that are not contained in given list."""
  started_not_in: [DateTime!]

  """All values less than the given value."""
  started_lt: DateTime

  """All values less than or equal the given value."""
  started_lte: DateTime

  """All values greater than the given value."""
  started_gt: DateTime

  """All values greater than or equal the given value."""
  started_gte: DateTime
  finished: DateTime

  """All values that are not equal to given value."""
  finished_not: DateTime

  """All values that are contained in given list."""
  finished_in: [DateTime!]

  """All values that are not contained in given list."""
  finished_not_in: [DateTime!]

  """All values less than the given value."""
  finished_lt: DateTime

  """All values less than or equal the given value."""
  finished_lte: DateTime

  """All values greater than the given value."""
  finished_gt: DateTime

  """All values greater than or equal the given value."""
  finished_gte: DateTime
  agentName: String

  """All values that are not equal to given value."""
  agentName_not: String

  """All values that are contained in given list."""
  agentName_in: [String!]

  """All values that are not contained in given list."""
  agentName_not_in: [String!]

  """All values less than the given value."""
  agentName_lt: String

  """All values less than or equal the given value."""
  agentName_lte: String

  """All values greater than the given value."""
  agentName_gt: String

  """All values greater than or equal the given value."""
  agentName_gte: String

  """All values containing the given string."""
  agentName_contains: String

  """All values not containing the given string."""
  agentName_not_contains: String

  """All values starting with the given string."""
  agentName_starts_with: String

  """All values not starting with the given string."""
  agentName_not_starts_with: String

  """All values ending with the given string."""
  agentName_ends_with: String

  """All values not ending with the given string."""
  agentName_not_ends_with: String
  testSession: PerformanceTestSessionWhereInput
}

input PerformanceTestSessionJobWhereUniqueInput {
  id: ID
}

enum PerformanceTestSessionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  parallelConvoCount_ASC
  parallelConvoCount_DESC
  parallelJobCount_ASC
  parallelJobCount_DESC
  dataDensity_ASC
  dataDensity_DESC
  tickRepeatInitial_ASC
  tickRepeatInitial_DESC
  tickRepeatPerTick_ASC
  tickRepeatPerTick_DESC
  tickMaxTime_ASC
  tickMaxTime_DESC
  tickTime_ASC
  tickTime_DESC
}

type PerformanceTestSessionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  tags: [String!]!
  parallelConvoCount: Int!
  parallelJobCount: Int!
  dataDensity: Int
  tickRepeatInitial: Int
  tickRepeatPerTick: Int
  tickMaxTime: Int!
  tickTime: Int!
}

type PerformanceTestSessionSubscriptionPayload {
  mutation: MutationType!
  node: PerformanceTestSession
  updatedFields: [String!]
  previousValues: PerformanceTestSessionPreviousValues
}

input PerformanceTestSessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PerformanceTestSessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PerformanceTestSessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PerformanceTestSessionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PerformanceTestSessionWhereInput
}

input PerformanceTestSessionUpdateInput {
  name: String
  description: String
  parallelConvoCount: Int
  parallelJobCount: Int
  dataDensity: Int
  tickRepeatInitial: Int
  tickRepeatPerTick: Int
  tickMaxTime: Int
  tickTime: Int
  tags: PerformanceTestSessionUpdatetagsInput
  client: ClientUpdateOneInput
  chatbot: ChatbotUpdateOneRequiredInput
  testSets: TestSetUpdateManyInput
  registeredComponents: RegisteredComponentUpdateManyInput
  testProject: TestProjectUpdateOneInput
  results: PerformanceTestSessionAggregatedResultUpdateManyWithoutTestSessionInput
  jobs: PerformanceTestSessionJobUpdateManyWithoutTestSessionInput
  capabilities: CapabilityUpdateManyInput
  sources: CapabilityUpdateManyInput
  envs: CapabilityUpdateManyInput
}

input PerformanceTestSessionUpdateManyMutationInput {
  name: String
  description: String
  parallelConvoCount: Int
  parallelJobCount: Int
  dataDensity: Int
  tickRepeatInitial: Int
  tickRepeatPerTick: Int
  tickMaxTime: Int
  tickTime: Int
  tags: PerformanceTestSessionUpdatetagsInput
}

input PerformanceTestSessionUpdateOneRequiredWithoutJobsInput {
  create: PerformanceTestSessionCreateWithoutJobsInput
  connect: PerformanceTestSessionWhereUniqueInput
  update: PerformanceTestSessionUpdateWithoutJobsDataInput
  upsert: PerformanceTestSessionUpsertWithoutJobsInput
}

input PerformanceTestSessionUpdateOneRequiredWithoutResultsInput {
  create: PerformanceTestSessionCreateWithoutResultsInput
  connect: PerformanceTestSessionWhereUniqueInput
  update: PerformanceTestSessionUpdateWithoutResultsDataInput
  upsert: PerformanceTestSessionUpsertWithoutResultsInput
}

input PerformanceTestSessionUpdatetagsInput {
  set: [String!]
}

input PerformanceTestSessionUpdateWithoutJobsDataInput {
  name: String
  description: String
  parallelConvoCount: Int
  parallelJobCount: Int
  dataDensity: Int
  tickRepeatInitial: Int
  tickRepeatPerTick: Int
  tickMaxTime: Int
  tickTime: Int
  tags: PerformanceTestSessionUpdatetagsInput
  client: ClientUpdateOneInput
  chatbot: ChatbotUpdateOneRequiredInput
  testSets: TestSetUpdateManyInput
  registeredComponents: RegisteredComponentUpdateManyInput
  testProject: TestProjectUpdateOneInput
  results: PerformanceTestSessionAggregatedResultUpdateManyWithoutTestSessionInput
  capabilities: CapabilityUpdateManyInput
  sources: CapabilityUpdateManyInput
  envs: CapabilityUpdateManyInput
}

input PerformanceTestSessionUpdateWithoutResultsDataInput {
  name: String
  description: String
  parallelConvoCount: Int
  parallelJobCount: Int
  dataDensity: Int
  tickRepeatInitial: Int
  tickRepeatPerTick: Int
  tickMaxTime: Int
  tickTime: Int
  tags: PerformanceTestSessionUpdatetagsInput
  client: ClientUpdateOneInput
  chatbot: ChatbotUpdateOneRequiredInput
  testSets: TestSetUpdateManyInput
  registeredComponents: RegisteredComponentUpdateManyInput
  testProject: TestProjectUpdateOneInput
  jobs: PerformanceTestSessionJobUpdateManyWithoutTestSessionInput
  capabilities: CapabilityUpdateManyInput
  sources: CapabilityUpdateManyInput
  envs: CapabilityUpdateManyInput
}

input PerformanceTestSessionUpsertWithoutJobsInput {
  update: PerformanceTestSessionUpdateWithoutJobsDataInput!
  create: PerformanceTestSessionCreateWithoutJobsInput!
}

input PerformanceTestSessionUpsertWithoutResultsInput {
  update: PerformanceTestSessionUpdateWithoutResultsDataInput!
  create: PerformanceTestSessionCreateWithoutResultsInput!
}

input PerformanceTestSessionWhereInput {
  """Logical AND on all given filters."""
  AND: [PerformanceTestSessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PerformanceTestSessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PerformanceTestSessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  parallelConvoCount: Int

  """All values that are not equal to given value."""
  parallelConvoCount_not: Int

  """All values that are contained in given list."""
  parallelConvoCount_in: [Int!]

  """All values that are not contained in given list."""
  parallelConvoCount_not_in: [Int!]

  """All values less than the given value."""
  parallelConvoCount_lt: Int

  """All values less than or equal the given value."""
  parallelConvoCount_lte: Int

  """All values greater than the given value."""
  parallelConvoCount_gt: Int

  """All values greater than or equal the given value."""
  parallelConvoCount_gte: Int
  parallelJobCount: Int

  """All values that are not equal to given value."""
  parallelJobCount_not: Int

  """All values that are contained in given list."""
  parallelJobCount_in: [Int!]

  """All values that are not contained in given list."""
  parallelJobCount_not_in: [Int!]

  """All values less than the given value."""
  parallelJobCount_lt: Int

  """All values less than or equal the given value."""
  parallelJobCount_lte: Int

  """All values greater than the given value."""
  parallelJobCount_gt: Int

  """All values greater than or equal the given value."""
  parallelJobCount_gte: Int
  dataDensity: Int

  """All values that are not equal to given value."""
  dataDensity_not: Int

  """All values that are contained in given list."""
  dataDensity_in: [Int!]

  """All values that are not contained in given list."""
  dataDensity_not_in: [Int!]

  """All values less than the given value."""
  dataDensity_lt: Int

  """All values less than or equal the given value."""
  dataDensity_lte: Int

  """All values greater than the given value."""
  dataDensity_gt: Int

  """All values greater than or equal the given value."""
  dataDensity_gte: Int
  tickRepeatInitial: Int

  """All values that are not equal to given value."""
  tickRepeatInitial_not: Int

  """All values that are contained in given list."""
  tickRepeatInitial_in: [Int!]

  """All values that are not contained in given list."""
  tickRepeatInitial_not_in: [Int!]

  """All values less than the given value."""
  tickRepeatInitial_lt: Int

  """All values less than or equal the given value."""
  tickRepeatInitial_lte: Int

  """All values greater than the given value."""
  tickRepeatInitial_gt: Int

  """All values greater than or equal the given value."""
  tickRepeatInitial_gte: Int
  tickRepeatPerTick: Int

  """All values that are not equal to given value."""
  tickRepeatPerTick_not: Int

  """All values that are contained in given list."""
  tickRepeatPerTick_in: [Int!]

  """All values that are not contained in given list."""
  tickRepeatPerTick_not_in: [Int!]

  """All values less than the given value."""
  tickRepeatPerTick_lt: Int

  """All values less than or equal the given value."""
  tickRepeatPerTick_lte: Int

  """All values greater than the given value."""
  tickRepeatPerTick_gt: Int

  """All values greater than or equal the given value."""
  tickRepeatPerTick_gte: Int
  tickMaxTime: Int

  """All values that are not equal to given value."""
  tickMaxTime_not: Int

  """All values that are contained in given list."""
  tickMaxTime_in: [Int!]

  """All values that are not contained in given list."""
  tickMaxTime_not_in: [Int!]

  """All values less than the given value."""
  tickMaxTime_lt: Int

  """All values less than or equal the given value."""
  tickMaxTime_lte: Int

  """All values greater than the given value."""
  tickMaxTime_gt: Int

  """All values greater than or equal the given value."""
  tickMaxTime_gte: Int
  tickTime: Int

  """All values that are not equal to given value."""
  tickTime_not: Int

  """All values that are contained in given list."""
  tickTime_in: [Int!]

  """All values that are not contained in given list."""
  tickTime_not_in: [Int!]

  """All values less than the given value."""
  tickTime_lt: Int

  """All values less than or equal the given value."""
  tickTime_lte: Int

  """All values greater than the given value."""
  tickTime_gt: Int

  """All values greater than or equal the given value."""
  tickTime_gte: Int
  client: ClientWhereInput
  chatbot: ChatbotWhereInput
  testSets_every: TestSetWhereInput
  testSets_some: TestSetWhereInput
  testSets_none: TestSetWhereInput
  registeredComponents_every: RegisteredComponentWhereInput
  registeredComponents_some: RegisteredComponentWhereInput
  registeredComponents_none: RegisteredComponentWhereInput
  testProject: TestProjectWhereInput
  results_every: PerformanceTestSessionAggregatedResultWhereInput
  results_some: PerformanceTestSessionAggregatedResultWhereInput
  results_none: PerformanceTestSessionAggregatedResultWhereInput
  jobs_every: PerformanceTestSessionJobWhereInput
  jobs_some: PerformanceTestSessionJobWhereInput
  jobs_none: PerformanceTestSessionJobWhereInput
  capabilities_every: CapabilityWhereInput
  capabilities_some: CapabilityWhereInput
  capabilities_none: CapabilityWhereInput
  sources_every: CapabilityWhereInput
  sources_some: CapabilityWhereInput
  sources_none: CapabilityWhereInput
  envs_every: CapabilityWhereInput
  envs_some: CapabilityWhereInput
  envs_none: CapabilityWhereInput
}

input PerformanceTestSessionWhereUniqueInput {
  id: ID
}

type Query {
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  testSessions(where: TestSessionWhereInput, orderBy: TestSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSession]!
  testSessionTestCaseResults(where: TestSessionTestCaseResultWhereInput, orderBy: TestSessionTestCaseResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSessionTestCaseResult]!
  testSessionTestCaseResultAttachments(where: TestSessionTestCaseResultAttachmentWhereInput, orderBy: TestSessionTestCaseResultAttachmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSessionTestCaseResultAttachment]!
  testSessionJobs(where: TestSessionJobWhereInput, orderBy: TestSessionJobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSessionJob]!
  testSessionJobLogs(where: TestSessionJobLogWhereInput, orderBy: TestSessionJobLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSessionJobLog]!
  performanceTestSessions(where: PerformanceTestSessionWhereInput, orderBy: PerformanceTestSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PerformanceTestSession]!
  performanceTestSessionAggregatedResults(where: PerformanceTestSessionAggregatedResultWhereInput, orderBy: PerformanceTestSessionAggregatedResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PerformanceTestSessionAggregatedResult]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  apiKeys(where: ApiKeyWhereInput, orderBy: ApiKeyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ApiKey]!
  systemSettingses(where: SystemSettingsWhereInput, orderBy: SystemSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SystemSettings]!
  testSetRepositories(where: TestSetRepositoryWhereInput, orderBy: TestSetRepositoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSetRepository]!
  deviceDescriptors(where: DeviceDescriptorWhereInput, orderBy: DeviceDescriptorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DeviceDescriptor]!
  agents(where: AgentWhereInput, orderBy: AgentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Agent]!
  testSetFolders(where: TestSetFolderWhereInput, orderBy: TestSetFolderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSetFolder]!
  testProjects(where: TestProjectWhereInput, orderBy: TestProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestProject]!
  testSetScripts(where: TestSetScriptWhereInput, orderBy: TestSetScriptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSetScript]!
  performanceTestSessionJobs(where: PerformanceTestSessionJobWhereInput, orderBy: PerformanceTestSessionJobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PerformanceTestSessionJob]!
  testSessionTestCaseResultTranscripts(where: TestSessionTestCaseResultTranscriptWhereInput, orderBy: TestSessionTestCaseResultTranscriptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSessionTestCaseResultTranscript]!
  chatbots(where: ChatbotWhereInput, orderBy: ChatbotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chatbot]!
  testSets(where: TestSetWhereInput, orderBy: TestSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSet]!
  deviceSets(where: DeviceSetWhereInput, orderBy: DeviceSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DeviceSet]!
  testSetCompiledConvoes(where: TestSetCompiledConvoWhereInput, orderBy: TestSetCompiledConvoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSetCompiledConvo]!
  registeredComponents(where: RegisteredComponentWhereInput, orderBy: RegisteredComponentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RegisteredComponent]!
  securityAlerts(where: SecurityAlertWhereInput, orderBy: SecurityAlertOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SecurityAlert]!
  capabilities(where: CapabilityWhereInput, orderBy: CapabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Capability]!
  testSetExcels(where: TestSetExcelWhereInput, orderBy: TestSetExcelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSetExcel]!
  deviceProviders(where: DeviceProviderWhereInput, orderBy: DeviceProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DeviceProvider]!
  userRoles(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRole]!
  clients(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Client]!
  tag(where: TagWhereUniqueInput!): Tag
  testSession(where: TestSessionWhereUniqueInput!): TestSession
  testSessionTestCaseResult(where: TestSessionTestCaseResultWhereUniqueInput!): TestSessionTestCaseResult
  testSessionTestCaseResultAttachment(where: TestSessionTestCaseResultAttachmentWhereUniqueInput!): TestSessionTestCaseResultAttachment
  testSessionJob(where: TestSessionJobWhereUniqueInput!): TestSessionJob
  testSessionJobLog(where: TestSessionJobLogWhereUniqueInput!): TestSessionJobLog
  performanceTestSession(where: PerformanceTestSessionWhereUniqueInput!): PerformanceTestSession
  performanceTestSessionAggregatedResult(where: PerformanceTestSessionAggregatedResultWhereUniqueInput!): PerformanceTestSessionAggregatedResult
  user(where: UserWhereUniqueInput!): User
  apiKey(where: ApiKeyWhereUniqueInput!): ApiKey
  systemSettings(where: SystemSettingsWhereUniqueInput!): SystemSettings
  testSetRepository(where: TestSetRepositoryWhereUniqueInput!): TestSetRepository
  deviceDescriptor(where: DeviceDescriptorWhereUniqueInput!): DeviceDescriptor
  agent(where: AgentWhereUniqueInput!): Agent
  testSetFolder(where: TestSetFolderWhereUniqueInput!): TestSetFolder
  testProject(where: TestProjectWhereUniqueInput!): TestProject
  testSetScript(where: TestSetScriptWhereUniqueInput!): TestSetScript
  performanceTestSessionJob(where: PerformanceTestSessionJobWhereUniqueInput!): PerformanceTestSessionJob
  testSessionTestCaseResultTranscript(where: TestSessionTestCaseResultTranscriptWhereUniqueInput!): TestSessionTestCaseResultTranscript
  chatbot(where: ChatbotWhereUniqueInput!): Chatbot
  testSet(where: TestSetWhereUniqueInput!): TestSet
  deviceSet(where: DeviceSetWhereUniqueInput!): DeviceSet
  testSetCompiledConvo(where: TestSetCompiledConvoWhereUniqueInput!): TestSetCompiledConvo
  registeredComponent(where: RegisteredComponentWhereUniqueInput!): RegisteredComponent
  securityAlert(where: SecurityAlertWhereUniqueInput!): SecurityAlert
  capability(where: CapabilityWhereUniqueInput!): Capability
  testSetExcel(where: TestSetExcelWhereUniqueInput!): TestSetExcel
  deviceProvider(where: DeviceProviderWhereUniqueInput!): DeviceProvider
  userRole(where: UserRoleWhereUniqueInput!): UserRole
  client(where: ClientWhereUniqueInput!): Client
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  testSessionsConnection(where: TestSessionWhereInput, orderBy: TestSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestSessionConnection!
  testSessionTestCaseResultsConnection(where: TestSessionTestCaseResultWhereInput, orderBy: TestSessionTestCaseResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestSessionTestCaseResultConnection!
  testSessionTestCaseResultAttachmentsConnection(where: TestSessionTestCaseResultAttachmentWhereInput, orderBy: TestSessionTestCaseResultAttachmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestSessionTestCaseResultAttachmentConnection!
  testSessionJobsConnection(where: TestSessionJobWhereInput, orderBy: TestSessionJobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestSessionJobConnection!
  testSessionJobLogsConnection(where: TestSessionJobLogWhereInput, orderBy: TestSessionJobLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestSessionJobLogConnection!
  performanceTestSessionsConnection(where: PerformanceTestSessionWhereInput, orderBy: PerformanceTestSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PerformanceTestSessionConnection!
  performanceTestSessionAggregatedResultsConnection(where: PerformanceTestSessionAggregatedResultWhereInput, orderBy: PerformanceTestSessionAggregatedResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PerformanceTestSessionAggregatedResultConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  apiKeysConnection(where: ApiKeyWhereInput, orderBy: ApiKeyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ApiKeyConnection!
  systemSettingsesConnection(where: SystemSettingsWhereInput, orderBy: SystemSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SystemSettingsConnection!
  testSetRepositoriesConnection(where: TestSetRepositoryWhereInput, orderBy: TestSetRepositoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestSetRepositoryConnection!
  deviceDescriptorsConnection(where: DeviceDescriptorWhereInput, orderBy: DeviceDescriptorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeviceDescriptorConnection!
  agentsConnection(where: AgentWhereInput, orderBy: AgentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AgentConnection!
  testSetFoldersConnection(where: TestSetFolderWhereInput, orderBy: TestSetFolderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestSetFolderConnection!
  testProjectsConnection(where: TestProjectWhereInput, orderBy: TestProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestProjectConnection!
  testSetScriptsConnection(where: TestSetScriptWhereInput, orderBy: TestSetScriptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestSetScriptConnection!
  performanceTestSessionJobsConnection(where: PerformanceTestSessionJobWhereInput, orderBy: PerformanceTestSessionJobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PerformanceTestSessionJobConnection!
  testSessionTestCaseResultTranscriptsConnection(where: TestSessionTestCaseResultTranscriptWhereInput, orderBy: TestSessionTestCaseResultTranscriptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestSessionTestCaseResultTranscriptConnection!
  chatbotsConnection(where: ChatbotWhereInput, orderBy: ChatbotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatbotConnection!
  testSetsConnection(where: TestSetWhereInput, orderBy: TestSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestSetConnection!
  deviceSetsConnection(where: DeviceSetWhereInput, orderBy: DeviceSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeviceSetConnection!
  testSetCompiledConvoesConnection(where: TestSetCompiledConvoWhereInput, orderBy: TestSetCompiledConvoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestSetCompiledConvoConnection!
  registeredComponentsConnection(where: RegisteredComponentWhereInput, orderBy: RegisteredComponentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RegisteredComponentConnection!
  securityAlertsConnection(where: SecurityAlertWhereInput, orderBy: SecurityAlertOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SecurityAlertConnection!
  capabilitiesConnection(where: CapabilityWhereInput, orderBy: CapabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CapabilityConnection!
  testSetExcelsConnection(where: TestSetExcelWhereInput, orderBy: TestSetExcelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestSetExcelConnection!
  deviceProvidersConnection(where: DeviceProviderWhereInput, orderBy: DeviceProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeviceProviderConnection!
  userRolesConnection(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserRoleConnection!
  clientsConnection(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClientConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type RegisteredComponent implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  type: RegisteredComponentType!
  default: Boolean!
  src: String!
  ref: String!
  global: Boolean!
  args: String
}

"""A connection to a list of items."""
type RegisteredComponentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RegisteredComponentEdge]!
  aggregate: AggregateRegisteredComponent!
}

input RegisteredComponentCreateInput {
  name: String!
  description: String
  type: RegisteredComponentType!
  default: Boolean!
  src: String!
  ref: String!
  global: Boolean!
  args: String
}

input RegisteredComponentCreateManyInput {
  create: [RegisteredComponentCreateInput!]
  connect: [RegisteredComponentWhereUniqueInput!]
}

"""An edge in a connection."""
type RegisteredComponentEdge {
  """The item at the end of the edge."""
  node: RegisteredComponent!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RegisteredComponentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  type_ASC
  type_DESC
  default_ASC
  default_DESC
  src_ASC
  src_DESC
  ref_ASC
  ref_DESC
  global_ASC
  global_DESC
  args_ASC
  args_DESC
}

type RegisteredComponentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  type: RegisteredComponentType!
  default: Boolean!
  src: String!
  ref: String!
  global: Boolean!
  args: String
}

input RegisteredComponentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RegisteredComponentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RegisteredComponentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RegisteredComponentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: RegisteredComponentType

  """All values that are not equal to given value."""
  type_not: RegisteredComponentType

  """All values that are contained in given list."""
  type_in: [RegisteredComponentType!]

  """All values that are not contained in given list."""
  type_not_in: [RegisteredComponentType!]
  default: Boolean

  """All values that are not equal to given value."""
  default_not: Boolean
  src: String

  """All values that are not equal to given value."""
  src_not: String

  """All values that are contained in given list."""
  src_in: [String!]

  """All values that are not contained in given list."""
  src_not_in: [String!]

  """All values less than the given value."""
  src_lt: String

  """All values less than or equal the given value."""
  src_lte: String

  """All values greater than the given value."""
  src_gt: String

  """All values greater than or equal the given value."""
  src_gte: String

  """All values containing the given string."""
  src_contains: String

  """All values not containing the given string."""
  src_not_contains: String

  """All values starting with the given string."""
  src_starts_with: String

  """All values not starting with the given string."""
  src_not_starts_with: String

  """All values ending with the given string."""
  src_ends_with: String

  """All values not ending with the given string."""
  src_not_ends_with: String
  ref: String

  """All values that are not equal to given value."""
  ref_not: String

  """All values that are contained in given list."""
  ref_in: [String!]

  """All values that are not contained in given list."""
  ref_not_in: [String!]

  """All values less than the given value."""
  ref_lt: String

  """All values less than or equal the given value."""
  ref_lte: String

  """All values greater than the given value."""
  ref_gt: String

  """All values greater than or equal the given value."""
  ref_gte: String

  """All values containing the given string."""
  ref_contains: String

  """All values not containing the given string."""
  ref_not_contains: String

  """All values starting with the given string."""
  ref_starts_with: String

  """All values not starting with the given string."""
  ref_not_starts_with: String

  """All values ending with the given string."""
  ref_ends_with: String

  """All values not ending with the given string."""
  ref_not_ends_with: String
  global: Boolean

  """All values that are not equal to given value."""
  global_not: Boolean
  args: String

  """All values that are not equal to given value."""
  args_not: String

  """All values that are contained in given list."""
  args_in: [String!]

  """All values that are not contained in given list."""
  args_not_in: [String!]

  """All values less than the given value."""
  args_lt: String

  """All values less than or equal the given value."""
  args_lte: String

  """All values greater than the given value."""
  args_gt: String

  """All values greater than or equal the given value."""
  args_gte: String

  """All values containing the given string."""
  args_contains: String

  """All values not containing the given string."""
  args_not_contains: String

  """All values starting with the given string."""
  args_starts_with: String

  """All values not starting with the given string."""
  args_not_starts_with: String

  """All values ending with the given string."""
  args_ends_with: String

  """All values not ending with the given string."""
  args_not_ends_with: String
}

type RegisteredComponentSubscriptionPayload {
  mutation: MutationType!
  node: RegisteredComponent
  updatedFields: [String!]
  previousValues: RegisteredComponentPreviousValues
}

input RegisteredComponentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RegisteredComponentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RegisteredComponentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RegisteredComponentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RegisteredComponentWhereInput
}

enum RegisteredComponentType {
  ASSERTER
  LOGICHOOK
  USERINPUT
}

input RegisteredComponentUpdateDataInput {
  name: String
  description: String
  type: RegisteredComponentType
  default: Boolean
  src: String
  ref: String
  global: Boolean
  args: String
}

input RegisteredComponentUpdateInput {
  name: String
  description: String
  type: RegisteredComponentType
  default: Boolean
  src: String
  ref: String
  global: Boolean
  args: String
}

input RegisteredComponentUpdateManyDataInput {
  name: String
  description: String
  type: RegisteredComponentType
  default: Boolean
  src: String
  ref: String
  global: Boolean
  args: String
}

input RegisteredComponentUpdateManyInput {
  create: [RegisteredComponentCreateInput!]
  connect: [RegisteredComponentWhereUniqueInput!]
  set: [RegisteredComponentWhereUniqueInput!]
  disconnect: [RegisteredComponentWhereUniqueInput!]
  delete: [RegisteredComponentWhereUniqueInput!]
  update: [RegisteredComponentUpdateWithWhereUniqueNestedInput!]
  updateMany: [RegisteredComponentUpdateManyWithWhereNestedInput!]
  deleteMany: [RegisteredComponentScalarWhereInput!]
  upsert: [RegisteredComponentUpsertWithWhereUniqueNestedInput!]
}

input RegisteredComponentUpdateManyMutationInput {
  name: String
  description: String
  type: RegisteredComponentType
  default: Boolean
  src: String
  ref: String
  global: Boolean
  args: String
}

input RegisteredComponentUpdateManyWithWhereNestedInput {
  where: RegisteredComponentScalarWhereInput!
  data: RegisteredComponentUpdateManyDataInput!
}

input RegisteredComponentUpdateWithWhereUniqueNestedInput {
  where: RegisteredComponentWhereUniqueInput!
  data: RegisteredComponentUpdateDataInput!
}

input RegisteredComponentUpsertWithWhereUniqueNestedInput {
  where: RegisteredComponentWhereUniqueInput!
  update: RegisteredComponentUpdateDataInput!
  create: RegisteredComponentCreateInput!
}

input RegisteredComponentWhereInput {
  """Logical AND on all given filters."""
  AND: [RegisteredComponentWhereInput!]

  """Logical OR on all given filters."""
  OR: [RegisteredComponentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RegisteredComponentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: RegisteredComponentType

  """All values that are not equal to given value."""
  type_not: RegisteredComponentType

  """All values that are contained in given list."""
  type_in: [RegisteredComponentType!]

  """All values that are not contained in given list."""
  type_not_in: [RegisteredComponentType!]
  default: Boolean

  """All values that are not equal to given value."""
  default_not: Boolean
  src: String

  """All values that are not equal to given value."""
  src_not: String

  """All values that are contained in given list."""
  src_in: [String!]

  """All values that are not contained in given list."""
  src_not_in: [String!]

  """All values less than the given value."""
  src_lt: String

  """All values less than or equal the given value."""
  src_lte: String

  """All values greater than the given value."""
  src_gt: String

  """All values greater than or equal the given value."""
  src_gte: String

  """All values containing the given string."""
  src_contains: String

  """All values not containing the given string."""
  src_not_contains: String

  """All values starting with the given string."""
  src_starts_with: String

  """All values not starting with the given string."""
  src_not_starts_with: String

  """All values ending with the given string."""
  src_ends_with: String

  """All values not ending with the given string."""
  src_not_ends_with: String
  ref: String

  """All values that are not equal to given value."""
  ref_not: String

  """All values that are contained in given list."""
  ref_in: [String!]

  """All values that are not contained in given list."""
  ref_not_in: [String!]

  """All values less than the given value."""
  ref_lt: String

  """All values less than or equal the given value."""
  ref_lte: String

  """All values greater than the given value."""
  ref_gt: String

  """All values greater than or equal the given value."""
  ref_gte: String

  """All values containing the given string."""
  ref_contains: String

  """All values not containing the given string."""
  ref_not_contains: String

  """All values starting with the given string."""
  ref_starts_with: String

  """All values not starting with the given string."""
  ref_not_starts_with: String

  """All values ending with the given string."""
  ref_ends_with: String

  """All values not ending with the given string."""
  ref_not_ends_with: String
  global: Boolean

  """All values that are not equal to given value."""
  global_not: Boolean
  args: String

  """All values that are not equal to given value."""
  args_not: String

  """All values that are contained in given list."""
  args_in: [String!]

  """All values that are not contained in given list."""
  args_not_in: [String!]

  """All values less than the given value."""
  args_lt: String

  """All values less than or equal the given value."""
  args_lte: String

  """All values greater than the given value."""
  args_gt: String

  """All values greater than or equal the given value."""
  args_gte: String

  """All values containing the given string."""
  args_contains: String

  """All values not containing the given string."""
  args_not_contains: String

  """All values starting with the given string."""
  args_starts_with: String

  """All values not starting with the given string."""
  args_not_starts_with: String

  """All values ending with the given string."""
  args_ends_with: String

  """All values not ending with the given string."""
  args_not_ends_with: String
}

input RegisteredComponentWhereUniqueInput {
  id: ID
  name: String
}

type SecurityAlert implements Node {
  id: ID!
  method: Verb
  confidence: String
  risk: String
  alert: String
  solution: String
  evidence: String
  references: [String!]!
}

"""A connection to a list of items."""
type SecurityAlertConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SecurityAlertEdge]!
  aggregate: AggregateSecurityAlert!
}

input SecurityAlertCreateInput {
  method: Verb
  confidence: String
  risk: String
  alert: String
  solution: String
  evidence: String
  references: SecurityAlertCreatereferencesInput
}

input SecurityAlertCreateManyInput {
  create: [SecurityAlertCreateInput!]
  connect: [SecurityAlertWhereUniqueInput!]
}

input SecurityAlertCreatereferencesInput {
  set: [String!]
}

"""An edge in a connection."""
type SecurityAlertEdge {
  """The item at the end of the edge."""
  node: SecurityAlert!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SecurityAlertOrderByInput {
  id_ASC
  id_DESC
  method_ASC
  method_DESC
  confidence_ASC
  confidence_DESC
  risk_ASC
  risk_DESC
  alert_ASC
  alert_DESC
  solution_ASC
  solution_DESC
  evidence_ASC
  evidence_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SecurityAlertPreviousValues {
  id: ID!
  method: Verb
  confidence: String
  risk: String
  alert: String
  solution: String
  evidence: String
  references: [String!]!
}

input SecurityAlertScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityAlertScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityAlertScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityAlertScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  method: Verb

  """All values that are not equal to given value."""
  method_not: Verb

  """All values that are contained in given list."""
  method_in: [Verb!]

  """All values that are not contained in given list."""
  method_not_in: [Verb!]
  confidence: String

  """All values that are not equal to given value."""
  confidence_not: String

  """All values that are contained in given list."""
  confidence_in: [String!]

  """All values that are not contained in given list."""
  confidence_not_in: [String!]

  """All values less than the given value."""
  confidence_lt: String

  """All values less than or equal the given value."""
  confidence_lte: String

  """All values greater than the given value."""
  confidence_gt: String

  """All values greater than or equal the given value."""
  confidence_gte: String

  """All values containing the given string."""
  confidence_contains: String

  """All values not containing the given string."""
  confidence_not_contains: String

  """All values starting with the given string."""
  confidence_starts_with: String

  """All values not starting with the given string."""
  confidence_not_starts_with: String

  """All values ending with the given string."""
  confidence_ends_with: String

  """All values not ending with the given string."""
  confidence_not_ends_with: String
  risk: String

  """All values that are not equal to given value."""
  risk_not: String

  """All values that are contained in given list."""
  risk_in: [String!]

  """All values that are not contained in given list."""
  risk_not_in: [String!]

  """All values less than the given value."""
  risk_lt: String

  """All values less than or equal the given value."""
  risk_lte: String

  """All values greater than the given value."""
  risk_gt: String

  """All values greater than or equal the given value."""
  risk_gte: String

  """All values containing the given string."""
  risk_contains: String

  """All values not containing the given string."""
  risk_not_contains: String

  """All values starting with the given string."""
  risk_starts_with: String

  """All values not starting with the given string."""
  risk_not_starts_with: String

  """All values ending with the given string."""
  risk_ends_with: String

  """All values not ending with the given string."""
  risk_not_ends_with: String
  alert: String

  """All values that are not equal to given value."""
  alert_not: String

  """All values that are contained in given list."""
  alert_in: [String!]

  """All values that are not contained in given list."""
  alert_not_in: [String!]

  """All values less than the given value."""
  alert_lt: String

  """All values less than or equal the given value."""
  alert_lte: String

  """All values greater than the given value."""
  alert_gt: String

  """All values greater than or equal the given value."""
  alert_gte: String

  """All values containing the given string."""
  alert_contains: String

  """All values not containing the given string."""
  alert_not_contains: String

  """All values starting with the given string."""
  alert_starts_with: String

  """All values not starting with the given string."""
  alert_not_starts_with: String

  """All values ending with the given string."""
  alert_ends_with: String

  """All values not ending with the given string."""
  alert_not_ends_with: String
  solution: String

  """All values that are not equal to given value."""
  solution_not: String

  """All values that are contained in given list."""
  solution_in: [String!]

  """All values that are not contained in given list."""
  solution_not_in: [String!]

  """All values less than the given value."""
  solution_lt: String

  """All values less than or equal the given value."""
  solution_lte: String

  """All values greater than the given value."""
  solution_gt: String

  """All values greater than or equal the given value."""
  solution_gte: String

  """All values containing the given string."""
  solution_contains: String

  """All values not containing the given string."""
  solution_not_contains: String

  """All values starting with the given string."""
  solution_starts_with: String

  """All values not starting with the given string."""
  solution_not_starts_with: String

  """All values ending with the given string."""
  solution_ends_with: String

  """All values not ending with the given string."""
  solution_not_ends_with: String
  evidence: String

  """All values that are not equal to given value."""
  evidence_not: String

  """All values that are contained in given list."""
  evidence_in: [String!]

  """All values that are not contained in given list."""
  evidence_not_in: [String!]

  """All values less than the given value."""
  evidence_lt: String

  """All values less than or equal the given value."""
  evidence_lte: String

  """All values greater than the given value."""
  evidence_gt: String

  """All values greater than or equal the given value."""
  evidence_gte: String

  """All values containing the given string."""
  evidence_contains: String

  """All values not containing the given string."""
  evidence_not_contains: String

  """All values starting with the given string."""
  evidence_starts_with: String

  """All values not starting with the given string."""
  evidence_not_starts_with: String

  """All values ending with the given string."""
  evidence_ends_with: String

  """All values not ending with the given string."""
  evidence_not_ends_with: String
}

type SecurityAlertSubscriptionPayload {
  mutation: MutationType!
  node: SecurityAlert
  updatedFields: [String!]
  previousValues: SecurityAlertPreviousValues
}

input SecurityAlertSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityAlertSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityAlertSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityAlertSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SecurityAlertWhereInput
}

input SecurityAlertUpdateDataInput {
  method: Verb
  confidence: String
  risk: String
  alert: String
  solution: String
  evidence: String
  references: SecurityAlertUpdatereferencesInput
}

input SecurityAlertUpdateInput {
  method: Verb
  confidence: String
  risk: String
  alert: String
  solution: String
  evidence: String
  references: SecurityAlertUpdatereferencesInput
}

input SecurityAlertUpdateManyDataInput {
  method: Verb
  confidence: String
  risk: String
  alert: String
  solution: String
  evidence: String
  references: SecurityAlertUpdatereferencesInput
}

input SecurityAlertUpdateManyInput {
  create: [SecurityAlertCreateInput!]
  connect: [SecurityAlertWhereUniqueInput!]
  set: [SecurityAlertWhereUniqueInput!]
  disconnect: [SecurityAlertWhereUniqueInput!]
  delete: [SecurityAlertWhereUniqueInput!]
  update: [SecurityAlertUpdateWithWhereUniqueNestedInput!]
  updateMany: [SecurityAlertUpdateManyWithWhereNestedInput!]
  deleteMany: [SecurityAlertScalarWhereInput!]
  upsert: [SecurityAlertUpsertWithWhereUniqueNestedInput!]
}

input SecurityAlertUpdateManyMutationInput {
  method: Verb
  confidence: String
  risk: String
  alert: String
  solution: String
  evidence: String
  references: SecurityAlertUpdatereferencesInput
}

input SecurityAlertUpdateManyWithWhereNestedInput {
  where: SecurityAlertScalarWhereInput!
  data: SecurityAlertUpdateManyDataInput!
}

input SecurityAlertUpdatereferencesInput {
  set: [String!]
}

input SecurityAlertUpdateWithWhereUniqueNestedInput {
  where: SecurityAlertWhereUniqueInput!
  data: SecurityAlertUpdateDataInput!
}

input SecurityAlertUpsertWithWhereUniqueNestedInput {
  where: SecurityAlertWhereUniqueInput!
  update: SecurityAlertUpdateDataInput!
  create: SecurityAlertCreateInput!
}

input SecurityAlertWhereInput {
  """Logical AND on all given filters."""
  AND: [SecurityAlertWhereInput!]

  """Logical OR on all given filters."""
  OR: [SecurityAlertWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SecurityAlertWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  method: Verb

  """All values that are not equal to given value."""
  method_not: Verb

  """All values that are contained in given list."""
  method_in: [Verb!]

  """All values that are not contained in given list."""
  method_not_in: [Verb!]
  confidence: String

  """All values that are not equal to given value."""
  confidence_not: String

  """All values that are contained in given list."""
  confidence_in: [String!]

  """All values that are not contained in given list."""
  confidence_not_in: [String!]

  """All values less than the given value."""
  confidence_lt: String

  """All values less than or equal the given value."""
  confidence_lte: String

  """All values greater than the given value."""
  confidence_gt: String

  """All values greater than or equal the given value."""
  confidence_gte: String

  """All values containing the given string."""
  confidence_contains: String

  """All values not containing the given string."""
  confidence_not_contains: String

  """All values starting with the given string."""
  confidence_starts_with: String

  """All values not starting with the given string."""
  confidence_not_starts_with: String

  """All values ending with the given string."""
  confidence_ends_with: String

  """All values not ending with the given string."""
  confidence_not_ends_with: String
  risk: String

  """All values that are not equal to given value."""
  risk_not: String

  """All values that are contained in given list."""
  risk_in: [String!]

  """All values that are not contained in given list."""
  risk_not_in: [String!]

  """All values less than the given value."""
  risk_lt: String

  """All values less than or equal the given value."""
  risk_lte: String

  """All values greater than the given value."""
  risk_gt: String

  """All values greater than or equal the given value."""
  risk_gte: String

  """All values containing the given string."""
  risk_contains: String

  """All values not containing the given string."""
  risk_not_contains: String

  """All values starting with the given string."""
  risk_starts_with: String

  """All values not starting with the given string."""
  risk_not_starts_with: String

  """All values ending with the given string."""
  risk_ends_with: String

  """All values not ending with the given string."""
  risk_not_ends_with: String
  alert: String

  """All values that are not equal to given value."""
  alert_not: String

  """All values that are contained in given list."""
  alert_in: [String!]

  """All values that are not contained in given list."""
  alert_not_in: [String!]

  """All values less than the given value."""
  alert_lt: String

  """All values less than or equal the given value."""
  alert_lte: String

  """All values greater than the given value."""
  alert_gt: String

  """All values greater than or equal the given value."""
  alert_gte: String

  """All values containing the given string."""
  alert_contains: String

  """All values not containing the given string."""
  alert_not_contains: String

  """All values starting with the given string."""
  alert_starts_with: String

  """All values not starting with the given string."""
  alert_not_starts_with: String

  """All values ending with the given string."""
  alert_ends_with: String

  """All values not ending with the given string."""
  alert_not_ends_with: String
  solution: String

  """All values that are not equal to given value."""
  solution_not: String

  """All values that are contained in given list."""
  solution_in: [String!]

  """All values that are not contained in given list."""
  solution_not_in: [String!]

  """All values less than the given value."""
  solution_lt: String

  """All values less than or equal the given value."""
  solution_lte: String

  """All values greater than the given value."""
  solution_gt: String

  """All values greater than or equal the given value."""
  solution_gte: String

  """All values containing the given string."""
  solution_contains: String

  """All values not containing the given string."""
  solution_not_contains: String

  """All values starting with the given string."""
  solution_starts_with: String

  """All values not starting with the given string."""
  solution_not_starts_with: String

  """All values ending with the given string."""
  solution_ends_with: String

  """All values not ending with the given string."""
  solution_not_ends_with: String
  evidence: String

  """All values that are not equal to given value."""
  evidence_not: String

  """All values that are contained in given list."""
  evidence_in: [String!]

  """All values that are not contained in given list."""
  evidence_not_in: [String!]

  """All values less than the given value."""
  evidence_lt: String

  """All values less than or equal the given value."""
  evidence_lte: String

  """All values greater than the given value."""
  evidence_gt: String

  """All values greater than or equal the given value."""
  evidence_gte: String

  """All values containing the given string."""
  evidence_contains: String

  """All values not containing the given string."""
  evidence_not_contains: String

  """All values starting with the given string."""
  evidence_starts_with: String

  """All values not starting with the given string."""
  evidence_not_starts_with: String

  """All values ending with the given string."""
  evidence_ends_with: String

  """All values not ending with the given string."""
  evidence_not_ends_with: String
}

input SecurityAlertWhereUniqueInput {
  id: ID
}

type Subscription {
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  testSession(where: TestSessionSubscriptionWhereInput): TestSessionSubscriptionPayload
  testSessionTestCaseResult(where: TestSessionTestCaseResultSubscriptionWhereInput): TestSessionTestCaseResultSubscriptionPayload
  testSessionTestCaseResultAttachment(where: TestSessionTestCaseResultAttachmentSubscriptionWhereInput): TestSessionTestCaseResultAttachmentSubscriptionPayload
  testSessionJob(where: TestSessionJobSubscriptionWhereInput): TestSessionJobSubscriptionPayload
  testSessionJobLog(where: TestSessionJobLogSubscriptionWhereInput): TestSessionJobLogSubscriptionPayload
  performanceTestSession(where: PerformanceTestSessionSubscriptionWhereInput): PerformanceTestSessionSubscriptionPayload
  performanceTestSessionAggregatedResult(where: PerformanceTestSessionAggregatedResultSubscriptionWhereInput): PerformanceTestSessionAggregatedResultSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  apiKey(where: ApiKeySubscriptionWhereInput): ApiKeySubscriptionPayload
  systemSettings(where: SystemSettingsSubscriptionWhereInput): SystemSettingsSubscriptionPayload
  testSetRepository(where: TestSetRepositorySubscriptionWhereInput): TestSetRepositorySubscriptionPayload
  deviceDescriptor(where: DeviceDescriptorSubscriptionWhereInput): DeviceDescriptorSubscriptionPayload
  agent(where: AgentSubscriptionWhereInput): AgentSubscriptionPayload
  testSetFolder(where: TestSetFolderSubscriptionWhereInput): TestSetFolderSubscriptionPayload
  testProject(where: TestProjectSubscriptionWhereInput): TestProjectSubscriptionPayload
  testSetScript(where: TestSetScriptSubscriptionWhereInput): TestSetScriptSubscriptionPayload
  performanceTestSessionJob(where: PerformanceTestSessionJobSubscriptionWhereInput): PerformanceTestSessionJobSubscriptionPayload
  testSessionTestCaseResultTranscript(where: TestSessionTestCaseResultTranscriptSubscriptionWhereInput): TestSessionTestCaseResultTranscriptSubscriptionPayload
  chatbot(where: ChatbotSubscriptionWhereInput): ChatbotSubscriptionPayload
  testSet(where: TestSetSubscriptionWhereInput): TestSetSubscriptionPayload
  deviceSet(where: DeviceSetSubscriptionWhereInput): DeviceSetSubscriptionPayload
  testSetCompiledConvo(where: TestSetCompiledConvoSubscriptionWhereInput): TestSetCompiledConvoSubscriptionPayload
  registeredComponent(where: RegisteredComponentSubscriptionWhereInput): RegisteredComponentSubscriptionPayload
  securityAlert(where: SecurityAlertSubscriptionWhereInput): SecurityAlertSubscriptionPayload
  capability(where: CapabilitySubscriptionWhereInput): CapabilitySubscriptionPayload
  testSetExcel(where: TestSetExcelSubscriptionWhereInput): TestSetExcelSubscriptionPayload
  deviceProvider(where: DeviceProviderSubscriptionWhereInput): DeviceProviderSubscriptionPayload
  userRole(where: UserRoleSubscriptionWhereInput): UserRoleSubscriptionPayload
  client(where: ClientSubscriptionWhereInput): ClientSubscriptionPayload
}

type SystemSettings implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  cleanupJobIntervalMinutes: Int
  keepTestCaseSuccessScreenshotsDays: Int
  keepTestCaseSuccessConversationDays: Int
  keepTestCaseFailedScreenshotsDays: Int
  keepTestCaseFailedConversationDays: Int
}

"""A connection to a list of items."""
type SystemSettingsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SystemSettingsEdge]!
  aggregate: AggregateSystemSettings!
}

input SystemSettingsCreateInput {
  cleanupJobIntervalMinutes: Int
  keepTestCaseSuccessScreenshotsDays: Int
  keepTestCaseSuccessConversationDays: Int
  keepTestCaseFailedScreenshotsDays: Int
  keepTestCaseFailedConversationDays: Int
}

"""An edge in a connection."""
type SystemSettingsEdge {
  """The item at the end of the edge."""
  node: SystemSettings!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SystemSettingsOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  cleanupJobIntervalMinutes_ASC
  cleanupJobIntervalMinutes_DESC
  keepTestCaseSuccessScreenshotsDays_ASC
  keepTestCaseSuccessScreenshotsDays_DESC
  keepTestCaseSuccessConversationDays_ASC
  keepTestCaseSuccessConversationDays_DESC
  keepTestCaseFailedScreenshotsDays_ASC
  keepTestCaseFailedScreenshotsDays_DESC
  keepTestCaseFailedConversationDays_ASC
  keepTestCaseFailedConversationDays_DESC
}

type SystemSettingsPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  cleanupJobIntervalMinutes: Int
  keepTestCaseSuccessScreenshotsDays: Int
  keepTestCaseSuccessConversationDays: Int
  keepTestCaseFailedScreenshotsDays: Int
  keepTestCaseFailedConversationDays: Int
}

type SystemSettingsSubscriptionPayload {
  mutation: MutationType!
  node: SystemSettings
  updatedFields: [String!]
  previousValues: SystemSettingsPreviousValues
}

input SystemSettingsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SystemSettingsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SystemSettingsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SystemSettingsSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SystemSettingsWhereInput
}

input SystemSettingsUpdateInput {
  cleanupJobIntervalMinutes: Int
  keepTestCaseSuccessScreenshotsDays: Int
  keepTestCaseSuccessConversationDays: Int
  keepTestCaseFailedScreenshotsDays: Int
  keepTestCaseFailedConversationDays: Int
}

input SystemSettingsUpdateManyMutationInput {
  cleanupJobIntervalMinutes: Int
  keepTestCaseSuccessScreenshotsDays: Int
  keepTestCaseSuccessConversationDays: Int
  keepTestCaseFailedScreenshotsDays: Int
  keepTestCaseFailedConversationDays: Int
}

input SystemSettingsWhereInput {
  """Logical AND on all given filters."""
  AND: [SystemSettingsWhereInput!]

  """Logical OR on all given filters."""
  OR: [SystemSettingsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SystemSettingsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  cleanupJobIntervalMinutes: Int

  """All values that are not equal to given value."""
  cleanupJobIntervalMinutes_not: Int

  """All values that are contained in given list."""
  cleanupJobIntervalMinutes_in: [Int!]

  """All values that are not contained in given list."""
  cleanupJobIntervalMinutes_not_in: [Int!]

  """All values less than the given value."""
  cleanupJobIntervalMinutes_lt: Int

  """All values less than or equal the given value."""
  cleanupJobIntervalMinutes_lte: Int

  """All values greater than the given value."""
  cleanupJobIntervalMinutes_gt: Int

  """All values greater than or equal the given value."""
  cleanupJobIntervalMinutes_gte: Int
  keepTestCaseSuccessScreenshotsDays: Int

  """All values that are not equal to given value."""
  keepTestCaseSuccessScreenshotsDays_not: Int

  """All values that are contained in given list."""
  keepTestCaseSuccessScreenshotsDays_in: [Int!]

  """All values that are not contained in given list."""
  keepTestCaseSuccessScreenshotsDays_not_in: [Int!]

  """All values less than the given value."""
  keepTestCaseSuccessScreenshotsDays_lt: Int

  """All values less than or equal the given value."""
  keepTestCaseSuccessScreenshotsDays_lte: Int

  """All values greater than the given value."""
  keepTestCaseSuccessScreenshotsDays_gt: Int

  """All values greater than or equal the given value."""
  keepTestCaseSuccessScreenshotsDays_gte: Int
  keepTestCaseSuccessConversationDays: Int

  """All values that are not equal to given value."""
  keepTestCaseSuccessConversationDays_not: Int

  """All values that are contained in given list."""
  keepTestCaseSuccessConversationDays_in: [Int!]

  """All values that are not contained in given list."""
  keepTestCaseSuccessConversationDays_not_in: [Int!]

  """All values less than the given value."""
  keepTestCaseSuccessConversationDays_lt: Int

  """All values less than or equal the given value."""
  keepTestCaseSuccessConversationDays_lte: Int

  """All values greater than the given value."""
  keepTestCaseSuccessConversationDays_gt: Int

  """All values greater than or equal the given value."""
  keepTestCaseSuccessConversationDays_gte: Int
  keepTestCaseFailedScreenshotsDays: Int

  """All values that are not equal to given value."""
  keepTestCaseFailedScreenshotsDays_not: Int

  """All values that are contained in given list."""
  keepTestCaseFailedScreenshotsDays_in: [Int!]

  """All values that are not contained in given list."""
  keepTestCaseFailedScreenshotsDays_not_in: [Int!]

  """All values less than the given value."""
  keepTestCaseFailedScreenshotsDays_lt: Int

  """All values less than or equal the given value."""
  keepTestCaseFailedScreenshotsDays_lte: Int

  """All values greater than the given value."""
  keepTestCaseFailedScreenshotsDays_gt: Int

  """All values greater than or equal the given value."""
  keepTestCaseFailedScreenshotsDays_gte: Int
  keepTestCaseFailedConversationDays: Int

  """All values that are not equal to given value."""
  keepTestCaseFailedConversationDays_not: Int

  """All values that are contained in given list."""
  keepTestCaseFailedConversationDays_in: [Int!]

  """All values that are not contained in given list."""
  keepTestCaseFailedConversationDays_not_in: [Int!]

  """All values less than the given value."""
  keepTestCaseFailedConversationDays_lt: Int

  """All values less than or equal the given value."""
  keepTestCaseFailedConversationDays_lte: Int

  """All values greater than the given value."""
  keepTestCaseFailedConversationDays_gt: Int

  """All values greater than or equal the given value."""
  keepTestCaseFailedConversationDays_gte: Int
}

input SystemSettingsWhereUniqueInput {
  id: ID
}

type Tag implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

"""A connection to a list of items."""
type TagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  name: String!
}

"""An edge in a connection."""
type TagEdge {
  """The item at the end of the edge."""
  node: Tag!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type TagPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TagSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TagWhereInput
}

input TagUpdateInput {
  name: String
}

input TagUpdateManyMutationInput {
  name: String
}

input TagWhereInput {
  """Logical AND on all given filters."""
  AND: [TagWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

type TestProject implements Node {
  id: ID!
  client: Client
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: String!
  securityCheck: Boolean
  description: String
  tags: [String!]!
  chatbot: Chatbot!
  testSets(where: TestSetWhereInput, orderBy: TestSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSet!]
  deviceSets(where: DeviceSetWhereInput, orderBy: DeviceSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DeviceSet!]
  registeredComponents(where: RegisteredComponentWhereInput, orderBy: RegisteredComponentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RegisteredComponent!]
  capabilities(where: CapabilityWhereInput, orderBy: CapabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Capability!]
  agent: Agent
  batchCount: Int
  bail: Boolean
}

"""A connection to a list of items."""
type TestProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestProjectEdge]!
  aggregate: AggregateTestProject!
}

input TestProjectCreateInput {
  name: String!
  code: String!
  securityCheck: Boolean
  description: String
  batchCount: Int
  bail: Boolean
  tags: TestProjectCreatetagsInput
  client: ClientCreateOneInput
  chatbot: ChatbotCreateOneInput!
  testSets: TestSetCreateManyInput
  deviceSets: DeviceSetCreateManyInput
  registeredComponents: RegisteredComponentCreateManyInput
  capabilities: CapabilityCreateManyInput
  agent: AgentCreateOneInput
}

input TestProjectCreateOneInput {
  create: TestProjectCreateInput
  connect: TestProjectWhereUniqueInput
}

input TestProjectCreatetagsInput {
  set: [String!]
}

"""An edge in a connection."""
type TestProjectEdge {
  """The item at the end of the edge."""
  node: TestProject!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TestProjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
  securityCheck_ASC
  securityCheck_DESC
  description_ASC
  description_DESC
  batchCount_ASC
  batchCount_DESC
  bail_ASC
  bail_DESC
}

type TestProjectPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: String!
  securityCheck: Boolean
  description: String
  tags: [String!]!
  batchCount: Int
  bail: Boolean
}

type TestProjectSubscriptionPayload {
  mutation: MutationType!
  node: TestProject
  updatedFields: [String!]
  previousValues: TestProjectPreviousValues
}

input TestProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestProjectSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TestProjectWhereInput
}

input TestProjectUpdateDataInput {
  name: String
  code: String
  securityCheck: Boolean
  description: String
  batchCount: Int
  bail: Boolean
  tags: TestProjectUpdatetagsInput
  client: ClientUpdateOneInput
  chatbot: ChatbotUpdateOneRequiredInput
  testSets: TestSetUpdateManyInput
  deviceSets: DeviceSetUpdateManyInput
  registeredComponents: RegisteredComponentUpdateManyInput
  capabilities: CapabilityUpdateManyInput
  agent: AgentUpdateOneInput
}

input TestProjectUpdateInput {
  name: String
  code: String
  securityCheck: Boolean
  description: String
  batchCount: Int
  bail: Boolean
  tags: TestProjectUpdatetagsInput
  client: ClientUpdateOneInput
  chatbot: ChatbotUpdateOneRequiredInput
  testSets: TestSetUpdateManyInput
  deviceSets: DeviceSetUpdateManyInput
  registeredComponents: RegisteredComponentUpdateManyInput
  capabilities: CapabilityUpdateManyInput
  agent: AgentUpdateOneInput
}

input TestProjectUpdateManyMutationInput {
  name: String
  code: String
  securityCheck: Boolean
  description: String
  batchCount: Int
  bail: Boolean
  tags: TestProjectUpdatetagsInput
}

input TestProjectUpdateOneInput {
  create: TestProjectCreateInput
  connect: TestProjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TestProjectUpdateDataInput
  upsert: TestProjectUpsertNestedInput
}

input TestProjectUpdatetagsInput {
  set: [String!]
}

input TestProjectUpsertNestedInput {
  update: TestProjectUpdateDataInput!
  create: TestProjectCreateInput!
}

input TestProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [TestProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  securityCheck: Boolean

  """All values that are not equal to given value."""
  securityCheck_not: Boolean
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  batchCount: Int

  """All values that are not equal to given value."""
  batchCount_not: Int

  """All values that are contained in given list."""
  batchCount_in: [Int!]

  """All values that are not contained in given list."""
  batchCount_not_in: [Int!]

  """All values less than the given value."""
  batchCount_lt: Int

  """All values less than or equal the given value."""
  batchCount_lte: Int

  """All values greater than the given value."""
  batchCount_gt: Int

  """All values greater than or equal the given value."""
  batchCount_gte: Int
  bail: Boolean

  """All values that are not equal to given value."""
  bail_not: Boolean
  client: ClientWhereInput
  chatbot: ChatbotWhereInput
  testSets_every: TestSetWhereInput
  testSets_some: TestSetWhereInput
  testSets_none: TestSetWhereInput
  deviceSets_every: DeviceSetWhereInput
  deviceSets_some: DeviceSetWhereInput
  deviceSets_none: DeviceSetWhereInput
  registeredComponents_every: RegisteredComponentWhereInput
  registeredComponents_some: RegisteredComponentWhereInput
  registeredComponents_none: RegisteredComponentWhereInput
  capabilities_every: CapabilityWhereInput
  capabilities_some: CapabilityWhereInput
  capabilities_none: CapabilityWhereInput
  agent: AgentWhereInput
}

input TestProjectWhereUniqueInput {
  id: ID
  code: String
}

type TestSession implements Node {
  id: ID!
  client: Client
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  tags: [String!]!
  chatbot: Chatbot!
  testSets(where: TestSetWhereInput, orderBy: TestSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSet!]
  deviceSets(where: DeviceSetWhereInput, orderBy: DeviceSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DeviceSet!]
  registeredComponents(where: RegisteredComponentWhereInput, orderBy: RegisteredComponentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RegisteredComponent!]
  testProject: TestProject
  agent: Agent
  batchCount: Int
  bail: Boolean
  status: TestSessionStatus!
  results(where: TestSessionTestCaseResultWhereInput, orderBy: TestSessionTestCaseResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSessionTestCaseResult!]
  securityCheck: Boolean
  securityAlerts(where: SecurityAlertWhereInput, orderBy: SecurityAlertOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SecurityAlert!]
  jobs(where: TestSessionJobWhereInput, orderBy: TestSessionJobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSessionJob!]
  capabilities(where: CapabilityWhereInput, orderBy: CapabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Capability!]
  sources(where: CapabilityWhereInput, orderBy: CapabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Capability!]
  envs(where: CapabilityWhereInput, orderBy: CapabilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Capability!]
  chartData: String
}

"""A connection to a list of items."""
type TestSessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestSessionEdge]!
  aggregate: AggregateTestSession!
}

input TestSessionCreateInput {
  name: String!
  description: String
  batchCount: Int
  bail: Boolean
  status: TestSessionStatus!
  securityCheck: Boolean
  chartData: String
  tags: TestSessionCreatetagsInput
  client: ClientCreateOneInput
  chatbot: ChatbotCreateOneInput!
  testSets: TestSetCreateManyInput
  deviceSets: DeviceSetCreateManyInput
  registeredComponents: RegisteredComponentCreateManyInput
  testProject: TestProjectCreateOneInput
  agent: AgentCreateOneInput
  results: TestSessionTestCaseResultCreateManyWithoutTestSessionInput
  securityAlerts: SecurityAlertCreateManyInput
  jobs: TestSessionJobCreateManyWithoutTestSessionInput
  capabilities: CapabilityCreateManyInput
  sources: CapabilityCreateManyInput
  envs: CapabilityCreateManyInput
}

input TestSessionCreateOneWithoutJobsInput {
  create: TestSessionCreateWithoutJobsInput
  connect: TestSessionWhereUniqueInput
}

input TestSessionCreateOneWithoutResultsInput {
  create: TestSessionCreateWithoutResultsInput
  connect: TestSessionWhereUniqueInput
}

input TestSessionCreatetagsInput {
  set: [String!]
}

input TestSessionCreateWithoutJobsInput {
  name: String!
  description: String
  batchCount: Int
  bail: Boolean
  status: TestSessionStatus!
  securityCheck: Boolean
  chartData: String
  tags: TestSessionCreatetagsInput
  client: ClientCreateOneInput
  chatbot: ChatbotCreateOneInput!
  testSets: TestSetCreateManyInput
  deviceSets: DeviceSetCreateManyInput
  registeredComponents: RegisteredComponentCreateManyInput
  testProject: TestProjectCreateOneInput
  agent: AgentCreateOneInput
  results: TestSessionTestCaseResultCreateManyWithoutTestSessionInput
  securityAlerts: SecurityAlertCreateManyInput
  capabilities: CapabilityCreateManyInput
  sources: CapabilityCreateManyInput
  envs: CapabilityCreateManyInput
}

input TestSessionCreateWithoutResultsInput {
  name: String!
  description: String
  batchCount: Int
  bail: Boolean
  status: TestSessionStatus!
  securityCheck: Boolean
  chartData: String
  tags: TestSessionCreatetagsInput
  client: ClientCreateOneInput
  chatbot: ChatbotCreateOneInput!
  testSets: TestSetCreateManyInput
  deviceSets: DeviceSetCreateManyInput
  registeredComponents: RegisteredComponentCreateManyInput
  testProject: TestProjectCreateOneInput
  agent: AgentCreateOneInput
  securityAlerts: SecurityAlertCreateManyInput
  jobs: TestSessionJobCreateManyWithoutTestSessionInput
  capabilities: CapabilityCreateManyInput
  sources: CapabilityCreateManyInput
  envs: CapabilityCreateManyInput
}

"""An edge in a connection."""
type TestSessionEdge {
  """The item at the end of the edge."""
  node: TestSession!

  """A cursor for use in pagination."""
  cursor: String!
}

type TestSessionJob implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  testSession: TestSession!
  jobId: Int
  progressPercent: Int
  status: TestSessionJobStatus!
  err: String
  started: DateTime
  finished: DateTime
  totalCount: Int
  failedCount: Int
  successCount: Int
  logs(where: TestSessionJobLogWhereInput, orderBy: TestSessionJobLogOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSessionJobLog!]
}

"""A connection to a list of items."""
type TestSessionJobConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestSessionJobEdge]!
  aggregate: AggregateTestSessionJob!
}

input TestSessionJobCreateInput {
  jobId: Int
  progressPercent: Int
  status: TestSessionJobStatus!
  err: String
  started: DateTime
  finished: DateTime
  totalCount: Int
  failedCount: Int
  successCount: Int
  testSession: TestSessionCreateOneWithoutJobsInput!
  logs: TestSessionJobLogCreateManyWithoutTestSessionJobInput
}

input TestSessionJobCreateManyWithoutTestSessionInput {
  create: [TestSessionJobCreateWithoutTestSessionInput!]
  connect: [TestSessionJobWhereUniqueInput!]
}

input TestSessionJobCreateOneWithoutLogsInput {
  create: TestSessionJobCreateWithoutLogsInput
  connect: TestSessionJobWhereUniqueInput
}

input TestSessionJobCreateWithoutLogsInput {
  jobId: Int
  progressPercent: Int
  status: TestSessionJobStatus!
  err: String
  started: DateTime
  finished: DateTime
  totalCount: Int
  failedCount: Int
  successCount: Int
  testSession: TestSessionCreateOneWithoutJobsInput!
}

input TestSessionJobCreateWithoutTestSessionInput {
  jobId: Int
  progressPercent: Int
  status: TestSessionJobStatus!
  err: String
  started: DateTime
  finished: DateTime
  totalCount: Int
  failedCount: Int
  successCount: Int
  logs: TestSessionJobLogCreateManyWithoutTestSessionJobInput
}

"""An edge in a connection."""
type TestSessionJobEdge {
  """The item at the end of the edge."""
  node: TestSessionJob!

  """A cursor for use in pagination."""
  cursor: String!
}

type TestSessionJobLog implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  testSessionJob: TestSessionJob!
  order: Int
  log: String!
}

"""A connection to a list of items."""
type TestSessionJobLogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestSessionJobLogEdge]!
  aggregate: AggregateTestSessionJobLog!
}

input TestSessionJobLogCreateInput {
  order: Int
  log: String!
  testSessionJob: TestSessionJobCreateOneWithoutLogsInput!
}

input TestSessionJobLogCreateManyWithoutTestSessionJobInput {
  create: [TestSessionJobLogCreateWithoutTestSessionJobInput!]
  connect: [TestSessionJobLogWhereUniqueInput!]
}

input TestSessionJobLogCreateWithoutTestSessionJobInput {
  order: Int
  log: String!
}

"""An edge in a connection."""
type TestSessionJobLogEdge {
  """The item at the end of the edge."""
  node: TestSessionJobLog!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TestSessionJobLogOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  order_ASC
  order_DESC
  log_ASC
  log_DESC
}

type TestSessionJobLogPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  order: Int
  log: String!
}

input TestSessionJobLogScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionJobLogScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionJobLogScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionJobLogScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
  log: String

  """All values that are not equal to given value."""
  log_not: String

  """All values that are contained in given list."""
  log_in: [String!]

  """All values that are not contained in given list."""
  log_not_in: [String!]

  """All values less than the given value."""
  log_lt: String

  """All values less than or equal the given value."""
  log_lte: String

  """All values greater than the given value."""
  log_gt: String

  """All values greater than or equal the given value."""
  log_gte: String

  """All values containing the given string."""
  log_contains: String

  """All values not containing the given string."""
  log_not_contains: String

  """All values starting with the given string."""
  log_starts_with: String

  """All values not starting with the given string."""
  log_not_starts_with: String

  """All values ending with the given string."""
  log_ends_with: String

  """All values not ending with the given string."""
  log_not_ends_with: String
}

type TestSessionJobLogSubscriptionPayload {
  mutation: MutationType!
  node: TestSessionJobLog
  updatedFields: [String!]
  previousValues: TestSessionJobLogPreviousValues
}

input TestSessionJobLogSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionJobLogSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionJobLogSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionJobLogSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TestSessionJobLogWhereInput
}

input TestSessionJobLogUpdateInput {
  order: Int
  log: String
  testSessionJob: TestSessionJobUpdateOneRequiredWithoutLogsInput
}

input TestSessionJobLogUpdateManyDataInput {
  order: Int
  log: String
}

input TestSessionJobLogUpdateManyMutationInput {
  order: Int
  log: String
}

input TestSessionJobLogUpdateManyWithoutTestSessionJobInput {
  create: [TestSessionJobLogCreateWithoutTestSessionJobInput!]
  connect: [TestSessionJobLogWhereUniqueInput!]
  set: [TestSessionJobLogWhereUniqueInput!]
  disconnect: [TestSessionJobLogWhereUniqueInput!]
  delete: [TestSessionJobLogWhereUniqueInput!]
  update: [TestSessionJobLogUpdateWithWhereUniqueWithoutTestSessionJobInput!]
  updateMany: [TestSessionJobLogUpdateManyWithWhereNestedInput!]
  deleteMany: [TestSessionJobLogScalarWhereInput!]
  upsert: [TestSessionJobLogUpsertWithWhereUniqueWithoutTestSessionJobInput!]
}

input TestSessionJobLogUpdateManyWithWhereNestedInput {
  where: TestSessionJobLogScalarWhereInput!
  data: TestSessionJobLogUpdateManyDataInput!
}

input TestSessionJobLogUpdateWithoutTestSessionJobDataInput {
  order: Int
  log: String
}

input TestSessionJobLogUpdateWithWhereUniqueWithoutTestSessionJobInput {
  where: TestSessionJobLogWhereUniqueInput!
  data: TestSessionJobLogUpdateWithoutTestSessionJobDataInput!
}

input TestSessionJobLogUpsertWithWhereUniqueWithoutTestSessionJobInput {
  where: TestSessionJobLogWhereUniqueInput!
  update: TestSessionJobLogUpdateWithoutTestSessionJobDataInput!
  create: TestSessionJobLogCreateWithoutTestSessionJobInput!
}

input TestSessionJobLogWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionJobLogWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionJobLogWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionJobLogWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
  log: String

  """All values that are not equal to given value."""
  log_not: String

  """All values that are contained in given list."""
  log_in: [String!]

  """All values that are not contained in given list."""
  log_not_in: [String!]

  """All values less than the given value."""
  log_lt: String

  """All values less than or equal the given value."""
  log_lte: String

  """All values greater than the given value."""
  log_gt: String

  """All values greater than or equal the given value."""
  log_gte: String

  """All values containing the given string."""
  log_contains: String

  """All values not containing the given string."""
  log_not_contains: String

  """All values starting with the given string."""
  log_starts_with: String

  """All values not starting with the given string."""
  log_not_starts_with: String

  """All values ending with the given string."""
  log_ends_with: String

  """All values not ending with the given string."""
  log_not_ends_with: String
  testSessionJob: TestSessionJobWhereInput
}

input TestSessionJobLogWhereUniqueInput {
  id: ID
}

enum TestSessionJobOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  jobId_ASC
  jobId_DESC
  progressPercent_ASC
  progressPercent_DESC
  status_ASC
  status_DESC
  err_ASC
  err_DESC
  started_ASC
  started_DESC
  finished_ASC
  finished_DESC
  totalCount_ASC
  totalCount_DESC
  failedCount_ASC
  failedCount_DESC
  successCount_ASC
  successCount_DESC
}

type TestSessionJobPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  jobId: Int
  progressPercent: Int
  status: TestSessionJobStatus!
  err: String
  started: DateTime
  finished: DateTime
  totalCount: Int
  failedCount: Int
  successCount: Int
}

input TestSessionJobScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionJobScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionJobScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionJobScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  jobId: Int

  """All values that are not equal to given value."""
  jobId_not: Int

  """All values that are contained in given list."""
  jobId_in: [Int!]

  """All values that are not contained in given list."""
  jobId_not_in: [Int!]

  """All values less than the given value."""
  jobId_lt: Int

  """All values less than or equal the given value."""
  jobId_lte: Int

  """All values greater than the given value."""
  jobId_gt: Int

  """All values greater than or equal the given value."""
  jobId_gte: Int
  progressPercent: Int

  """All values that are not equal to given value."""
  progressPercent_not: Int

  """All values that are contained in given list."""
  progressPercent_in: [Int!]

  """All values that are not contained in given list."""
  progressPercent_not_in: [Int!]

  """All values less than the given value."""
  progressPercent_lt: Int

  """All values less than or equal the given value."""
  progressPercent_lte: Int

  """All values greater than the given value."""
  progressPercent_gt: Int

  """All values greater than or equal the given value."""
  progressPercent_gte: Int
  status: TestSessionJobStatus

  """All values that are not equal to given value."""
  status_not: TestSessionJobStatus

  """All values that are contained in given list."""
  status_in: [TestSessionJobStatus!]

  """All values that are not contained in given list."""
  status_not_in: [TestSessionJobStatus!]
  err: String

  """All values that are not equal to given value."""
  err_not: String

  """All values that are contained in given list."""
  err_in: [String!]

  """All values that are not contained in given list."""
  err_not_in: [String!]

  """All values less than the given value."""
  err_lt: String

  """All values less than or equal the given value."""
  err_lte: String

  """All values greater than the given value."""
  err_gt: String

  """All values greater than or equal the given value."""
  err_gte: String

  """All values containing the given string."""
  err_contains: String

  """All values not containing the given string."""
  err_not_contains: String

  """All values starting with the given string."""
  err_starts_with: String

  """All values not starting with the given string."""
  err_not_starts_with: String

  """All values ending with the given string."""
  err_ends_with: String

  """All values not ending with the given string."""
  err_not_ends_with: String
  started: DateTime

  """All values that are not equal to given value."""
  started_not: DateTime

  """All values that are contained in given list."""
  started_in: [DateTime!]

  """All values that are not contained in given list."""
  started_not_in: [DateTime!]

  """All values less than the given value."""
  started_lt: DateTime

  """All values less than or equal the given value."""
  started_lte: DateTime

  """All values greater than the given value."""
  started_gt: DateTime

  """All values greater than or equal the given value."""
  started_gte: DateTime
  finished: DateTime

  """All values that are not equal to given value."""
  finished_not: DateTime

  """All values that are contained in given list."""
  finished_in: [DateTime!]

  """All values that are not contained in given list."""
  finished_not_in: [DateTime!]

  """All values less than the given value."""
  finished_lt: DateTime

  """All values less than or equal the given value."""
  finished_lte: DateTime

  """All values greater than the given value."""
  finished_gt: DateTime

  """All values greater than or equal the given value."""
  finished_gte: DateTime
  totalCount: Int

  """All values that are not equal to given value."""
  totalCount_not: Int

  """All values that are contained in given list."""
  totalCount_in: [Int!]

  """All values that are not contained in given list."""
  totalCount_not_in: [Int!]

  """All values less than the given value."""
  totalCount_lt: Int

  """All values less than or equal the given value."""
  totalCount_lte: Int

  """All values greater than the given value."""
  totalCount_gt: Int

  """All values greater than or equal the given value."""
  totalCount_gte: Int
  failedCount: Int

  """All values that are not equal to given value."""
  failedCount_not: Int

  """All values that are contained in given list."""
  failedCount_in: [Int!]

  """All values that are not contained in given list."""
  failedCount_not_in: [Int!]

  """All values less than the given value."""
  failedCount_lt: Int

  """All values less than or equal the given value."""
  failedCount_lte: Int

  """All values greater than the given value."""
  failedCount_gt: Int

  """All values greater than or equal the given value."""
  failedCount_gte: Int
  successCount: Int

  """All values that are not equal to given value."""
  successCount_not: Int

  """All values that are contained in given list."""
  successCount_in: [Int!]

  """All values that are not contained in given list."""
  successCount_not_in: [Int!]

  """All values less than the given value."""
  successCount_lt: Int

  """All values less than or equal the given value."""
  successCount_lte: Int

  """All values greater than the given value."""
  successCount_gt: Int

  """All values greater than or equal the given value."""
  successCount_gte: Int
}

enum TestSessionJobStatus {
  PENDING
  RUNNING
  READY
  FAILED
}

type TestSessionJobSubscriptionPayload {
  mutation: MutationType!
  node: TestSessionJob
  updatedFields: [String!]
  previousValues: TestSessionJobPreviousValues
}

input TestSessionJobSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionJobSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionJobSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionJobSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TestSessionJobWhereInput
}

input TestSessionJobUpdateInput {
  jobId: Int
  progressPercent: Int
  status: TestSessionJobStatus
  err: String
  started: DateTime
  finished: DateTime
  totalCount: Int
  failedCount: Int
  successCount: Int
  testSession: TestSessionUpdateOneRequiredWithoutJobsInput
  logs: TestSessionJobLogUpdateManyWithoutTestSessionJobInput
}

input TestSessionJobUpdateManyDataInput {
  jobId: Int
  progressPercent: Int
  status: TestSessionJobStatus
  err: String
  started: DateTime
  finished: DateTime
  totalCount: Int
  failedCount: Int
  successCount: Int
}

input TestSessionJobUpdateManyMutationInput {
  jobId: Int
  progressPercent: Int
  status: TestSessionJobStatus
  err: String
  started: DateTime
  finished: DateTime
  totalCount: Int
  failedCount: Int
  successCount: Int
}

input TestSessionJobUpdateManyWithoutTestSessionInput {
  create: [TestSessionJobCreateWithoutTestSessionInput!]
  connect: [TestSessionJobWhereUniqueInput!]
  set: [TestSessionJobWhereUniqueInput!]
  disconnect: [TestSessionJobWhereUniqueInput!]
  delete: [TestSessionJobWhereUniqueInput!]
  update: [TestSessionJobUpdateWithWhereUniqueWithoutTestSessionInput!]
  updateMany: [TestSessionJobUpdateManyWithWhereNestedInput!]
  deleteMany: [TestSessionJobScalarWhereInput!]
  upsert: [TestSessionJobUpsertWithWhereUniqueWithoutTestSessionInput!]
}

input TestSessionJobUpdateManyWithWhereNestedInput {
  where: TestSessionJobScalarWhereInput!
  data: TestSessionJobUpdateManyDataInput!
}

input TestSessionJobUpdateOneRequiredWithoutLogsInput {
  create: TestSessionJobCreateWithoutLogsInput
  connect: TestSessionJobWhereUniqueInput
  update: TestSessionJobUpdateWithoutLogsDataInput
  upsert: TestSessionJobUpsertWithoutLogsInput
}

input TestSessionJobUpdateWithoutLogsDataInput {
  jobId: Int
  progressPercent: Int
  status: TestSessionJobStatus
  err: String
  started: DateTime
  finished: DateTime
  totalCount: Int
  failedCount: Int
  successCount: Int
  testSession: TestSessionUpdateOneRequiredWithoutJobsInput
}

input TestSessionJobUpdateWithoutTestSessionDataInput {
  jobId: Int
  progressPercent: Int
  status: TestSessionJobStatus
  err: String
  started: DateTime
  finished: DateTime
  totalCount: Int
  failedCount: Int
  successCount: Int
  logs: TestSessionJobLogUpdateManyWithoutTestSessionJobInput
}

input TestSessionJobUpdateWithWhereUniqueWithoutTestSessionInput {
  where: TestSessionJobWhereUniqueInput!
  data: TestSessionJobUpdateWithoutTestSessionDataInput!
}

input TestSessionJobUpsertWithoutLogsInput {
  update: TestSessionJobUpdateWithoutLogsDataInput!
  create: TestSessionJobCreateWithoutLogsInput!
}

input TestSessionJobUpsertWithWhereUniqueWithoutTestSessionInput {
  where: TestSessionJobWhereUniqueInput!
  update: TestSessionJobUpdateWithoutTestSessionDataInput!
  create: TestSessionJobCreateWithoutTestSessionInput!
}

input TestSessionJobWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionJobWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionJobWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionJobWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  jobId: Int

  """All values that are not equal to given value."""
  jobId_not: Int

  """All values that are contained in given list."""
  jobId_in: [Int!]

  """All values that are not contained in given list."""
  jobId_not_in: [Int!]

  """All values less than the given value."""
  jobId_lt: Int

  """All values less than or equal the given value."""
  jobId_lte: Int

  """All values greater than the given value."""
  jobId_gt: Int

  """All values greater than or equal the given value."""
  jobId_gte: Int
  progressPercent: Int

  """All values that are not equal to given value."""
  progressPercent_not: Int

  """All values that are contained in given list."""
  progressPercent_in: [Int!]

  """All values that are not contained in given list."""
  progressPercent_not_in: [Int!]

  """All values less than the given value."""
  progressPercent_lt: Int

  """All values less than or equal the given value."""
  progressPercent_lte: Int

  """All values greater than the given value."""
  progressPercent_gt: Int

  """All values greater than or equal the given value."""
  progressPercent_gte: Int
  status: TestSessionJobStatus

  """All values that are not equal to given value."""
  status_not: TestSessionJobStatus

  """All values that are contained in given list."""
  status_in: [TestSessionJobStatus!]

  """All values that are not contained in given list."""
  status_not_in: [TestSessionJobStatus!]
  err: String

  """All values that are not equal to given value."""
  err_not: String

  """All values that are contained in given list."""
  err_in: [String!]

  """All values that are not contained in given list."""
  err_not_in: [String!]

  """All values less than the given value."""
  err_lt: String

  """All values less than or equal the given value."""
  err_lte: String

  """All values greater than the given value."""
  err_gt: String

  """All values greater than or equal the given value."""
  err_gte: String

  """All values containing the given string."""
  err_contains: String

  """All values not containing the given string."""
  err_not_contains: String

  """All values starting with the given string."""
  err_starts_with: String

  """All values not starting with the given string."""
  err_not_starts_with: String

  """All values ending with the given string."""
  err_ends_with: String

  """All values not ending with the given string."""
  err_not_ends_with: String
  started: DateTime

  """All values that are not equal to given value."""
  started_not: DateTime

  """All values that are contained in given list."""
  started_in: [DateTime!]

  """All values that are not contained in given list."""
  started_not_in: [DateTime!]

  """All values less than the given value."""
  started_lt: DateTime

  """All values less than or equal the given value."""
  started_lte: DateTime

  """All values greater than the given value."""
  started_gt: DateTime

  """All values greater than or equal the given value."""
  started_gte: DateTime
  finished: DateTime

  """All values that are not equal to given value."""
  finished_not: DateTime

  """All values that are contained in given list."""
  finished_in: [DateTime!]

  """All values that are not contained in given list."""
  finished_not_in: [DateTime!]

  """All values less than the given value."""
  finished_lt: DateTime

  """All values less than or equal the given value."""
  finished_lte: DateTime

  """All values greater than the given value."""
  finished_gt: DateTime

  """All values greater than or equal the given value."""
  finished_gte: DateTime
  totalCount: Int

  """All values that are not equal to given value."""
  totalCount_not: Int

  """All values that are contained in given list."""
  totalCount_in: [Int!]

  """All values that are not contained in given list."""
  totalCount_not_in: [Int!]

  """All values less than the given value."""
  totalCount_lt: Int

  """All values less than or equal the given value."""
  totalCount_lte: Int

  """All values greater than the given value."""
  totalCount_gt: Int

  """All values greater than or equal the given value."""
  totalCount_gte: Int
  failedCount: Int

  """All values that are not equal to given value."""
  failedCount_not: Int

  """All values that are contained in given list."""
  failedCount_in: [Int!]

  """All values that are not contained in given list."""
  failedCount_not_in: [Int!]

  """All values less than the given value."""
  failedCount_lt: Int

  """All values less than or equal the given value."""
  failedCount_lte: Int

  """All values greater than the given value."""
  failedCount_gt: Int

  """All values greater than or equal the given value."""
  failedCount_gte: Int
  successCount: Int

  """All values that are not equal to given value."""
  successCount_not: Int

  """All values that are contained in given list."""
  successCount_in: [Int!]

  """All values that are not contained in given list."""
  successCount_not_in: [Int!]

  """All values less than the given value."""
  successCount_lt: Int

  """All values less than or equal the given value."""
  successCount_lte: Int

  """All values greater than the given value."""
  successCount_gt: Int

  """All values greater than or equal the given value."""
  successCount_gte: Int
  testSession: TestSessionWhereInput
  logs_every: TestSessionJobLogWhereInput
  logs_some: TestSessionJobLogWhereInput
  logs_none: TestSessionJobLogWhereInput
}

input TestSessionJobWhereUniqueInput {
  id: ID
}

enum TestSessionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  batchCount_ASC
  batchCount_DESC
  bail_ASC
  bail_DESC
  status_ASC
  status_DESC
  securityCheck_ASC
  securityCheck_DESC
  chartData_ASC
  chartData_DESC
}

type TestSessionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  tags: [String!]!
  batchCount: Int
  bail: Boolean
  status: TestSessionStatus!
  securityCheck: Boolean
  chartData: String
}

enum TestSessionStatus {
  PENDING
  RUNNING
  READY
  FAILED
}

type TestSessionSubscriptionPayload {
  mutation: MutationType!
  node: TestSession
  updatedFields: [String!]
  previousValues: TestSessionPreviousValues
}

input TestSessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TestSessionWhereInput
}

type TestSessionTestCaseResult implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  testSession: TestSession!
  testcaseName: String!
  testcaseSource: String!
  success: Boolean!
  err: String
  errDetails: String
  duration: Int
  steps(where: TestSessionTestCaseResultTranscriptWhereInput, orderBy: TestSessionTestCaseResultTranscriptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSessionTestCaseResultTranscript!]
  attachments(where: TestSessionTestCaseResultAttachmentWhereInput, orderBy: TestSessionTestCaseResultAttachmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSessionTestCaseResultAttachment!]
  testSet: TestSet
  testSetScript: TestSetScript
  testSetRepository: TestSetRepository
  testSetFolder: TestSetFolder
  testSetExcel: TestSetExcel
  testSetFilename: String
  deviceSet: DeviceSet
  deviceName: String
}

type TestSessionTestCaseResultAttachment implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  mimeType: String!
  base64: String!
  testSessionTestCaseResult: TestSessionTestCaseResult!
}

"""A connection to a list of items."""
type TestSessionTestCaseResultAttachmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestSessionTestCaseResultAttachmentEdge]!
  aggregate: AggregateTestSessionTestCaseResultAttachment!
}

input TestSessionTestCaseResultAttachmentCreateInput {
  name: String
  mimeType: String!
  base64: String!
  testSessionTestCaseResult: TestSessionTestCaseResultCreateOneWithoutAttachmentsInput!
}

input TestSessionTestCaseResultAttachmentCreateManyWithoutTestSessionTestCaseResultInput {
  create: [TestSessionTestCaseResultAttachmentCreateWithoutTestSessionTestCaseResultInput!]
  connect: [TestSessionTestCaseResultAttachmentWhereUniqueInput!]
}

input TestSessionTestCaseResultAttachmentCreateWithoutTestSessionTestCaseResultInput {
  name: String
  mimeType: String!
  base64: String!
}

"""An edge in a connection."""
type TestSessionTestCaseResultAttachmentEdge {
  """The item at the end of the edge."""
  node: TestSessionTestCaseResultAttachment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TestSessionTestCaseResultAttachmentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  mimeType_ASC
  mimeType_DESC
  base64_ASC
  base64_DESC
}

type TestSessionTestCaseResultAttachmentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  mimeType: String!
  base64: String!
}

input TestSessionTestCaseResultAttachmentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionTestCaseResultAttachmentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionTestCaseResultAttachmentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionTestCaseResultAttachmentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  mimeType: String

  """All values that are not equal to given value."""
  mimeType_not: String

  """All values that are contained in given list."""
  mimeType_in: [String!]

  """All values that are not contained in given list."""
  mimeType_not_in: [String!]

  """All values less than the given value."""
  mimeType_lt: String

  """All values less than or equal the given value."""
  mimeType_lte: String

  """All values greater than the given value."""
  mimeType_gt: String

  """All values greater than or equal the given value."""
  mimeType_gte: String

  """All values containing the given string."""
  mimeType_contains: String

  """All values not containing the given string."""
  mimeType_not_contains: String

  """All values starting with the given string."""
  mimeType_starts_with: String

  """All values not starting with the given string."""
  mimeType_not_starts_with: String

  """All values ending with the given string."""
  mimeType_ends_with: String

  """All values not ending with the given string."""
  mimeType_not_ends_with: String
  base64: String

  """All values that are not equal to given value."""
  base64_not: String

  """All values that are contained in given list."""
  base64_in: [String!]

  """All values that are not contained in given list."""
  base64_not_in: [String!]

  """All values less than the given value."""
  base64_lt: String

  """All values less than or equal the given value."""
  base64_lte: String

  """All values greater than the given value."""
  base64_gt: String

  """All values greater than or equal the given value."""
  base64_gte: String

  """All values containing the given string."""
  base64_contains: String

  """All values not containing the given string."""
  base64_not_contains: String

  """All values starting with the given string."""
  base64_starts_with: String

  """All values not starting with the given string."""
  base64_not_starts_with: String

  """All values ending with the given string."""
  base64_ends_with: String

  """All values not ending with the given string."""
  base64_not_ends_with: String
}

type TestSessionTestCaseResultAttachmentSubscriptionPayload {
  mutation: MutationType!
  node: TestSessionTestCaseResultAttachment
  updatedFields: [String!]
  previousValues: TestSessionTestCaseResultAttachmentPreviousValues
}

input TestSessionTestCaseResultAttachmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionTestCaseResultAttachmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionTestCaseResultAttachmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionTestCaseResultAttachmentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TestSessionTestCaseResultAttachmentWhereInput
}

input TestSessionTestCaseResultAttachmentUpdateInput {
  name: String
  mimeType: String
  base64: String
  testSessionTestCaseResult: TestSessionTestCaseResultUpdateOneRequiredWithoutAttachmentsInput
}

input TestSessionTestCaseResultAttachmentUpdateManyDataInput {
  name: String
  mimeType: String
  base64: String
}

input TestSessionTestCaseResultAttachmentUpdateManyMutationInput {
  name: String
  mimeType: String
  base64: String
}

input TestSessionTestCaseResultAttachmentUpdateManyWithoutTestSessionTestCaseResultInput {
  create: [TestSessionTestCaseResultAttachmentCreateWithoutTestSessionTestCaseResultInput!]
  connect: [TestSessionTestCaseResultAttachmentWhereUniqueInput!]
  set: [TestSessionTestCaseResultAttachmentWhereUniqueInput!]
  disconnect: [TestSessionTestCaseResultAttachmentWhereUniqueInput!]
  delete: [TestSessionTestCaseResultAttachmentWhereUniqueInput!]
  update: [TestSessionTestCaseResultAttachmentUpdateWithWhereUniqueWithoutTestSessionTestCaseResultInput!]
  updateMany: [TestSessionTestCaseResultAttachmentUpdateManyWithWhereNestedInput!]
  deleteMany: [TestSessionTestCaseResultAttachmentScalarWhereInput!]
  upsert: [TestSessionTestCaseResultAttachmentUpsertWithWhereUniqueWithoutTestSessionTestCaseResultInput!]
}

input TestSessionTestCaseResultAttachmentUpdateManyWithWhereNestedInput {
  where: TestSessionTestCaseResultAttachmentScalarWhereInput!
  data: TestSessionTestCaseResultAttachmentUpdateManyDataInput!
}

input TestSessionTestCaseResultAttachmentUpdateWithoutTestSessionTestCaseResultDataInput {
  name: String
  mimeType: String
  base64: String
}

input TestSessionTestCaseResultAttachmentUpdateWithWhereUniqueWithoutTestSessionTestCaseResultInput {
  where: TestSessionTestCaseResultAttachmentWhereUniqueInput!
  data: TestSessionTestCaseResultAttachmentUpdateWithoutTestSessionTestCaseResultDataInput!
}

input TestSessionTestCaseResultAttachmentUpsertWithWhereUniqueWithoutTestSessionTestCaseResultInput {
  where: TestSessionTestCaseResultAttachmentWhereUniqueInput!
  update: TestSessionTestCaseResultAttachmentUpdateWithoutTestSessionTestCaseResultDataInput!
  create: TestSessionTestCaseResultAttachmentCreateWithoutTestSessionTestCaseResultInput!
}

input TestSessionTestCaseResultAttachmentWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionTestCaseResultAttachmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionTestCaseResultAttachmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionTestCaseResultAttachmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  mimeType: String

  """All values that are not equal to given value."""
  mimeType_not: String

  """All values that are contained in given list."""
  mimeType_in: [String!]

  """All values that are not contained in given list."""
  mimeType_not_in: [String!]

  """All values less than the given value."""
  mimeType_lt: String

  """All values less than or equal the given value."""
  mimeType_lte: String

  """All values greater than the given value."""
  mimeType_gt: String

  """All values greater than or equal the given value."""
  mimeType_gte: String

  """All values containing the given string."""
  mimeType_contains: String

  """All values not containing the given string."""
  mimeType_not_contains: String

  """All values starting with the given string."""
  mimeType_starts_with: String

  """All values not starting with the given string."""
  mimeType_not_starts_with: String

  """All values ending with the given string."""
  mimeType_ends_with: String

  """All values not ending with the given string."""
  mimeType_not_ends_with: String
  base64: String

  """All values that are not equal to given value."""
  base64_not: String

  """All values that are contained in given list."""
  base64_in: [String!]

  """All values that are not contained in given list."""
  base64_not_in: [String!]

  """All values less than the given value."""
  base64_lt: String

  """All values less than or equal the given value."""
  base64_lte: String

  """All values greater than the given value."""
  base64_gt: String

  """All values greater than or equal the given value."""
  base64_gte: String

  """All values containing the given string."""
  base64_contains: String

  """All values not containing the given string."""
  base64_not_contains: String

  """All values starting with the given string."""
  base64_starts_with: String

  """All values not starting with the given string."""
  base64_not_starts_with: String

  """All values ending with the given string."""
  base64_ends_with: String

  """All values not ending with the given string."""
  base64_not_ends_with: String
  testSessionTestCaseResult: TestSessionTestCaseResultWhereInput
}

input TestSessionTestCaseResultAttachmentWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type TestSessionTestCaseResultConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestSessionTestCaseResultEdge]!
  aggregate: AggregateTestSessionTestCaseResult!
}

input TestSessionTestCaseResultCreateInput {
  testcaseName: String!
  testcaseSource: String!
  success: Boolean!
  err: String
  errDetails: String
  duration: Int
  testSetFilename: String
  deviceName: String
  testSession: TestSessionCreateOneWithoutResultsInput!
  steps: TestSessionTestCaseResultTranscriptCreateManyInput
  attachments: TestSessionTestCaseResultAttachmentCreateManyWithoutTestSessionTestCaseResultInput
  testSet: TestSetCreateOneInput
  testSetScript: TestSetScriptCreateOneInput
  testSetRepository: TestSetRepositoryCreateOneInput
  testSetFolder: TestSetFolderCreateOneInput
  testSetExcel: TestSetExcelCreateOneInput
  deviceSet: DeviceSetCreateOneInput
}

input TestSessionTestCaseResultCreateManyWithoutTestSessionInput {
  create: [TestSessionTestCaseResultCreateWithoutTestSessionInput!]
  connect: [TestSessionTestCaseResultWhereUniqueInput!]
}

input TestSessionTestCaseResultCreateOneWithoutAttachmentsInput {
  create: TestSessionTestCaseResultCreateWithoutAttachmentsInput
  connect: TestSessionTestCaseResultWhereUniqueInput
}

input TestSessionTestCaseResultCreateWithoutAttachmentsInput {
  testcaseName: String!
  testcaseSource: String!
  success: Boolean!
  err: String
  errDetails: String
  duration: Int
  testSetFilename: String
  deviceName: String
  testSession: TestSessionCreateOneWithoutResultsInput!
  steps: TestSessionTestCaseResultTranscriptCreateManyInput
  testSet: TestSetCreateOneInput
  testSetScript: TestSetScriptCreateOneInput
  testSetRepository: TestSetRepositoryCreateOneInput
  testSetFolder: TestSetFolderCreateOneInput
  testSetExcel: TestSetExcelCreateOneInput
  deviceSet: DeviceSetCreateOneInput
}

input TestSessionTestCaseResultCreateWithoutTestSessionInput {
  testcaseName: String!
  testcaseSource: String!
  success: Boolean!
  err: String
  errDetails: String
  duration: Int
  testSetFilename: String
  deviceName: String
  steps: TestSessionTestCaseResultTranscriptCreateManyInput
  attachments: TestSessionTestCaseResultAttachmentCreateManyWithoutTestSessionTestCaseResultInput
  testSet: TestSetCreateOneInput
  testSetScript: TestSetScriptCreateOneInput
  testSetRepository: TestSetRepositoryCreateOneInput
  testSetFolder: TestSetFolderCreateOneInput
  testSetExcel: TestSetExcelCreateOneInput
  deviceSet: DeviceSetCreateOneInput
}

"""An edge in a connection."""
type TestSessionTestCaseResultEdge {
  """The item at the end of the edge."""
  node: TestSessionTestCaseResult!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TestSessionTestCaseResultOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  testcaseName_ASC
  testcaseName_DESC
  testcaseSource_ASC
  testcaseSource_DESC
  success_ASC
  success_DESC
  err_ASC
  err_DESC
  errDetails_ASC
  errDetails_DESC
  duration_ASC
  duration_DESC
  testSetFilename_ASC
  testSetFilename_DESC
  deviceName_ASC
  deviceName_DESC
}

type TestSessionTestCaseResultPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  testcaseName: String!
  testcaseSource: String!
  success: Boolean!
  err: String
  errDetails: String
  duration: Int
  testSetFilename: String
  deviceName: String
}

input TestSessionTestCaseResultScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionTestCaseResultScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionTestCaseResultScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionTestCaseResultScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  testcaseName: String

  """All values that are not equal to given value."""
  testcaseName_not: String

  """All values that are contained in given list."""
  testcaseName_in: [String!]

  """All values that are not contained in given list."""
  testcaseName_not_in: [String!]

  """All values less than the given value."""
  testcaseName_lt: String

  """All values less than or equal the given value."""
  testcaseName_lte: String

  """All values greater than the given value."""
  testcaseName_gt: String

  """All values greater than or equal the given value."""
  testcaseName_gte: String

  """All values containing the given string."""
  testcaseName_contains: String

  """All values not containing the given string."""
  testcaseName_not_contains: String

  """All values starting with the given string."""
  testcaseName_starts_with: String

  """All values not starting with the given string."""
  testcaseName_not_starts_with: String

  """All values ending with the given string."""
  testcaseName_ends_with: String

  """All values not ending with the given string."""
  testcaseName_not_ends_with: String
  testcaseSource: String

  """All values that are not equal to given value."""
  testcaseSource_not: String

  """All values that are contained in given list."""
  testcaseSource_in: [String!]

  """All values that are not contained in given list."""
  testcaseSource_not_in: [String!]

  """All values less than the given value."""
  testcaseSource_lt: String

  """All values less than or equal the given value."""
  testcaseSource_lte: String

  """All values greater than the given value."""
  testcaseSource_gt: String

  """All values greater than or equal the given value."""
  testcaseSource_gte: String

  """All values containing the given string."""
  testcaseSource_contains: String

  """All values not containing the given string."""
  testcaseSource_not_contains: String

  """All values starting with the given string."""
  testcaseSource_starts_with: String

  """All values not starting with the given string."""
  testcaseSource_not_starts_with: String

  """All values ending with the given string."""
  testcaseSource_ends_with: String

  """All values not ending with the given string."""
  testcaseSource_not_ends_with: String
  success: Boolean

  """All values that are not equal to given value."""
  success_not: Boolean
  err: String

  """All values that are not equal to given value."""
  err_not: String

  """All values that are contained in given list."""
  err_in: [String!]

  """All values that are not contained in given list."""
  err_not_in: [String!]

  """All values less than the given value."""
  err_lt: String

  """All values less than or equal the given value."""
  err_lte: String

  """All values greater than the given value."""
  err_gt: String

  """All values greater than or equal the given value."""
  err_gte: String

  """All values containing the given string."""
  err_contains: String

  """All values not containing the given string."""
  err_not_contains: String

  """All values starting with the given string."""
  err_starts_with: String

  """All values not starting with the given string."""
  err_not_starts_with: String

  """All values ending with the given string."""
  err_ends_with: String

  """All values not ending with the given string."""
  err_not_ends_with: String
  errDetails: String

  """All values that are not equal to given value."""
  errDetails_not: String

  """All values that are contained in given list."""
  errDetails_in: [String!]

  """All values that are not contained in given list."""
  errDetails_not_in: [String!]

  """All values less than the given value."""
  errDetails_lt: String

  """All values less than or equal the given value."""
  errDetails_lte: String

  """All values greater than the given value."""
  errDetails_gt: String

  """All values greater than or equal the given value."""
  errDetails_gte: String

  """All values containing the given string."""
  errDetails_contains: String

  """All values not containing the given string."""
  errDetails_not_contains: String

  """All values starting with the given string."""
  errDetails_starts_with: String

  """All values not starting with the given string."""
  errDetails_not_starts_with: String

  """All values ending with the given string."""
  errDetails_ends_with: String

  """All values not ending with the given string."""
  errDetails_not_ends_with: String
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  testSetFilename: String

  """All values that are not equal to given value."""
  testSetFilename_not: String

  """All values that are contained in given list."""
  testSetFilename_in: [String!]

  """All values that are not contained in given list."""
  testSetFilename_not_in: [String!]

  """All values less than the given value."""
  testSetFilename_lt: String

  """All values less than or equal the given value."""
  testSetFilename_lte: String

  """All values greater than the given value."""
  testSetFilename_gt: String

  """All values greater than or equal the given value."""
  testSetFilename_gte: String

  """All values containing the given string."""
  testSetFilename_contains: String

  """All values not containing the given string."""
  testSetFilename_not_contains: String

  """All values starting with the given string."""
  testSetFilename_starts_with: String

  """All values not starting with the given string."""
  testSetFilename_not_starts_with: String

  """All values ending with the given string."""
  testSetFilename_ends_with: String

  """All values not ending with the given string."""
  testSetFilename_not_ends_with: String
  deviceName: String

  """All values that are not equal to given value."""
  deviceName_not: String

  """All values that are contained in given list."""
  deviceName_in: [String!]

  """All values that are not contained in given list."""
  deviceName_not_in: [String!]

  """All values less than the given value."""
  deviceName_lt: String

  """All values less than or equal the given value."""
  deviceName_lte: String

  """All values greater than the given value."""
  deviceName_gt: String

  """All values greater than or equal the given value."""
  deviceName_gte: String

  """All values containing the given string."""
  deviceName_contains: String

  """All values not containing the given string."""
  deviceName_not_contains: String

  """All values starting with the given string."""
  deviceName_starts_with: String

  """All values not starting with the given string."""
  deviceName_not_starts_with: String

  """All values ending with the given string."""
  deviceName_ends_with: String

  """All values not ending with the given string."""
  deviceName_not_ends_with: String
}

type TestSessionTestCaseResultSubscriptionPayload {
  mutation: MutationType!
  node: TestSessionTestCaseResult
  updatedFields: [String!]
  previousValues: TestSessionTestCaseResultPreviousValues
}

input TestSessionTestCaseResultSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionTestCaseResultSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionTestCaseResultSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionTestCaseResultSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TestSessionTestCaseResultWhereInput
}

type TestSessionTestCaseResultTranscript implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  step: Int!
  sender: String!
  expected: String
  not: Boolean
  actual: String
  stepDuration: Int
  botDuration: Int
  err: String
  errDetails: String
}

"""A connection to a list of items."""
type TestSessionTestCaseResultTranscriptConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestSessionTestCaseResultTranscriptEdge]!
  aggregate: AggregateTestSessionTestCaseResultTranscript!
}

input TestSessionTestCaseResultTranscriptCreateInput {
  step: Int!
  sender: String!
  expected: String
  not: Boolean
  actual: String
  stepDuration: Int
  botDuration: Int
  err: String
  errDetails: String
}

input TestSessionTestCaseResultTranscriptCreateManyInput {
  create: [TestSessionTestCaseResultTranscriptCreateInput!]
  connect: [TestSessionTestCaseResultTranscriptWhereUniqueInput!]
}

"""An edge in a connection."""
type TestSessionTestCaseResultTranscriptEdge {
  """The item at the end of the edge."""
  node: TestSessionTestCaseResultTranscript!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TestSessionTestCaseResultTranscriptOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  step_ASC
  step_DESC
  sender_ASC
  sender_DESC
  expected_ASC
  expected_DESC
  not_ASC
  not_DESC
  actual_ASC
  actual_DESC
  stepDuration_ASC
  stepDuration_DESC
  botDuration_ASC
  botDuration_DESC
  err_ASC
  err_DESC
  errDetails_ASC
  errDetails_DESC
}

type TestSessionTestCaseResultTranscriptPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  step: Int!
  sender: String!
  expected: String
  not: Boolean
  actual: String
  stepDuration: Int
  botDuration: Int
  err: String
  errDetails: String
}

input TestSessionTestCaseResultTranscriptScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionTestCaseResultTranscriptScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionTestCaseResultTranscriptScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionTestCaseResultTranscriptScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  step: Int

  """All values that are not equal to given value."""
  step_not: Int

  """All values that are contained in given list."""
  step_in: [Int!]

  """All values that are not contained in given list."""
  step_not_in: [Int!]

  """All values less than the given value."""
  step_lt: Int

  """All values less than or equal the given value."""
  step_lte: Int

  """All values greater than the given value."""
  step_gt: Int

  """All values greater than or equal the given value."""
  step_gte: Int
  sender: String

  """All values that are not equal to given value."""
  sender_not: String

  """All values that are contained in given list."""
  sender_in: [String!]

  """All values that are not contained in given list."""
  sender_not_in: [String!]

  """All values less than the given value."""
  sender_lt: String

  """All values less than or equal the given value."""
  sender_lte: String

  """All values greater than the given value."""
  sender_gt: String

  """All values greater than or equal the given value."""
  sender_gte: String

  """All values containing the given string."""
  sender_contains: String

  """All values not containing the given string."""
  sender_not_contains: String

  """All values starting with the given string."""
  sender_starts_with: String

  """All values not starting with the given string."""
  sender_not_starts_with: String

  """All values ending with the given string."""
  sender_ends_with: String

  """All values not ending with the given string."""
  sender_not_ends_with: String
  expected: String

  """All values that are not equal to given value."""
  expected_not: String

  """All values that are contained in given list."""
  expected_in: [String!]

  """All values that are not contained in given list."""
  expected_not_in: [String!]

  """All values less than the given value."""
  expected_lt: String

  """All values less than or equal the given value."""
  expected_lte: String

  """All values greater than the given value."""
  expected_gt: String

  """All values greater than or equal the given value."""
  expected_gte: String

  """All values containing the given string."""
  expected_contains: String

  """All values not containing the given string."""
  expected_not_contains: String

  """All values starting with the given string."""
  expected_starts_with: String

  """All values not starting with the given string."""
  expected_not_starts_with: String

  """All values ending with the given string."""
  expected_ends_with: String

  """All values not ending with the given string."""
  expected_not_ends_with: String
  not: Boolean

  """All values that are not equal to given value."""
  not_not: Boolean
  actual: String

  """All values that are not equal to given value."""
  actual_not: String

  """All values that are contained in given list."""
  actual_in: [String!]

  """All values that are not contained in given list."""
  actual_not_in: [String!]

  """All values less than the given value."""
  actual_lt: String

  """All values less than or equal the given value."""
  actual_lte: String

  """All values greater than the given value."""
  actual_gt: String

  """All values greater than or equal the given value."""
  actual_gte: String

  """All values containing the given string."""
  actual_contains: String

  """All values not containing the given string."""
  actual_not_contains: String

  """All values starting with the given string."""
  actual_starts_with: String

  """All values not starting with the given string."""
  actual_not_starts_with: String

  """All values ending with the given string."""
  actual_ends_with: String

  """All values not ending with the given string."""
  actual_not_ends_with: String
  stepDuration: Int

  """All values that are not equal to given value."""
  stepDuration_not: Int

  """All values that are contained in given list."""
  stepDuration_in: [Int!]

  """All values that are not contained in given list."""
  stepDuration_not_in: [Int!]

  """All values less than the given value."""
  stepDuration_lt: Int

  """All values less than or equal the given value."""
  stepDuration_lte: Int

  """All values greater than the given value."""
  stepDuration_gt: Int

  """All values greater than or equal the given value."""
  stepDuration_gte: Int
  botDuration: Int

  """All values that are not equal to given value."""
  botDuration_not: Int

  """All values that are contained in given list."""
  botDuration_in: [Int!]

  """All values that are not contained in given list."""
  botDuration_not_in: [Int!]

  """All values less than the given value."""
  botDuration_lt: Int

  """All values less than or equal the given value."""
  botDuration_lte: Int

  """All values greater than the given value."""
  botDuration_gt: Int

  """All values greater than or equal the given value."""
  botDuration_gte: Int
  err: String

  """All values that are not equal to given value."""
  err_not: String

  """All values that are contained in given list."""
  err_in: [String!]

  """All values that are not contained in given list."""
  err_not_in: [String!]

  """All values less than the given value."""
  err_lt: String

  """All values less than or equal the given value."""
  err_lte: String

  """All values greater than the given value."""
  err_gt: String

  """All values greater than or equal the given value."""
  err_gte: String

  """All values containing the given string."""
  err_contains: String

  """All values not containing the given string."""
  err_not_contains: String

  """All values starting with the given string."""
  err_starts_with: String

  """All values not starting with the given string."""
  err_not_starts_with: String

  """All values ending with the given string."""
  err_ends_with: String

  """All values not ending with the given string."""
  err_not_ends_with: String
  errDetails: String

  """All values that are not equal to given value."""
  errDetails_not: String

  """All values that are contained in given list."""
  errDetails_in: [String!]

  """All values that are not contained in given list."""
  errDetails_not_in: [String!]

  """All values less than the given value."""
  errDetails_lt: String

  """All values less than or equal the given value."""
  errDetails_lte: String

  """All values greater than the given value."""
  errDetails_gt: String

  """All values greater than or equal the given value."""
  errDetails_gte: String

  """All values containing the given string."""
  errDetails_contains: String

  """All values not containing the given string."""
  errDetails_not_contains: String

  """All values starting with the given string."""
  errDetails_starts_with: String

  """All values not starting with the given string."""
  errDetails_not_starts_with: String

  """All values ending with the given string."""
  errDetails_ends_with: String

  """All values not ending with the given string."""
  errDetails_not_ends_with: String
}

type TestSessionTestCaseResultTranscriptSubscriptionPayload {
  mutation: MutationType!
  node: TestSessionTestCaseResultTranscript
  updatedFields: [String!]
  previousValues: TestSessionTestCaseResultTranscriptPreviousValues
}

input TestSessionTestCaseResultTranscriptSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionTestCaseResultTranscriptSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionTestCaseResultTranscriptSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionTestCaseResultTranscriptSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TestSessionTestCaseResultTranscriptWhereInput
}

input TestSessionTestCaseResultTranscriptUpdateDataInput {
  step: Int
  sender: String
  expected: String
  not: Boolean
  actual: String
  stepDuration: Int
  botDuration: Int
  err: String
  errDetails: String
}

input TestSessionTestCaseResultTranscriptUpdateInput {
  step: Int
  sender: String
  expected: String
  not: Boolean
  actual: String
  stepDuration: Int
  botDuration: Int
  err: String
  errDetails: String
}

input TestSessionTestCaseResultTranscriptUpdateManyDataInput {
  step: Int
  sender: String
  expected: String
  not: Boolean
  actual: String
  stepDuration: Int
  botDuration: Int
  err: String
  errDetails: String
}

input TestSessionTestCaseResultTranscriptUpdateManyInput {
  create: [TestSessionTestCaseResultTranscriptCreateInput!]
  connect: [TestSessionTestCaseResultTranscriptWhereUniqueInput!]
  set: [TestSessionTestCaseResultTranscriptWhereUniqueInput!]
  disconnect: [TestSessionTestCaseResultTranscriptWhereUniqueInput!]
  delete: [TestSessionTestCaseResultTranscriptWhereUniqueInput!]
  update: [TestSessionTestCaseResultTranscriptUpdateWithWhereUniqueNestedInput!]
  updateMany: [TestSessionTestCaseResultTranscriptUpdateManyWithWhereNestedInput!]
  deleteMany: [TestSessionTestCaseResultTranscriptScalarWhereInput!]
  upsert: [TestSessionTestCaseResultTranscriptUpsertWithWhereUniqueNestedInput!]
}

input TestSessionTestCaseResultTranscriptUpdateManyMutationInput {
  step: Int
  sender: String
  expected: String
  not: Boolean
  actual: String
  stepDuration: Int
  botDuration: Int
  err: String
  errDetails: String
}

input TestSessionTestCaseResultTranscriptUpdateManyWithWhereNestedInput {
  where: TestSessionTestCaseResultTranscriptScalarWhereInput!
  data: TestSessionTestCaseResultTranscriptUpdateManyDataInput!
}

input TestSessionTestCaseResultTranscriptUpdateWithWhereUniqueNestedInput {
  where: TestSessionTestCaseResultTranscriptWhereUniqueInput!
  data: TestSessionTestCaseResultTranscriptUpdateDataInput!
}

input TestSessionTestCaseResultTranscriptUpsertWithWhereUniqueNestedInput {
  where: TestSessionTestCaseResultTranscriptWhereUniqueInput!
  update: TestSessionTestCaseResultTranscriptUpdateDataInput!
  create: TestSessionTestCaseResultTranscriptCreateInput!
}

input TestSessionTestCaseResultTranscriptWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionTestCaseResultTranscriptWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionTestCaseResultTranscriptWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionTestCaseResultTranscriptWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  step: Int

  """All values that are not equal to given value."""
  step_not: Int

  """All values that are contained in given list."""
  step_in: [Int!]

  """All values that are not contained in given list."""
  step_not_in: [Int!]

  """All values less than the given value."""
  step_lt: Int

  """All values less than or equal the given value."""
  step_lte: Int

  """All values greater than the given value."""
  step_gt: Int

  """All values greater than or equal the given value."""
  step_gte: Int
  sender: String

  """All values that are not equal to given value."""
  sender_not: String

  """All values that are contained in given list."""
  sender_in: [String!]

  """All values that are not contained in given list."""
  sender_not_in: [String!]

  """All values less than the given value."""
  sender_lt: String

  """All values less than or equal the given value."""
  sender_lte: String

  """All values greater than the given value."""
  sender_gt: String

  """All values greater than or equal the given value."""
  sender_gte: String

  """All values containing the given string."""
  sender_contains: String

  """All values not containing the given string."""
  sender_not_contains: String

  """All values starting with the given string."""
  sender_starts_with: String

  """All values not starting with the given string."""
  sender_not_starts_with: String

  """All values ending with the given string."""
  sender_ends_with: String

  """All values not ending with the given string."""
  sender_not_ends_with: String
  expected: String

  """All values that are not equal to given value."""
  expected_not: String

  """All values that are contained in given list."""
  expected_in: [String!]

  """All values that are not contained in given list."""
  expected_not_in: [String!]

  """All values less than the given value."""
  expected_lt: String

  """All values less than or equal the given value."""
  expected_lte: String

  """All values greater than the given value."""
  expected_gt: String

  """All values greater than or equal the given value."""
  expected_gte: String

  """All values containing the given string."""
  expected_contains: String

  """All values not containing the given string."""
  expected_not_contains: String

  """All values starting with the given string."""
  expected_starts_with: String

  """All values not starting with the given string."""
  expected_not_starts_with: String

  """All values ending with the given string."""
  expected_ends_with: String

  """All values not ending with the given string."""
  expected_not_ends_with: String
  not: Boolean

  """All values that are not equal to given value."""
  not_not: Boolean
  actual: String

  """All values that are not equal to given value."""
  actual_not: String

  """All values that are contained in given list."""
  actual_in: [String!]

  """All values that are not contained in given list."""
  actual_not_in: [String!]

  """All values less than the given value."""
  actual_lt: String

  """All values less than or equal the given value."""
  actual_lte: String

  """All values greater than the given value."""
  actual_gt: String

  """All values greater than or equal the given value."""
  actual_gte: String

  """All values containing the given string."""
  actual_contains: String

  """All values not containing the given string."""
  actual_not_contains: String

  """All values starting with the given string."""
  actual_starts_with: String

  """All values not starting with the given string."""
  actual_not_starts_with: String

  """All values ending with the given string."""
  actual_ends_with: String

  """All values not ending with the given string."""
  actual_not_ends_with: String
  stepDuration: Int

  """All values that are not equal to given value."""
  stepDuration_not: Int

  """All values that are contained in given list."""
  stepDuration_in: [Int!]

  """All values that are not contained in given list."""
  stepDuration_not_in: [Int!]

  """All values less than the given value."""
  stepDuration_lt: Int

  """All values less than or equal the given value."""
  stepDuration_lte: Int

  """All values greater than the given value."""
  stepDuration_gt: Int

  """All values greater than or equal the given value."""
  stepDuration_gte: Int
  botDuration: Int

  """All values that are not equal to given value."""
  botDuration_not: Int

  """All values that are contained in given list."""
  botDuration_in: [Int!]

  """All values that are not contained in given list."""
  botDuration_not_in: [Int!]

  """All values less than the given value."""
  botDuration_lt: Int

  """All values less than or equal the given value."""
  botDuration_lte: Int

  """All values greater than the given value."""
  botDuration_gt: Int

  """All values greater than or equal the given value."""
  botDuration_gte: Int
  err: String

  """All values that are not equal to given value."""
  err_not: String

  """All values that are contained in given list."""
  err_in: [String!]

  """All values that are not contained in given list."""
  err_not_in: [String!]

  """All values less than the given value."""
  err_lt: String

  """All values less than or equal the given value."""
  err_lte: String

  """All values greater than the given value."""
  err_gt: String

  """All values greater than or equal the given value."""
  err_gte: String

  """All values containing the given string."""
  err_contains: String

  """All values not containing the given string."""
  err_not_contains: String

  """All values starting with the given string."""
  err_starts_with: String

  """All values not starting with the given string."""
  err_not_starts_with: String

  """All values ending with the given string."""
  err_ends_with: String

  """All values not ending with the given string."""
  err_not_ends_with: String
  errDetails: String

  """All values that are not equal to given value."""
  errDetails_not: String

  """All values that are contained in given list."""
  errDetails_in: [String!]

  """All values that are not contained in given list."""
  errDetails_not_in: [String!]

  """All values less than the given value."""
  errDetails_lt: String

  """All values less than or equal the given value."""
  errDetails_lte: String

  """All values greater than the given value."""
  errDetails_gt: String

  """All values greater than or equal the given value."""
  errDetails_gte: String

  """All values containing the given string."""
  errDetails_contains: String

  """All values not containing the given string."""
  errDetails_not_contains: String

  """All values starting with the given string."""
  errDetails_starts_with: String

  """All values not starting with the given string."""
  errDetails_not_starts_with: String

  """All values ending with the given string."""
  errDetails_ends_with: String

  """All values not ending with the given string."""
  errDetails_not_ends_with: String
}

input TestSessionTestCaseResultTranscriptWhereUniqueInput {
  id: ID
}

input TestSessionTestCaseResultUpdateInput {
  testcaseName: String
  testcaseSource: String
  success: Boolean
  err: String
  errDetails: String
  duration: Int
  testSetFilename: String
  deviceName: String
  testSession: TestSessionUpdateOneRequiredWithoutResultsInput
  steps: TestSessionTestCaseResultTranscriptUpdateManyInput
  attachments: TestSessionTestCaseResultAttachmentUpdateManyWithoutTestSessionTestCaseResultInput
  testSet: TestSetUpdateOneInput
  testSetScript: TestSetScriptUpdateOneInput
  testSetRepository: TestSetRepositoryUpdateOneInput
  testSetFolder: TestSetFolderUpdateOneInput
  testSetExcel: TestSetExcelUpdateOneInput
  deviceSet: DeviceSetUpdateOneInput
}

input TestSessionTestCaseResultUpdateManyDataInput {
  testcaseName: String
  testcaseSource: String
  success: Boolean
  err: String
  errDetails: String
  duration: Int
  testSetFilename: String
  deviceName: String
}

input TestSessionTestCaseResultUpdateManyMutationInput {
  testcaseName: String
  testcaseSource: String
  success: Boolean
  err: String
  errDetails: String
  duration: Int
  testSetFilename: String
  deviceName: String
}

input TestSessionTestCaseResultUpdateManyWithoutTestSessionInput {
  create: [TestSessionTestCaseResultCreateWithoutTestSessionInput!]
  connect: [TestSessionTestCaseResultWhereUniqueInput!]
  set: [TestSessionTestCaseResultWhereUniqueInput!]
  disconnect: [TestSessionTestCaseResultWhereUniqueInput!]
  delete: [TestSessionTestCaseResultWhereUniqueInput!]
  update: [TestSessionTestCaseResultUpdateWithWhereUniqueWithoutTestSessionInput!]
  updateMany: [TestSessionTestCaseResultUpdateManyWithWhereNestedInput!]
  deleteMany: [TestSessionTestCaseResultScalarWhereInput!]
  upsert: [TestSessionTestCaseResultUpsertWithWhereUniqueWithoutTestSessionInput!]
}

input TestSessionTestCaseResultUpdateManyWithWhereNestedInput {
  where: TestSessionTestCaseResultScalarWhereInput!
  data: TestSessionTestCaseResultUpdateManyDataInput!
}

input TestSessionTestCaseResultUpdateOneRequiredWithoutAttachmentsInput {
  create: TestSessionTestCaseResultCreateWithoutAttachmentsInput
  connect: TestSessionTestCaseResultWhereUniqueInput
  update: TestSessionTestCaseResultUpdateWithoutAttachmentsDataInput
  upsert: TestSessionTestCaseResultUpsertWithoutAttachmentsInput
}

input TestSessionTestCaseResultUpdateWithoutAttachmentsDataInput {
  testcaseName: String
  testcaseSource: String
  success: Boolean
  err: String
  errDetails: String
  duration: Int
  testSetFilename: String
  deviceName: String
  testSession: TestSessionUpdateOneRequiredWithoutResultsInput
  steps: TestSessionTestCaseResultTranscriptUpdateManyInput
  testSet: TestSetUpdateOneInput
  testSetScript: TestSetScriptUpdateOneInput
  testSetRepository: TestSetRepositoryUpdateOneInput
  testSetFolder: TestSetFolderUpdateOneInput
  testSetExcel: TestSetExcelUpdateOneInput
  deviceSet: DeviceSetUpdateOneInput
}

input TestSessionTestCaseResultUpdateWithoutTestSessionDataInput {
  testcaseName: String
  testcaseSource: String
  success: Boolean
  err: String
  errDetails: String
  duration: Int
  testSetFilename: String
  deviceName: String
  steps: TestSessionTestCaseResultTranscriptUpdateManyInput
  attachments: TestSessionTestCaseResultAttachmentUpdateManyWithoutTestSessionTestCaseResultInput
  testSet: TestSetUpdateOneInput
  testSetScript: TestSetScriptUpdateOneInput
  testSetRepository: TestSetRepositoryUpdateOneInput
  testSetFolder: TestSetFolderUpdateOneInput
  testSetExcel: TestSetExcelUpdateOneInput
  deviceSet: DeviceSetUpdateOneInput
}

input TestSessionTestCaseResultUpdateWithWhereUniqueWithoutTestSessionInput {
  where: TestSessionTestCaseResultWhereUniqueInput!
  data: TestSessionTestCaseResultUpdateWithoutTestSessionDataInput!
}

input TestSessionTestCaseResultUpsertWithoutAttachmentsInput {
  update: TestSessionTestCaseResultUpdateWithoutAttachmentsDataInput!
  create: TestSessionTestCaseResultCreateWithoutAttachmentsInput!
}

input TestSessionTestCaseResultUpsertWithWhereUniqueWithoutTestSessionInput {
  where: TestSessionTestCaseResultWhereUniqueInput!
  update: TestSessionTestCaseResultUpdateWithoutTestSessionDataInput!
  create: TestSessionTestCaseResultCreateWithoutTestSessionInput!
}

input TestSessionTestCaseResultWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionTestCaseResultWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionTestCaseResultWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionTestCaseResultWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  testcaseName: String

  """All values that are not equal to given value."""
  testcaseName_not: String

  """All values that are contained in given list."""
  testcaseName_in: [String!]

  """All values that are not contained in given list."""
  testcaseName_not_in: [String!]

  """All values less than the given value."""
  testcaseName_lt: String

  """All values less than or equal the given value."""
  testcaseName_lte: String

  """All values greater than the given value."""
  testcaseName_gt: String

  """All values greater than or equal the given value."""
  testcaseName_gte: String

  """All values containing the given string."""
  testcaseName_contains: String

  """All values not containing the given string."""
  testcaseName_not_contains: String

  """All values starting with the given string."""
  testcaseName_starts_with: String

  """All values not starting with the given string."""
  testcaseName_not_starts_with: String

  """All values ending with the given string."""
  testcaseName_ends_with: String

  """All values not ending with the given string."""
  testcaseName_not_ends_with: String
  testcaseSource: String

  """All values that are not equal to given value."""
  testcaseSource_not: String

  """All values that are contained in given list."""
  testcaseSource_in: [String!]

  """All values that are not contained in given list."""
  testcaseSource_not_in: [String!]

  """All values less than the given value."""
  testcaseSource_lt: String

  """All values less than or equal the given value."""
  testcaseSource_lte: String

  """All values greater than the given value."""
  testcaseSource_gt: String

  """All values greater than or equal the given value."""
  testcaseSource_gte: String

  """All values containing the given string."""
  testcaseSource_contains: String

  """All values not containing the given string."""
  testcaseSource_not_contains: String

  """All values starting with the given string."""
  testcaseSource_starts_with: String

  """All values not starting with the given string."""
  testcaseSource_not_starts_with: String

  """All values ending with the given string."""
  testcaseSource_ends_with: String

  """All values not ending with the given string."""
  testcaseSource_not_ends_with: String
  success: Boolean

  """All values that are not equal to given value."""
  success_not: Boolean
  err: String

  """All values that are not equal to given value."""
  err_not: String

  """All values that are contained in given list."""
  err_in: [String!]

  """All values that are not contained in given list."""
  err_not_in: [String!]

  """All values less than the given value."""
  err_lt: String

  """All values less than or equal the given value."""
  err_lte: String

  """All values greater than the given value."""
  err_gt: String

  """All values greater than or equal the given value."""
  err_gte: String

  """All values containing the given string."""
  err_contains: String

  """All values not containing the given string."""
  err_not_contains: String

  """All values starting with the given string."""
  err_starts_with: String

  """All values not starting with the given string."""
  err_not_starts_with: String

  """All values ending with the given string."""
  err_ends_with: String

  """All values not ending with the given string."""
  err_not_ends_with: String
  errDetails: String

  """All values that are not equal to given value."""
  errDetails_not: String

  """All values that are contained in given list."""
  errDetails_in: [String!]

  """All values that are not contained in given list."""
  errDetails_not_in: [String!]

  """All values less than the given value."""
  errDetails_lt: String

  """All values less than or equal the given value."""
  errDetails_lte: String

  """All values greater than the given value."""
  errDetails_gt: String

  """All values greater than or equal the given value."""
  errDetails_gte: String

  """All values containing the given string."""
  errDetails_contains: String

  """All values not containing the given string."""
  errDetails_not_contains: String

  """All values starting with the given string."""
  errDetails_starts_with: String

  """All values not starting with the given string."""
  errDetails_not_starts_with: String

  """All values ending with the given string."""
  errDetails_ends_with: String

  """All values not ending with the given string."""
  errDetails_not_ends_with: String
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  testSetFilename: String

  """All values that are not equal to given value."""
  testSetFilename_not: String

  """All values that are contained in given list."""
  testSetFilename_in: [String!]

  """All values that are not contained in given list."""
  testSetFilename_not_in: [String!]

  """All values less than the given value."""
  testSetFilename_lt: String

  """All values less than or equal the given value."""
  testSetFilename_lte: String

  """All values greater than the given value."""
  testSetFilename_gt: String

  """All values greater than or equal the given value."""
  testSetFilename_gte: String

  """All values containing the given string."""
  testSetFilename_contains: String

  """All values not containing the given string."""
  testSetFilename_not_contains: String

  """All values starting with the given string."""
  testSetFilename_starts_with: String

  """All values not starting with the given string."""
  testSetFilename_not_starts_with: String

  """All values ending with the given string."""
  testSetFilename_ends_with: String

  """All values not ending with the given string."""
  testSetFilename_not_ends_with: String
  deviceName: String

  """All values that are not equal to given value."""
  deviceName_not: String

  """All values that are contained in given list."""
  deviceName_in: [String!]

  """All values that are not contained in given list."""
  deviceName_not_in: [String!]

  """All values less than the given value."""
  deviceName_lt: String

  """All values less than or equal the given value."""
  deviceName_lte: String

  """All values greater than the given value."""
  deviceName_gt: String

  """All values greater than or equal the given value."""
  deviceName_gte: String

  """All values containing the given string."""
  deviceName_contains: String

  """All values not containing the given string."""
  deviceName_not_contains: String

  """All values starting with the given string."""
  deviceName_starts_with: String

  """All values not starting with the given string."""
  deviceName_not_starts_with: String

  """All values ending with the given string."""
  deviceName_ends_with: String

  """All values not ending with the given string."""
  deviceName_not_ends_with: String
  testSession: TestSessionWhereInput
  steps_every: TestSessionTestCaseResultTranscriptWhereInput
  steps_some: TestSessionTestCaseResultTranscriptWhereInput
  steps_none: TestSessionTestCaseResultTranscriptWhereInput
  attachments_every: TestSessionTestCaseResultAttachmentWhereInput
  attachments_some: TestSessionTestCaseResultAttachmentWhereInput
  attachments_none: TestSessionTestCaseResultAttachmentWhereInput
  testSet: TestSetWhereInput
  testSetScript: TestSetScriptWhereInput
  testSetRepository: TestSetRepositoryWhereInput
  testSetFolder: TestSetFolderWhereInput
  testSetExcel: TestSetExcelWhereInput
  deviceSet: DeviceSetWhereInput
}

input TestSessionTestCaseResultWhereUniqueInput {
  id: ID
}

input TestSessionUpdateInput {
  name: String
  description: String
  batchCount: Int
  bail: Boolean
  status: TestSessionStatus
  securityCheck: Boolean
  chartData: String
  tags: TestSessionUpdatetagsInput
  client: ClientUpdateOneInput
  chatbot: ChatbotUpdateOneRequiredInput
  testSets: TestSetUpdateManyInput
  deviceSets: DeviceSetUpdateManyInput
  registeredComponents: RegisteredComponentUpdateManyInput
  testProject: TestProjectUpdateOneInput
  agent: AgentUpdateOneInput
  results: TestSessionTestCaseResultUpdateManyWithoutTestSessionInput
  securityAlerts: SecurityAlertUpdateManyInput
  jobs: TestSessionJobUpdateManyWithoutTestSessionInput
  capabilities: CapabilityUpdateManyInput
  sources: CapabilityUpdateManyInput
  envs: CapabilityUpdateManyInput
}

input TestSessionUpdateManyMutationInput {
  name: String
  description: String
  batchCount: Int
  bail: Boolean
  status: TestSessionStatus
  securityCheck: Boolean
  chartData: String
  tags: TestSessionUpdatetagsInput
}

input TestSessionUpdateOneRequiredWithoutJobsInput {
  create: TestSessionCreateWithoutJobsInput
  connect: TestSessionWhereUniqueInput
  update: TestSessionUpdateWithoutJobsDataInput
  upsert: TestSessionUpsertWithoutJobsInput
}

input TestSessionUpdateOneRequiredWithoutResultsInput {
  create: TestSessionCreateWithoutResultsInput
  connect: TestSessionWhereUniqueInput
  update: TestSessionUpdateWithoutResultsDataInput
  upsert: TestSessionUpsertWithoutResultsInput
}

input TestSessionUpdatetagsInput {
  set: [String!]
}

input TestSessionUpdateWithoutJobsDataInput {
  name: String
  description: String
  batchCount: Int
  bail: Boolean
  status: TestSessionStatus
  securityCheck: Boolean
  chartData: String
  tags: TestSessionUpdatetagsInput
  client: ClientUpdateOneInput
  chatbot: ChatbotUpdateOneRequiredInput
  testSets: TestSetUpdateManyInput
  deviceSets: DeviceSetUpdateManyInput
  registeredComponents: RegisteredComponentUpdateManyInput
  testProject: TestProjectUpdateOneInput
  agent: AgentUpdateOneInput
  results: TestSessionTestCaseResultUpdateManyWithoutTestSessionInput
  securityAlerts: SecurityAlertUpdateManyInput
  capabilities: CapabilityUpdateManyInput
  sources: CapabilityUpdateManyInput
  envs: CapabilityUpdateManyInput
}

input TestSessionUpdateWithoutResultsDataInput {
  name: String
  description: String
  batchCount: Int
  bail: Boolean
  status: TestSessionStatus
  securityCheck: Boolean
  chartData: String
  tags: TestSessionUpdatetagsInput
  client: ClientUpdateOneInput
  chatbot: ChatbotUpdateOneRequiredInput
  testSets: TestSetUpdateManyInput
  deviceSets: DeviceSetUpdateManyInput
  registeredComponents: RegisteredComponentUpdateManyInput
  testProject: TestProjectUpdateOneInput
  agent: AgentUpdateOneInput
  securityAlerts: SecurityAlertUpdateManyInput
  jobs: TestSessionJobUpdateManyWithoutTestSessionInput
  capabilities: CapabilityUpdateManyInput
  sources: CapabilityUpdateManyInput
  envs: CapabilityUpdateManyInput
}

input TestSessionUpsertWithoutJobsInput {
  update: TestSessionUpdateWithoutJobsDataInput!
  create: TestSessionCreateWithoutJobsInput!
}

input TestSessionUpsertWithoutResultsInput {
  update: TestSessionUpdateWithoutResultsDataInput!
  create: TestSessionCreateWithoutResultsInput!
}

input TestSessionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  batchCount: Int

  """All values that are not equal to given value."""
  batchCount_not: Int

  """All values that are contained in given list."""
  batchCount_in: [Int!]

  """All values that are not contained in given list."""
  batchCount_not_in: [Int!]

  """All values less than the given value."""
  batchCount_lt: Int

  """All values less than or equal the given value."""
  batchCount_lte: Int

  """All values greater than the given value."""
  batchCount_gt: Int

  """All values greater than or equal the given value."""
  batchCount_gte: Int
  bail: Boolean

  """All values that are not equal to given value."""
  bail_not: Boolean
  status: TestSessionStatus

  """All values that are not equal to given value."""
  status_not: TestSessionStatus

  """All values that are contained in given list."""
  status_in: [TestSessionStatus!]

  """All values that are not contained in given list."""
  status_not_in: [TestSessionStatus!]
  securityCheck: Boolean

  """All values that are not equal to given value."""
  securityCheck_not: Boolean
  chartData: String

  """All values that are not equal to given value."""
  chartData_not: String

  """All values that are contained in given list."""
  chartData_in: [String!]

  """All values that are not contained in given list."""
  chartData_not_in: [String!]

  """All values less than the given value."""
  chartData_lt: String

  """All values less than or equal the given value."""
  chartData_lte: String

  """All values greater than the given value."""
  chartData_gt: String

  """All values greater than or equal the given value."""
  chartData_gte: String

  """All values containing the given string."""
  chartData_contains: String

  """All values not containing the given string."""
  chartData_not_contains: String

  """All values starting with the given string."""
  chartData_starts_with: String

  """All values not starting with the given string."""
  chartData_not_starts_with: String

  """All values ending with the given string."""
  chartData_ends_with: String

  """All values not ending with the given string."""
  chartData_not_ends_with: String
  client: ClientWhereInput
  chatbot: ChatbotWhereInput
  testSets_every: TestSetWhereInput
  testSets_some: TestSetWhereInput
  testSets_none: TestSetWhereInput
  deviceSets_every: DeviceSetWhereInput
  deviceSets_some: DeviceSetWhereInput
  deviceSets_none: DeviceSetWhereInput
  registeredComponents_every: RegisteredComponentWhereInput
  registeredComponents_some: RegisteredComponentWhereInput
  registeredComponents_none: RegisteredComponentWhereInput
  testProject: TestProjectWhereInput
  agent: AgentWhereInput
  results_every: TestSessionTestCaseResultWhereInput
  results_some: TestSessionTestCaseResultWhereInput
  results_none: TestSessionTestCaseResultWhereInput
  securityAlerts_every: SecurityAlertWhereInput
  securityAlerts_some: SecurityAlertWhereInput
  securityAlerts_none: SecurityAlertWhereInput
  jobs_every: TestSessionJobWhereInput
  jobs_some: TestSessionJobWhereInput
  jobs_none: TestSessionJobWhereInput
  capabilities_every: CapabilityWhereInput
  capabilities_some: CapabilityWhereInput
  capabilities_none: CapabilityWhereInput
  sources_every: CapabilityWhereInput
  sources_some: CapabilityWhereInput
  sources_none: CapabilityWhereInput
  envs_every: CapabilityWhereInput
  envs_some: CapabilityWhereInput
  envs_none: CapabilityWhereInput
}

input TestSessionWhereUniqueInput {
  id: ID
}

type TestSet implements Node {
  id: ID!
  client: Client
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  useMatchingMode: TestSetMatchingModeType
  expandConvos: Boolean
  expandConvosMode: TestSetExpandConvosModeType
  expandConvosModeRandomCount: Int
  expandUtterancesToConvos: Boolean
  expandUtterancesIncomprehension: String
  useScriptingMemory: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType
  expandScriptingMemory: Boolean
  normalizeText: Boolean
  excelHasConvos: Boolean
  excelHasPartialConvos: Boolean
  excelHasUtterances: Boolean
  excelWorksheetsConvos: String
  excelWorksheetsPartialConvos: String
  excelWorksheetsUtterances: String
  excelStartRow: Int
  excelStartCol: Int
  selectionType: TestSetSelectionType
  tags: [String!]!
  scripts(where: TestSetScriptWhereInput, orderBy: TestSetScriptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSetScript!]
  repositories(where: TestSetRepositoryWhereInput, orderBy: TestSetRepositoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSetRepository!]
  folders(where: TestSetFolderWhereInput, orderBy: TestSetFolderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSetFolder!]
  excels(where: TestSetExcelWhereInput, orderBy: TestSetExcelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSetExcel!]
  statsUpdatedAt: DateTime
  statsConvoCount: Int
  statsPartialConvoCount: Int
  statsUtterancesCount: Int
  statsScriptingMemoryCount: Int
  statsCompiledConvos(where: TestSetCompiledConvoWhereInput, orderBy: TestSetCompiledConvoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSetCompiledConvo!]
  dependencies(where: TestSetWhereInput, orderBy: TestSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestSet!]
}

type TestSetCompiledConvo implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  order: Int
  description: String
  sourceTag: String
  stepCount: Int!
}

"""A connection to a list of items."""
type TestSetCompiledConvoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestSetCompiledConvoEdge]!
  aggregate: AggregateTestSetCompiledConvo!
}

input TestSetCompiledConvoCreateInput {
  name: String!
  order: Int
  description: String
  sourceTag: String
  stepCount: Int!
}

input TestSetCompiledConvoCreateManyInput {
  create: [TestSetCompiledConvoCreateInput!]
  connect: [TestSetCompiledConvoWhereUniqueInput!]
}

"""An edge in a connection."""
type TestSetCompiledConvoEdge {
  """The item at the end of the edge."""
  node: TestSetCompiledConvo!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TestSetCompiledConvoOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  order_ASC
  order_DESC
  description_ASC
  description_DESC
  sourceTag_ASC
  sourceTag_DESC
  stepCount_ASC
  stepCount_DESC
}

type TestSetCompiledConvoPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  order: Int
  description: String
  sourceTag: String
  stepCount: Int!
}

input TestSetCompiledConvoScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetCompiledConvoScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetCompiledConvoScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetCompiledConvoScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  sourceTag: String

  """All values that are not equal to given value."""
  sourceTag_not: String

  """All values that are contained in given list."""
  sourceTag_in: [String!]

  """All values that are not contained in given list."""
  sourceTag_not_in: [String!]

  """All values less than the given value."""
  sourceTag_lt: String

  """All values less than or equal the given value."""
  sourceTag_lte: String

  """All values greater than the given value."""
  sourceTag_gt: String

  """All values greater than or equal the given value."""
  sourceTag_gte: String

  """All values containing the given string."""
  sourceTag_contains: String

  """All values not containing the given string."""
  sourceTag_not_contains: String

  """All values starting with the given string."""
  sourceTag_starts_with: String

  """All values not starting with the given string."""
  sourceTag_not_starts_with: String

  """All values ending with the given string."""
  sourceTag_ends_with: String

  """All values not ending with the given string."""
  sourceTag_not_ends_with: String
  stepCount: Int

  """All values that are not equal to given value."""
  stepCount_not: Int

  """All values that are contained in given list."""
  stepCount_in: [Int!]

  """All values that are not contained in given list."""
  stepCount_not_in: [Int!]

  """All values less than the given value."""
  stepCount_lt: Int

  """All values less than or equal the given value."""
  stepCount_lte: Int

  """All values greater than the given value."""
  stepCount_gt: Int

  """All values greater than or equal the given value."""
  stepCount_gte: Int
}

type TestSetCompiledConvoSubscriptionPayload {
  mutation: MutationType!
  node: TestSetCompiledConvo
  updatedFields: [String!]
  previousValues: TestSetCompiledConvoPreviousValues
}

input TestSetCompiledConvoSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetCompiledConvoSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetCompiledConvoSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetCompiledConvoSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TestSetCompiledConvoWhereInput
}

input TestSetCompiledConvoUpdateDataInput {
  name: String
  order: Int
  description: String
  sourceTag: String
  stepCount: Int
}

input TestSetCompiledConvoUpdateInput {
  name: String
  order: Int
  description: String
  sourceTag: String
  stepCount: Int
}

input TestSetCompiledConvoUpdateManyDataInput {
  name: String
  order: Int
  description: String
  sourceTag: String
  stepCount: Int
}

input TestSetCompiledConvoUpdateManyInput {
  create: [TestSetCompiledConvoCreateInput!]
  connect: [TestSetCompiledConvoWhereUniqueInput!]
  set: [TestSetCompiledConvoWhereUniqueInput!]
  disconnect: [TestSetCompiledConvoWhereUniqueInput!]
  delete: [TestSetCompiledConvoWhereUniqueInput!]
  update: [TestSetCompiledConvoUpdateWithWhereUniqueNestedInput!]
  updateMany: [TestSetCompiledConvoUpdateManyWithWhereNestedInput!]
  deleteMany: [TestSetCompiledConvoScalarWhereInput!]
  upsert: [TestSetCompiledConvoUpsertWithWhereUniqueNestedInput!]
}

input TestSetCompiledConvoUpdateManyMutationInput {
  name: String
  order: Int
  description: String
  sourceTag: String
  stepCount: Int
}

input TestSetCompiledConvoUpdateManyWithWhereNestedInput {
  where: TestSetCompiledConvoScalarWhereInput!
  data: TestSetCompiledConvoUpdateManyDataInput!
}

input TestSetCompiledConvoUpdateWithWhereUniqueNestedInput {
  where: TestSetCompiledConvoWhereUniqueInput!
  data: TestSetCompiledConvoUpdateDataInput!
}

input TestSetCompiledConvoUpsertWithWhereUniqueNestedInput {
  where: TestSetCompiledConvoWhereUniqueInput!
  update: TestSetCompiledConvoUpdateDataInput!
  create: TestSetCompiledConvoCreateInput!
}

input TestSetCompiledConvoWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetCompiledConvoWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetCompiledConvoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetCompiledConvoWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  sourceTag: String

  """All values that are not equal to given value."""
  sourceTag_not: String

  """All values that are contained in given list."""
  sourceTag_in: [String!]

  """All values that are not contained in given list."""
  sourceTag_not_in: [String!]

  """All values less than the given value."""
  sourceTag_lt: String

  """All values less than or equal the given value."""
  sourceTag_lte: String

  """All values greater than the given value."""
  sourceTag_gt: String

  """All values greater than or equal the given value."""
  sourceTag_gte: String

  """All values containing the given string."""
  sourceTag_contains: String

  """All values not containing the given string."""
  sourceTag_not_contains: String

  """All values starting with the given string."""
  sourceTag_starts_with: String

  """All values not starting with the given string."""
  sourceTag_not_starts_with: String

  """All values ending with the given string."""
  sourceTag_ends_with: String

  """All values not ending with the given string."""
  sourceTag_not_ends_with: String
  stepCount: Int

  """All values that are not equal to given value."""
  stepCount_not: Int

  """All values that are contained in given list."""
  stepCount_in: [Int!]

  """All values that are not contained in given list."""
  stepCount_not_in: [Int!]

  """All values less than the given value."""
  stepCount_lt: Int

  """All values less than or equal the given value."""
  stepCount_lte: Int

  """All values greater than the given value."""
  stepCount_gt: Int

  """All values greater than or equal the given value."""
  stepCount_gte: Int
}

input TestSetCompiledConvoWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type TestSetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestSetEdge]!
  aggregate: AggregateTestSet!
}

input TestSetCreateInput {
  name: String!
  description: String
  useMatchingMode: TestSetMatchingModeType
  expandConvos: Boolean
  expandConvosMode: TestSetExpandConvosModeType
  expandConvosModeRandomCount: Int
  expandUtterancesToConvos: Boolean
  expandUtterancesIncomprehension: String
  useScriptingMemory: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType
  expandScriptingMemory: Boolean
  normalizeText: Boolean
  excelHasConvos: Boolean
  excelHasPartialConvos: Boolean
  excelHasUtterances: Boolean
  excelWorksheetsConvos: String
  excelWorksheetsPartialConvos: String
  excelWorksheetsUtterances: String
  excelStartRow: Int
  excelStartCol: Int
  selectionType: TestSetSelectionType
  statsUpdatedAt: DateTime
  statsConvoCount: Int
  statsPartialConvoCount: Int
  statsUtterancesCount: Int
  statsScriptingMemoryCount: Int
  tags: TestSetCreatetagsInput
  client: ClientCreateOneInput
  scripts: TestSetScriptCreateManyWithoutTestSetInput
  repositories: TestSetRepositoryCreateManyWithoutTestSetInput
  folders: TestSetFolderCreateManyWithoutTestSetInput
  excels: TestSetExcelCreateManyWithoutTestSetInput
  statsCompiledConvos: TestSetCompiledConvoCreateManyInput
  dependencies: TestSetCreateManyInput
}

input TestSetCreateManyInput {
  create: [TestSetCreateInput!]
  connect: [TestSetWhereUniqueInput!]
}

input TestSetCreateOneInput {
  create: TestSetCreateInput
  connect: TestSetWhereUniqueInput
}

input TestSetCreateOneWithoutExcelsInput {
  create: TestSetCreateWithoutExcelsInput
  connect: TestSetWhereUniqueInput
}

input TestSetCreateOneWithoutFoldersInput {
  create: TestSetCreateWithoutFoldersInput
  connect: TestSetWhereUniqueInput
}

input TestSetCreateOneWithoutRepositoriesInput {
  create: TestSetCreateWithoutRepositoriesInput
  connect: TestSetWhereUniqueInput
}

input TestSetCreateOneWithoutScriptsInput {
  create: TestSetCreateWithoutScriptsInput
  connect: TestSetWhereUniqueInput
}

input TestSetCreatetagsInput {
  set: [String!]
}

input TestSetCreateWithoutExcelsInput {
  name: String!
  description: String
  useMatchingMode: TestSetMatchingModeType
  expandConvos: Boolean
  expandConvosMode: TestSetExpandConvosModeType
  expandConvosModeRandomCount: Int
  expandUtterancesToConvos: Boolean
  expandUtterancesIncomprehension: String
  useScriptingMemory: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType
  expandScriptingMemory: Boolean
  normalizeText: Boolean
  excelHasConvos: Boolean
  excelHasPartialConvos: Boolean
  excelHasUtterances: Boolean
  excelWorksheetsConvos: String
  excelWorksheetsPartialConvos: String
  excelWorksheetsUtterances: String
  excelStartRow: Int
  excelStartCol: Int
  selectionType: TestSetSelectionType
  statsUpdatedAt: DateTime
  statsConvoCount: Int
  statsPartialConvoCount: Int
  statsUtterancesCount: Int
  statsScriptingMemoryCount: Int
  tags: TestSetCreatetagsInput
  client: ClientCreateOneInput
  scripts: TestSetScriptCreateManyWithoutTestSetInput
  repositories: TestSetRepositoryCreateManyWithoutTestSetInput
  folders: TestSetFolderCreateManyWithoutTestSetInput
  statsCompiledConvos: TestSetCompiledConvoCreateManyInput
  dependencies: TestSetCreateManyInput
}

input TestSetCreateWithoutFoldersInput {
  name: String!
  description: String
  useMatchingMode: TestSetMatchingModeType
  expandConvos: Boolean
  expandConvosMode: TestSetExpandConvosModeType
  expandConvosModeRandomCount: Int
  expandUtterancesToConvos: Boolean
  expandUtterancesIncomprehension: String
  useScriptingMemory: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType
  expandScriptingMemory: Boolean
  normalizeText: Boolean
  excelHasConvos: Boolean
  excelHasPartialConvos: Boolean
  excelHasUtterances: Boolean
  excelWorksheetsConvos: String
  excelWorksheetsPartialConvos: String
  excelWorksheetsUtterances: String
  excelStartRow: Int
  excelStartCol: Int
  selectionType: TestSetSelectionType
  statsUpdatedAt: DateTime
  statsConvoCount: Int
  statsPartialConvoCount: Int
  statsUtterancesCount: Int
  statsScriptingMemoryCount: Int
  tags: TestSetCreatetagsInput
  client: ClientCreateOneInput
  scripts: TestSetScriptCreateManyWithoutTestSetInput
  repositories: TestSetRepositoryCreateManyWithoutTestSetInput
  excels: TestSetExcelCreateManyWithoutTestSetInput
  statsCompiledConvos: TestSetCompiledConvoCreateManyInput
  dependencies: TestSetCreateManyInput
}

input TestSetCreateWithoutRepositoriesInput {
  name: String!
  description: String
  useMatchingMode: TestSetMatchingModeType
  expandConvos: Boolean
  expandConvosMode: TestSetExpandConvosModeType
  expandConvosModeRandomCount: Int
  expandUtterancesToConvos: Boolean
  expandUtterancesIncomprehension: String
  useScriptingMemory: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType
  expandScriptingMemory: Boolean
  normalizeText: Boolean
  excelHasConvos: Boolean
  excelHasPartialConvos: Boolean
  excelHasUtterances: Boolean
  excelWorksheetsConvos: String
  excelWorksheetsPartialConvos: String
  excelWorksheetsUtterances: String
  excelStartRow: Int
  excelStartCol: Int
  selectionType: TestSetSelectionType
  statsUpdatedAt: DateTime
  statsConvoCount: Int
  statsPartialConvoCount: Int
  statsUtterancesCount: Int
  statsScriptingMemoryCount: Int
  tags: TestSetCreatetagsInput
  client: ClientCreateOneInput
  scripts: TestSetScriptCreateManyWithoutTestSetInput
  folders: TestSetFolderCreateManyWithoutTestSetInput
  excels: TestSetExcelCreateManyWithoutTestSetInput
  statsCompiledConvos: TestSetCompiledConvoCreateManyInput
  dependencies: TestSetCreateManyInput
}

input TestSetCreateWithoutScriptsInput {
  name: String!
  description: String
  useMatchingMode: TestSetMatchingModeType
  expandConvos: Boolean
  expandConvosMode: TestSetExpandConvosModeType
  expandConvosModeRandomCount: Int
  expandUtterancesToConvos: Boolean
  expandUtterancesIncomprehension: String
  useScriptingMemory: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType
  expandScriptingMemory: Boolean
  normalizeText: Boolean
  excelHasConvos: Boolean
  excelHasPartialConvos: Boolean
  excelHasUtterances: Boolean
  excelWorksheetsConvos: String
  excelWorksheetsPartialConvos: String
  excelWorksheetsUtterances: String
  excelStartRow: Int
  excelStartCol: Int
  selectionType: TestSetSelectionType
  statsUpdatedAt: DateTime
  statsConvoCount: Int
  statsPartialConvoCount: Int
  statsUtterancesCount: Int
  statsScriptingMemoryCount: Int
  tags: TestSetCreatetagsInput
  client: ClientCreateOneInput
  repositories: TestSetRepositoryCreateManyWithoutTestSetInput
  folders: TestSetFolderCreateManyWithoutTestSetInput
  excels: TestSetExcelCreateManyWithoutTestSetInput
  statsCompiledConvos: TestSetCompiledConvoCreateManyInput
  dependencies: TestSetCreateManyInput
}

"""An edge in a connection."""
type TestSetEdge {
  """The item at the end of the edge."""
  node: TestSet!

  """A cursor for use in pagination."""
  cursor: String!
}

type TestSetExcel implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  filename: String!
  filecontent: String
  testSet: TestSet!
}

"""A connection to a list of items."""
type TestSetExcelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestSetExcelEdge]!
  aggregate: AggregateTestSetExcel!
}

input TestSetExcelCreateInput {
  name: String!
  filename: String!
  filecontent: String
  testSet: TestSetCreateOneWithoutExcelsInput!
}

input TestSetExcelCreateManyWithoutTestSetInput {
  create: [TestSetExcelCreateWithoutTestSetInput!]
  connect: [TestSetExcelWhereUniqueInput!]
}

input TestSetExcelCreateOneInput {
  create: TestSetExcelCreateInput
  connect: TestSetExcelWhereUniqueInput
}

input TestSetExcelCreateWithoutTestSetInput {
  name: String!
  filename: String!
  filecontent: String
}

"""An edge in a connection."""
type TestSetExcelEdge {
  """The item at the end of the edge."""
  node: TestSetExcel!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TestSetExcelOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  filename_ASC
  filename_DESC
  filecontent_ASC
  filecontent_DESC
}

type TestSetExcelPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  filename: String!
  filecontent: String
}

input TestSetExcelScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetExcelScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetExcelScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetExcelScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  filename: String

  """All values that are not equal to given value."""
  filename_not: String

  """All values that are contained in given list."""
  filename_in: [String!]

  """All values that are not contained in given list."""
  filename_not_in: [String!]

  """All values less than the given value."""
  filename_lt: String

  """All values less than or equal the given value."""
  filename_lte: String

  """All values greater than the given value."""
  filename_gt: String

  """All values greater than or equal the given value."""
  filename_gte: String

  """All values containing the given string."""
  filename_contains: String

  """All values not containing the given string."""
  filename_not_contains: String

  """All values starting with the given string."""
  filename_starts_with: String

  """All values not starting with the given string."""
  filename_not_starts_with: String

  """All values ending with the given string."""
  filename_ends_with: String

  """All values not ending with the given string."""
  filename_not_ends_with: String
  filecontent: String

  """All values that are not equal to given value."""
  filecontent_not: String

  """All values that are contained in given list."""
  filecontent_in: [String!]

  """All values that are not contained in given list."""
  filecontent_not_in: [String!]

  """All values less than the given value."""
  filecontent_lt: String

  """All values less than or equal the given value."""
  filecontent_lte: String

  """All values greater than the given value."""
  filecontent_gt: String

  """All values greater than or equal the given value."""
  filecontent_gte: String

  """All values containing the given string."""
  filecontent_contains: String

  """All values not containing the given string."""
  filecontent_not_contains: String

  """All values starting with the given string."""
  filecontent_starts_with: String

  """All values not starting with the given string."""
  filecontent_not_starts_with: String

  """All values ending with the given string."""
  filecontent_ends_with: String

  """All values not ending with the given string."""
  filecontent_not_ends_with: String
}

type TestSetExcelSubscriptionPayload {
  mutation: MutationType!
  node: TestSetExcel
  updatedFields: [String!]
  previousValues: TestSetExcelPreviousValues
}

input TestSetExcelSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetExcelSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetExcelSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetExcelSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TestSetExcelWhereInput
}

input TestSetExcelUpdateDataInput {
  name: String
  filename: String
  filecontent: String
  testSet: TestSetUpdateOneRequiredWithoutExcelsInput
}

input TestSetExcelUpdateInput {
  name: String
  filename: String
  filecontent: String
  testSet: TestSetUpdateOneRequiredWithoutExcelsInput
}

input TestSetExcelUpdateManyDataInput {
  name: String
  filename: String
  filecontent: String
}

input TestSetExcelUpdateManyMutationInput {
  name: String
  filename: String
  filecontent: String
}

input TestSetExcelUpdateManyWithoutTestSetInput {
  create: [TestSetExcelCreateWithoutTestSetInput!]
  connect: [TestSetExcelWhereUniqueInput!]
  set: [TestSetExcelWhereUniqueInput!]
  disconnect: [TestSetExcelWhereUniqueInput!]
  delete: [TestSetExcelWhereUniqueInput!]
  update: [TestSetExcelUpdateWithWhereUniqueWithoutTestSetInput!]
  updateMany: [TestSetExcelUpdateManyWithWhereNestedInput!]
  deleteMany: [TestSetExcelScalarWhereInput!]
  upsert: [TestSetExcelUpsertWithWhereUniqueWithoutTestSetInput!]
}

input TestSetExcelUpdateManyWithWhereNestedInput {
  where: TestSetExcelScalarWhereInput!
  data: TestSetExcelUpdateManyDataInput!
}

input TestSetExcelUpdateOneInput {
  create: TestSetExcelCreateInput
  connect: TestSetExcelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TestSetExcelUpdateDataInput
  upsert: TestSetExcelUpsertNestedInput
}

input TestSetExcelUpdateWithoutTestSetDataInput {
  name: String
  filename: String
  filecontent: String
}

input TestSetExcelUpdateWithWhereUniqueWithoutTestSetInput {
  where: TestSetExcelWhereUniqueInput!
  data: TestSetExcelUpdateWithoutTestSetDataInput!
}

input TestSetExcelUpsertNestedInput {
  update: TestSetExcelUpdateDataInput!
  create: TestSetExcelCreateInput!
}

input TestSetExcelUpsertWithWhereUniqueWithoutTestSetInput {
  where: TestSetExcelWhereUniqueInput!
  update: TestSetExcelUpdateWithoutTestSetDataInput!
  create: TestSetExcelCreateWithoutTestSetInput!
}

input TestSetExcelWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetExcelWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetExcelWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetExcelWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  filename: String

  """All values that are not equal to given value."""
  filename_not: String

  """All values that are contained in given list."""
  filename_in: [String!]

  """All values that are not contained in given list."""
  filename_not_in: [String!]

  """All values less than the given value."""
  filename_lt: String

  """All values less than or equal the given value."""
  filename_lte: String

  """All values greater than the given value."""
  filename_gt: String

  """All values greater than or equal the given value."""
  filename_gte: String

  """All values containing the given string."""
  filename_contains: String

  """All values not containing the given string."""
  filename_not_contains: String

  """All values starting with the given string."""
  filename_starts_with: String

  """All values not starting with the given string."""
  filename_not_starts_with: String

  """All values ending with the given string."""
  filename_ends_with: String

  """All values not ending with the given string."""
  filename_not_ends_with: String
  filecontent: String

  """All values that are not equal to given value."""
  filecontent_not: String

  """All values that are contained in given list."""
  filecontent_in: [String!]

  """All values that are not contained in given list."""
  filecontent_not_in: [String!]

  """All values less than the given value."""
  filecontent_lt: String

  """All values less than or equal the given value."""
  filecontent_lte: String

  """All values greater than the given value."""
  filecontent_gt: String

  """All values greater than or equal the given value."""
  filecontent_gte: String

  """All values containing the given string."""
  filecontent_contains: String

  """All values not containing the given string."""
  filecontent_not_contains: String

  """All values starting with the given string."""
  filecontent_starts_with: String

  """All values not starting with the given string."""
  filecontent_not_starts_with: String

  """All values ending with the given string."""
  filecontent_ends_with: String

  """All values not ending with the given string."""
  filecontent_not_ends_with: String
  testSet: TestSetWhereInput
}

input TestSetExcelWhereUniqueInput {
  id: ID
}

enum TestSetExpandConvosModeType {
  UTTEXPANSION_MODE_ALL
  UTTEXPANSION_MODE_FIRST
  UTTEXPANSION_MODE_RANDOM
}

type TestSetFolder implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  path: String!
  globFilter: String
  testSet: TestSet!
}

"""A connection to a list of items."""
type TestSetFolderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestSetFolderEdge]!
  aggregate: AggregateTestSetFolder!
}

input TestSetFolderCreateInput {
  name: String!
  path: String!
  globFilter: String
  testSet: TestSetCreateOneWithoutFoldersInput!
}

input TestSetFolderCreateManyWithoutTestSetInput {
  create: [TestSetFolderCreateWithoutTestSetInput!]
  connect: [TestSetFolderWhereUniqueInput!]
}

input TestSetFolderCreateOneInput {
  create: TestSetFolderCreateInput
  connect: TestSetFolderWhereUniqueInput
}

input TestSetFolderCreateWithoutTestSetInput {
  name: String!
  path: String!
  globFilter: String
}

"""An edge in a connection."""
type TestSetFolderEdge {
  """The item at the end of the edge."""
  node: TestSetFolder!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TestSetFolderOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  path_ASC
  path_DESC
  globFilter_ASC
  globFilter_DESC
}

type TestSetFolderPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  path: String!
  globFilter: String
}

input TestSetFolderScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetFolderScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetFolderScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetFolderScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  path: String

  """All values that are not equal to given value."""
  path_not: String

  """All values that are contained in given list."""
  path_in: [String!]

  """All values that are not contained in given list."""
  path_not_in: [String!]

  """All values less than the given value."""
  path_lt: String

  """All values less than or equal the given value."""
  path_lte: String

  """All values greater than the given value."""
  path_gt: String

  """All values greater than or equal the given value."""
  path_gte: String

  """All values containing the given string."""
  path_contains: String

  """All values not containing the given string."""
  path_not_contains: String

  """All values starting with the given string."""
  path_starts_with: String

  """All values not starting with the given string."""
  path_not_starts_with: String

  """All values ending with the given string."""
  path_ends_with: String

  """All values not ending with the given string."""
  path_not_ends_with: String
  globFilter: String

  """All values that are not equal to given value."""
  globFilter_not: String

  """All values that are contained in given list."""
  globFilter_in: [String!]

  """All values that are not contained in given list."""
  globFilter_not_in: [String!]

  """All values less than the given value."""
  globFilter_lt: String

  """All values less than or equal the given value."""
  globFilter_lte: String

  """All values greater than the given value."""
  globFilter_gt: String

  """All values greater than or equal the given value."""
  globFilter_gte: String

  """All values containing the given string."""
  globFilter_contains: String

  """All values not containing the given string."""
  globFilter_not_contains: String

  """All values starting with the given string."""
  globFilter_starts_with: String

  """All values not starting with the given string."""
  globFilter_not_starts_with: String

  """All values ending with the given string."""
  globFilter_ends_with: String

  """All values not ending with the given string."""
  globFilter_not_ends_with: String
}

type TestSetFolderSubscriptionPayload {
  mutation: MutationType!
  node: TestSetFolder
  updatedFields: [String!]
  previousValues: TestSetFolderPreviousValues
}

input TestSetFolderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetFolderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetFolderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetFolderSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TestSetFolderWhereInput
}

input TestSetFolderUpdateDataInput {
  name: String
  path: String
  globFilter: String
  testSet: TestSetUpdateOneRequiredWithoutFoldersInput
}

input TestSetFolderUpdateInput {
  name: String
  path: String
  globFilter: String
  testSet: TestSetUpdateOneRequiredWithoutFoldersInput
}

input TestSetFolderUpdateManyDataInput {
  name: String
  path: String
  globFilter: String
}

input TestSetFolderUpdateManyMutationInput {
  name: String
  path: String
  globFilter: String
}

input TestSetFolderUpdateManyWithoutTestSetInput {
  create: [TestSetFolderCreateWithoutTestSetInput!]
  connect: [TestSetFolderWhereUniqueInput!]
  set: [TestSetFolderWhereUniqueInput!]
  disconnect: [TestSetFolderWhereUniqueInput!]
  delete: [TestSetFolderWhereUniqueInput!]
  update: [TestSetFolderUpdateWithWhereUniqueWithoutTestSetInput!]
  updateMany: [TestSetFolderUpdateManyWithWhereNestedInput!]
  deleteMany: [TestSetFolderScalarWhereInput!]
  upsert: [TestSetFolderUpsertWithWhereUniqueWithoutTestSetInput!]
}

input TestSetFolderUpdateManyWithWhereNestedInput {
  where: TestSetFolderScalarWhereInput!
  data: TestSetFolderUpdateManyDataInput!
}

input TestSetFolderUpdateOneInput {
  create: TestSetFolderCreateInput
  connect: TestSetFolderWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TestSetFolderUpdateDataInput
  upsert: TestSetFolderUpsertNestedInput
}

input TestSetFolderUpdateWithoutTestSetDataInput {
  name: String
  path: String
  globFilter: String
}

input TestSetFolderUpdateWithWhereUniqueWithoutTestSetInput {
  where: TestSetFolderWhereUniqueInput!
  data: TestSetFolderUpdateWithoutTestSetDataInput!
}

input TestSetFolderUpsertNestedInput {
  update: TestSetFolderUpdateDataInput!
  create: TestSetFolderCreateInput!
}

input TestSetFolderUpsertWithWhereUniqueWithoutTestSetInput {
  where: TestSetFolderWhereUniqueInput!
  update: TestSetFolderUpdateWithoutTestSetDataInput!
  create: TestSetFolderCreateWithoutTestSetInput!
}

input TestSetFolderWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetFolderWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetFolderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetFolderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  path: String

  """All values that are not equal to given value."""
  path_not: String

  """All values that are contained in given list."""
  path_in: [String!]

  """All values that are not contained in given list."""
  path_not_in: [String!]

  """All values less than the given value."""
  path_lt: String

  """All values less than or equal the given value."""
  path_lte: String

  """All values greater than the given value."""
  path_gt: String

  """All values greater than or equal the given value."""
  path_gte: String

  """All values containing the given string."""
  path_contains: String

  """All values not containing the given string."""
  path_not_contains: String

  """All values starting with the given string."""
  path_starts_with: String

  """All values not starting with the given string."""
  path_not_starts_with: String

  """All values ending with the given string."""
  path_ends_with: String

  """All values not ending with the given string."""
  path_not_ends_with: String
  globFilter: String

  """All values that are not equal to given value."""
  globFilter_not: String

  """All values that are contained in given list."""
  globFilter_in: [String!]

  """All values that are not contained in given list."""
  globFilter_not_in: [String!]

  """All values less than the given value."""
  globFilter_lt: String

  """All values less than or equal the given value."""
  globFilter_lte: String

  """All values greater than the given value."""
  globFilter_gt: String

  """All values greater than or equal the given value."""
  globFilter_gte: String

  """All values containing the given string."""
  globFilter_contains: String

  """All values not containing the given string."""
  globFilter_not_contains: String

  """All values starting with the given string."""
  globFilter_starts_with: String

  """All values not starting with the given string."""
  globFilter_not_starts_with: String

  """All values ending with the given string."""
  globFilter_ends_with: String

  """All values not ending with the given string."""
  globFilter_not_ends_with: String
  testSet: TestSetWhereInput
}

input TestSetFolderWhereUniqueInput {
  id: ID
}

enum TestSetMatchingModeType {
  MATCHING_MODE_REGEXP
  MATCHING_MODE_INCLUDE
  MATCHING_MODE_INCLUDELOWERCASE
}

enum TestSetMemoryMatchingModeType {
  MATCHING_MODE_NON_WHITESPACE
  MATCHING_MODE_WORD
}

enum TestSetOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  useMatchingMode_ASC
  useMatchingMode_DESC
  expandConvos_ASC
  expandConvos_DESC
  expandConvosMode_ASC
  expandConvosMode_DESC
  expandConvosModeRandomCount_ASC
  expandConvosModeRandomCount_DESC
  expandUtterancesToConvos_ASC
  expandUtterancesToConvos_DESC
  expandUtterancesIncomprehension_ASC
  expandUtterancesIncomprehension_DESC
  useScriptingMemory_ASC
  useScriptingMemory_DESC
  useScriptingMemoryMatchingMode_ASC
  useScriptingMemoryMatchingMode_DESC
  expandScriptingMemory_ASC
  expandScriptingMemory_DESC
  normalizeText_ASC
  normalizeText_DESC
  excelHasConvos_ASC
  excelHasConvos_DESC
  excelHasPartialConvos_ASC
  excelHasPartialConvos_DESC
  excelHasUtterances_ASC
  excelHasUtterances_DESC
  excelWorksheetsConvos_ASC
  excelWorksheetsConvos_DESC
  excelWorksheetsPartialConvos_ASC
  excelWorksheetsPartialConvos_DESC
  excelWorksheetsUtterances_ASC
  excelWorksheetsUtterances_DESC
  excelStartRow_ASC
  excelStartRow_DESC
  excelStartCol_ASC
  excelStartCol_DESC
  selectionType_ASC
  selectionType_DESC
  statsUpdatedAt_ASC
  statsUpdatedAt_DESC
  statsConvoCount_ASC
  statsConvoCount_DESC
  statsPartialConvoCount_ASC
  statsPartialConvoCount_DESC
  statsUtterancesCount_ASC
  statsUtterancesCount_DESC
  statsScriptingMemoryCount_ASC
  statsScriptingMemoryCount_DESC
}

type TestSetPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  useMatchingMode: TestSetMatchingModeType
  expandConvos: Boolean
  expandConvosMode: TestSetExpandConvosModeType
  expandConvosModeRandomCount: Int
  expandUtterancesToConvos: Boolean
  expandUtterancesIncomprehension: String
  useScriptingMemory: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType
  expandScriptingMemory: Boolean
  normalizeText: Boolean
  excelHasConvos: Boolean
  excelHasPartialConvos: Boolean
  excelHasUtterances: Boolean
  excelWorksheetsConvos: String
  excelWorksheetsPartialConvos: String
  excelWorksheetsUtterances: String
  excelStartRow: Int
  excelStartCol: Int
  selectionType: TestSetSelectionType
  tags: [String!]!
  statsUpdatedAt: DateTime
  statsConvoCount: Int
  statsPartialConvoCount: Int
  statsUtterancesCount: Int
  statsScriptingMemoryCount: Int
}

type TestSetRepository implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  giturl: String!
  gitbranch: String!
  gitdir: String
  gituser: String
  gitpassword: String
  globFilter: String
  testSet: TestSet!
}

"""A connection to a list of items."""
type TestSetRepositoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestSetRepositoryEdge]!
  aggregate: AggregateTestSetRepository!
}

input TestSetRepositoryCreateInput {
  name: String!
  giturl: String!
  gitbranch: String!
  gitdir: String
  gituser: String
  gitpassword: String
  globFilter: String
  testSet: TestSetCreateOneWithoutRepositoriesInput!
}

input TestSetRepositoryCreateManyWithoutTestSetInput {
  create: [TestSetRepositoryCreateWithoutTestSetInput!]
  connect: [TestSetRepositoryWhereUniqueInput!]
}

input TestSetRepositoryCreateOneInput {
  create: TestSetRepositoryCreateInput
  connect: TestSetRepositoryWhereUniqueInput
}

input TestSetRepositoryCreateWithoutTestSetInput {
  name: String!
  giturl: String!
  gitbranch: String!
  gitdir: String
  gituser: String
  gitpassword: String
  globFilter: String
}

"""An edge in a connection."""
type TestSetRepositoryEdge {
  """The item at the end of the edge."""
  node: TestSetRepository!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TestSetRepositoryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  giturl_ASC
  giturl_DESC
  gitbranch_ASC
  gitbranch_DESC
  gitdir_ASC
  gitdir_DESC
  gituser_ASC
  gituser_DESC
  gitpassword_ASC
  gitpassword_DESC
  globFilter_ASC
  globFilter_DESC
}

type TestSetRepositoryPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  giturl: String!
  gitbranch: String!
  gitdir: String
  gituser: String
  gitpassword: String
  globFilter: String
}

input TestSetRepositoryScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetRepositoryScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetRepositoryScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetRepositoryScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  giturl: String

  """All values that are not equal to given value."""
  giturl_not: String

  """All values that are contained in given list."""
  giturl_in: [String!]

  """All values that are not contained in given list."""
  giturl_not_in: [String!]

  """All values less than the given value."""
  giturl_lt: String

  """All values less than or equal the given value."""
  giturl_lte: String

  """All values greater than the given value."""
  giturl_gt: String

  """All values greater than or equal the given value."""
  giturl_gte: String

  """All values containing the given string."""
  giturl_contains: String

  """All values not containing the given string."""
  giturl_not_contains: String

  """All values starting with the given string."""
  giturl_starts_with: String

  """All values not starting with the given string."""
  giturl_not_starts_with: String

  """All values ending with the given string."""
  giturl_ends_with: String

  """All values not ending with the given string."""
  giturl_not_ends_with: String
  gitbranch: String

  """All values that are not equal to given value."""
  gitbranch_not: String

  """All values that are contained in given list."""
  gitbranch_in: [String!]

  """All values that are not contained in given list."""
  gitbranch_not_in: [String!]

  """All values less than the given value."""
  gitbranch_lt: String

  """All values less than or equal the given value."""
  gitbranch_lte: String

  """All values greater than the given value."""
  gitbranch_gt: String

  """All values greater than or equal the given value."""
  gitbranch_gte: String

  """All values containing the given string."""
  gitbranch_contains: String

  """All values not containing the given string."""
  gitbranch_not_contains: String

  """All values starting with the given string."""
  gitbranch_starts_with: String

  """All values not starting with the given string."""
  gitbranch_not_starts_with: String

  """All values ending with the given string."""
  gitbranch_ends_with: String

  """All values not ending with the given string."""
  gitbranch_not_ends_with: String
  gitdir: String

  """All values that are not equal to given value."""
  gitdir_not: String

  """All values that are contained in given list."""
  gitdir_in: [String!]

  """All values that are not contained in given list."""
  gitdir_not_in: [String!]

  """All values less than the given value."""
  gitdir_lt: String

  """All values less than or equal the given value."""
  gitdir_lte: String

  """All values greater than the given value."""
  gitdir_gt: String

  """All values greater than or equal the given value."""
  gitdir_gte: String

  """All values containing the given string."""
  gitdir_contains: String

  """All values not containing the given string."""
  gitdir_not_contains: String

  """All values starting with the given string."""
  gitdir_starts_with: String

  """All values not starting with the given string."""
  gitdir_not_starts_with: String

  """All values ending with the given string."""
  gitdir_ends_with: String

  """All values not ending with the given string."""
  gitdir_not_ends_with: String
  gituser: String

  """All values that are not equal to given value."""
  gituser_not: String

  """All values that are contained in given list."""
  gituser_in: [String!]

  """All values that are not contained in given list."""
  gituser_not_in: [String!]

  """All values less than the given value."""
  gituser_lt: String

  """All values less than or equal the given value."""
  gituser_lte: String

  """All values greater than the given value."""
  gituser_gt: String

  """All values greater than or equal the given value."""
  gituser_gte: String

  """All values containing the given string."""
  gituser_contains: String

  """All values not containing the given string."""
  gituser_not_contains: String

  """All values starting with the given string."""
  gituser_starts_with: String

  """All values not starting with the given string."""
  gituser_not_starts_with: String

  """All values ending with the given string."""
  gituser_ends_with: String

  """All values not ending with the given string."""
  gituser_not_ends_with: String
  gitpassword: String

  """All values that are not equal to given value."""
  gitpassword_not: String

  """All values that are contained in given list."""
  gitpassword_in: [String!]

  """All values that are not contained in given list."""
  gitpassword_not_in: [String!]

  """All values less than the given value."""
  gitpassword_lt: String

  """All values less than or equal the given value."""
  gitpassword_lte: String

  """All values greater than the given value."""
  gitpassword_gt: String

  """All values greater than or equal the given value."""
  gitpassword_gte: String

  """All values containing the given string."""
  gitpassword_contains: String

  """All values not containing the given string."""
  gitpassword_not_contains: String

  """All values starting with the given string."""
  gitpassword_starts_with: String

  """All values not starting with the given string."""
  gitpassword_not_starts_with: String

  """All values ending with the given string."""
  gitpassword_ends_with: String

  """All values not ending with the given string."""
  gitpassword_not_ends_with: String
  globFilter: String

  """All values that are not equal to given value."""
  globFilter_not: String

  """All values that are contained in given list."""
  globFilter_in: [String!]

  """All values that are not contained in given list."""
  globFilter_not_in: [String!]

  """All values less than the given value."""
  globFilter_lt: String

  """All values less than or equal the given value."""
  globFilter_lte: String

  """All values greater than the given value."""
  globFilter_gt: String

  """All values greater than or equal the given value."""
  globFilter_gte: String

  """All values containing the given string."""
  globFilter_contains: String

  """All values not containing the given string."""
  globFilter_not_contains: String

  """All values starting with the given string."""
  globFilter_starts_with: String

  """All values not starting with the given string."""
  globFilter_not_starts_with: String

  """All values ending with the given string."""
  globFilter_ends_with: String

  """All values not ending with the given string."""
  globFilter_not_ends_with: String
}

type TestSetRepositorySubscriptionPayload {
  mutation: MutationType!
  node: TestSetRepository
  updatedFields: [String!]
  previousValues: TestSetRepositoryPreviousValues
}

input TestSetRepositorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetRepositorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetRepositorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetRepositorySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TestSetRepositoryWhereInput
}

input TestSetRepositoryUpdateDataInput {
  name: String
  giturl: String
  gitbranch: String
  gitdir: String
  gituser: String
  gitpassword: String
  globFilter: String
  testSet: TestSetUpdateOneRequiredWithoutRepositoriesInput
}

input TestSetRepositoryUpdateInput {
  name: String
  giturl: String
  gitbranch: String
  gitdir: String
  gituser: String
  gitpassword: String
  globFilter: String
  testSet: TestSetUpdateOneRequiredWithoutRepositoriesInput
}

input TestSetRepositoryUpdateManyDataInput {
  name: String
  giturl: String
  gitbranch: String
  gitdir: String
  gituser: String
  gitpassword: String
  globFilter: String
}

input TestSetRepositoryUpdateManyMutationInput {
  name: String
  giturl: String
  gitbranch: String
  gitdir: String
  gituser: String
  gitpassword: String
  globFilter: String
}

input TestSetRepositoryUpdateManyWithoutTestSetInput {
  create: [TestSetRepositoryCreateWithoutTestSetInput!]
  connect: [TestSetRepositoryWhereUniqueInput!]
  set: [TestSetRepositoryWhereUniqueInput!]
  disconnect: [TestSetRepositoryWhereUniqueInput!]
  delete: [TestSetRepositoryWhereUniqueInput!]
  update: [TestSetRepositoryUpdateWithWhereUniqueWithoutTestSetInput!]
  updateMany: [TestSetRepositoryUpdateManyWithWhereNestedInput!]
  deleteMany: [TestSetRepositoryScalarWhereInput!]
  upsert: [TestSetRepositoryUpsertWithWhereUniqueWithoutTestSetInput!]
}

input TestSetRepositoryUpdateManyWithWhereNestedInput {
  where: TestSetRepositoryScalarWhereInput!
  data: TestSetRepositoryUpdateManyDataInput!
}

input TestSetRepositoryUpdateOneInput {
  create: TestSetRepositoryCreateInput
  connect: TestSetRepositoryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TestSetRepositoryUpdateDataInput
  upsert: TestSetRepositoryUpsertNestedInput
}

input TestSetRepositoryUpdateWithoutTestSetDataInput {
  name: String
  giturl: String
  gitbranch: String
  gitdir: String
  gituser: String
  gitpassword: String
  globFilter: String
}

input TestSetRepositoryUpdateWithWhereUniqueWithoutTestSetInput {
  where: TestSetRepositoryWhereUniqueInput!
  data: TestSetRepositoryUpdateWithoutTestSetDataInput!
}

input TestSetRepositoryUpsertNestedInput {
  update: TestSetRepositoryUpdateDataInput!
  create: TestSetRepositoryCreateInput!
}

input TestSetRepositoryUpsertWithWhereUniqueWithoutTestSetInput {
  where: TestSetRepositoryWhereUniqueInput!
  update: TestSetRepositoryUpdateWithoutTestSetDataInput!
  create: TestSetRepositoryCreateWithoutTestSetInput!
}

input TestSetRepositoryWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetRepositoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetRepositoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetRepositoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  giturl: String

  """All values that are not equal to given value."""
  giturl_not: String

  """All values that are contained in given list."""
  giturl_in: [String!]

  """All values that are not contained in given list."""
  giturl_not_in: [String!]

  """All values less than the given value."""
  giturl_lt: String

  """All values less than or equal the given value."""
  giturl_lte: String

  """All values greater than the given value."""
  giturl_gt: String

  """All values greater than or equal the given value."""
  giturl_gte: String

  """All values containing the given string."""
  giturl_contains: String

  """All values not containing the given string."""
  giturl_not_contains: String

  """All values starting with the given string."""
  giturl_starts_with: String

  """All values not starting with the given string."""
  giturl_not_starts_with: String

  """All values ending with the given string."""
  giturl_ends_with: String

  """All values not ending with the given string."""
  giturl_not_ends_with: String
  gitbranch: String

  """All values that are not equal to given value."""
  gitbranch_not: String

  """All values that are contained in given list."""
  gitbranch_in: [String!]

  """All values that are not contained in given list."""
  gitbranch_not_in: [String!]

  """All values less than the given value."""
  gitbranch_lt: String

  """All values less than or equal the given value."""
  gitbranch_lte: String

  """All values greater than the given value."""
  gitbranch_gt: String

  """All values greater than or equal the given value."""
  gitbranch_gte: String

  """All values containing the given string."""
  gitbranch_contains: String

  """All values not containing the given string."""
  gitbranch_not_contains: String

  """All values starting with the given string."""
  gitbranch_starts_with: String

  """All values not starting with the given string."""
  gitbranch_not_starts_with: String

  """All values ending with the given string."""
  gitbranch_ends_with: String

  """All values not ending with the given string."""
  gitbranch_not_ends_with: String
  gitdir: String

  """All values that are not equal to given value."""
  gitdir_not: String

  """All values that are contained in given list."""
  gitdir_in: [String!]

  """All values that are not contained in given list."""
  gitdir_not_in: [String!]

  """All values less than the given value."""
  gitdir_lt: String

  """All values less than or equal the given value."""
  gitdir_lte: String

  """All values greater than the given value."""
  gitdir_gt: String

  """All values greater than or equal the given value."""
  gitdir_gte: String

  """All values containing the given string."""
  gitdir_contains: String

  """All values not containing the given string."""
  gitdir_not_contains: String

  """All values starting with the given string."""
  gitdir_starts_with: String

  """All values not starting with the given string."""
  gitdir_not_starts_with: String

  """All values ending with the given string."""
  gitdir_ends_with: String

  """All values not ending with the given string."""
  gitdir_not_ends_with: String
  gituser: String

  """All values that are not equal to given value."""
  gituser_not: String

  """All values that are contained in given list."""
  gituser_in: [String!]

  """All values that are not contained in given list."""
  gituser_not_in: [String!]

  """All values less than the given value."""
  gituser_lt: String

  """All values less than or equal the given value."""
  gituser_lte: String

  """All values greater than the given value."""
  gituser_gt: String

  """All values greater than or equal the given value."""
  gituser_gte: String

  """All values containing the given string."""
  gituser_contains: String

  """All values not containing the given string."""
  gituser_not_contains: String

  """All values starting with the given string."""
  gituser_starts_with: String

  """All values not starting with the given string."""
  gituser_not_starts_with: String

  """All values ending with the given string."""
  gituser_ends_with: String

  """All values not ending with the given string."""
  gituser_not_ends_with: String
  gitpassword: String

  """All values that are not equal to given value."""
  gitpassword_not: String

  """All values that are contained in given list."""
  gitpassword_in: [String!]

  """All values that are not contained in given list."""
  gitpassword_not_in: [String!]

  """All values less than the given value."""
  gitpassword_lt: String

  """All values less than or equal the given value."""
  gitpassword_lte: String

  """All values greater than the given value."""
  gitpassword_gt: String

  """All values greater than or equal the given value."""
  gitpassword_gte: String

  """All values containing the given string."""
  gitpassword_contains: String

  """All values not containing the given string."""
  gitpassword_not_contains: String

  """All values starting with the given string."""
  gitpassword_starts_with: String

  """All values not starting with the given string."""
  gitpassword_not_starts_with: String

  """All values ending with the given string."""
  gitpassword_ends_with: String

  """All values not ending with the given string."""
  gitpassword_not_ends_with: String
  globFilter: String

  """All values that are not equal to given value."""
  globFilter_not: String

  """All values that are contained in given list."""
  globFilter_in: [String!]

  """All values that are not contained in given list."""
  globFilter_not_in: [String!]

  """All values less than the given value."""
  globFilter_lt: String

  """All values less than or equal the given value."""
  globFilter_lte: String

  """All values greater than the given value."""
  globFilter_gt: String

  """All values greater than or equal the given value."""
  globFilter_gte: String

  """All values containing the given string."""
  globFilter_contains: String

  """All values not containing the given string."""
  globFilter_not_contains: String

  """All values starting with the given string."""
  globFilter_starts_with: String

  """All values not starting with the given string."""
  globFilter_not_starts_with: String

  """All values ending with the given string."""
  globFilter_ends_with: String

  """All values not ending with the given string."""
  globFilter_not_ends_with: String
  testSet: TestSetWhereInput
}

input TestSetRepositoryWhereUniqueInput {
  id: ID
}

input TestSetScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  useMatchingMode: TestSetMatchingModeType

  """All values that are not equal to given value."""
  useMatchingMode_not: TestSetMatchingModeType

  """All values that are contained in given list."""
  useMatchingMode_in: [TestSetMatchingModeType!]

  """All values that are not contained in given list."""
  useMatchingMode_not_in: [TestSetMatchingModeType!]
  expandConvos: Boolean

  """All values that are not equal to given value."""
  expandConvos_not: Boolean
  expandConvosMode: TestSetExpandConvosModeType

  """All values that are not equal to given value."""
  expandConvosMode_not: TestSetExpandConvosModeType

  """All values that are contained in given list."""
  expandConvosMode_in: [TestSetExpandConvosModeType!]

  """All values that are not contained in given list."""
  expandConvosMode_not_in: [TestSetExpandConvosModeType!]
  expandConvosModeRandomCount: Int

  """All values that are not equal to given value."""
  expandConvosModeRandomCount_not: Int

  """All values that are contained in given list."""
  expandConvosModeRandomCount_in: [Int!]

  """All values that are not contained in given list."""
  expandConvosModeRandomCount_not_in: [Int!]

  """All values less than the given value."""
  expandConvosModeRandomCount_lt: Int

  """All values less than or equal the given value."""
  expandConvosModeRandomCount_lte: Int

  """All values greater than the given value."""
  expandConvosModeRandomCount_gt: Int

  """All values greater than or equal the given value."""
  expandConvosModeRandomCount_gte: Int
  expandUtterancesToConvos: Boolean

  """All values that are not equal to given value."""
  expandUtterancesToConvos_not: Boolean
  expandUtterancesIncomprehension: String

  """All values that are not equal to given value."""
  expandUtterancesIncomprehension_not: String

  """All values that are contained in given list."""
  expandUtterancesIncomprehension_in: [String!]

  """All values that are not contained in given list."""
  expandUtterancesIncomprehension_not_in: [String!]

  """All values less than the given value."""
  expandUtterancesIncomprehension_lt: String

  """All values less than or equal the given value."""
  expandUtterancesIncomprehension_lte: String

  """All values greater than the given value."""
  expandUtterancesIncomprehension_gt: String

  """All values greater than or equal the given value."""
  expandUtterancesIncomprehension_gte: String

  """All values containing the given string."""
  expandUtterancesIncomprehension_contains: String

  """All values not containing the given string."""
  expandUtterancesIncomprehension_not_contains: String

  """All values starting with the given string."""
  expandUtterancesIncomprehension_starts_with: String

  """All values not starting with the given string."""
  expandUtterancesIncomprehension_not_starts_with: String

  """All values ending with the given string."""
  expandUtterancesIncomprehension_ends_with: String

  """All values not ending with the given string."""
  expandUtterancesIncomprehension_not_ends_with: String
  useScriptingMemory: Boolean

  """All values that are not equal to given value."""
  useScriptingMemory_not: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType

  """All values that are not equal to given value."""
  useScriptingMemoryMatchingMode_not: TestSetMemoryMatchingModeType

  """All values that are contained in given list."""
  useScriptingMemoryMatchingMode_in: [TestSetMemoryMatchingModeType!]

  """All values that are not contained in given list."""
  useScriptingMemoryMatchingMode_not_in: [TestSetMemoryMatchingModeType!]
  expandScriptingMemory: Boolean

  """All values that are not equal to given value."""
  expandScriptingMemory_not: Boolean
  normalizeText: Boolean

  """All values that are not equal to given value."""
  normalizeText_not: Boolean
  excelHasConvos: Boolean

  """All values that are not equal to given value."""
  excelHasConvos_not: Boolean
  excelHasPartialConvos: Boolean

  """All values that are not equal to given value."""
  excelHasPartialConvos_not: Boolean
  excelHasUtterances: Boolean

  """All values that are not equal to given value."""
  excelHasUtterances_not: Boolean
  excelWorksheetsConvos: String

  """All values that are not equal to given value."""
  excelWorksheetsConvos_not: String

  """All values that are contained in given list."""
  excelWorksheetsConvos_in: [String!]

  """All values that are not contained in given list."""
  excelWorksheetsConvos_not_in: [String!]

  """All values less than the given value."""
  excelWorksheetsConvos_lt: String

  """All values less than or equal the given value."""
  excelWorksheetsConvos_lte: String

  """All values greater than the given value."""
  excelWorksheetsConvos_gt: String

  """All values greater than or equal the given value."""
  excelWorksheetsConvos_gte: String

  """All values containing the given string."""
  excelWorksheetsConvos_contains: String

  """All values not containing the given string."""
  excelWorksheetsConvos_not_contains: String

  """All values starting with the given string."""
  excelWorksheetsConvos_starts_with: String

  """All values not starting with the given string."""
  excelWorksheetsConvos_not_starts_with: String

  """All values ending with the given string."""
  excelWorksheetsConvos_ends_with: String

  """All values not ending with the given string."""
  excelWorksheetsConvos_not_ends_with: String
  excelWorksheetsPartialConvos: String

  """All values that are not equal to given value."""
  excelWorksheetsPartialConvos_not: String

  """All values that are contained in given list."""
  excelWorksheetsPartialConvos_in: [String!]

  """All values that are not contained in given list."""
  excelWorksheetsPartialConvos_not_in: [String!]

  """All values less than the given value."""
  excelWorksheetsPartialConvos_lt: String

  """All values less than or equal the given value."""
  excelWorksheetsPartialConvos_lte: String

  """All values greater than the given value."""
  excelWorksheetsPartialConvos_gt: String

  """All values greater than or equal the given value."""
  excelWorksheetsPartialConvos_gte: String

  """All values containing the given string."""
  excelWorksheetsPartialConvos_contains: String

  """All values not containing the given string."""
  excelWorksheetsPartialConvos_not_contains: String

  """All values starting with the given string."""
  excelWorksheetsPartialConvos_starts_with: String

  """All values not starting with the given string."""
  excelWorksheetsPartialConvos_not_starts_with: String

  """All values ending with the given string."""
  excelWorksheetsPartialConvos_ends_with: String

  """All values not ending with the given string."""
  excelWorksheetsPartialConvos_not_ends_with: String
  excelWorksheetsUtterances: String

  """All values that are not equal to given value."""
  excelWorksheetsUtterances_not: String

  """All values that are contained in given list."""
  excelWorksheetsUtterances_in: [String!]

  """All values that are not contained in given list."""
  excelWorksheetsUtterances_not_in: [String!]

  """All values less than the given value."""
  excelWorksheetsUtterances_lt: String

  """All values less than or equal the given value."""
  excelWorksheetsUtterances_lte: String

  """All values greater than the given value."""
  excelWorksheetsUtterances_gt: String

  """All values greater than or equal the given value."""
  excelWorksheetsUtterances_gte: String

  """All values containing the given string."""
  excelWorksheetsUtterances_contains: String

  """All values not containing the given string."""
  excelWorksheetsUtterances_not_contains: String

  """All values starting with the given string."""
  excelWorksheetsUtterances_starts_with: String

  """All values not starting with the given string."""
  excelWorksheetsUtterances_not_starts_with: String

  """All values ending with the given string."""
  excelWorksheetsUtterances_ends_with: String

  """All values not ending with the given string."""
  excelWorksheetsUtterances_not_ends_with: String
  excelStartRow: Int

  """All values that are not equal to given value."""
  excelStartRow_not: Int

  """All values that are contained in given list."""
  excelStartRow_in: [Int!]

  """All values that are not contained in given list."""
  excelStartRow_not_in: [Int!]

  """All values less than the given value."""
  excelStartRow_lt: Int

  """All values less than or equal the given value."""
  excelStartRow_lte: Int

  """All values greater than the given value."""
  excelStartRow_gt: Int

  """All values greater than or equal the given value."""
  excelStartRow_gte: Int
  excelStartCol: Int

  """All values that are not equal to given value."""
  excelStartCol_not: Int

  """All values that are contained in given list."""
  excelStartCol_in: [Int!]

  """All values that are not contained in given list."""
  excelStartCol_not_in: [Int!]

  """All values less than the given value."""
  excelStartCol_lt: Int

  """All values less than or equal the given value."""
  excelStartCol_lte: Int

  """All values greater than the given value."""
  excelStartCol_gt: Int

  """All values greater than or equal the given value."""
  excelStartCol_gte: Int
  selectionType: TestSetSelectionType

  """All values that are not equal to given value."""
  selectionType_not: TestSetSelectionType

  """All values that are contained in given list."""
  selectionType_in: [TestSetSelectionType!]

  """All values that are not contained in given list."""
  selectionType_not_in: [TestSetSelectionType!]
  statsUpdatedAt: DateTime

  """All values that are not equal to given value."""
  statsUpdatedAt_not: DateTime

  """All values that are contained in given list."""
  statsUpdatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  statsUpdatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  statsUpdatedAt_lt: DateTime

  """All values less than or equal the given value."""
  statsUpdatedAt_lte: DateTime

  """All values greater than the given value."""
  statsUpdatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  statsUpdatedAt_gte: DateTime
  statsConvoCount: Int

  """All values that are not equal to given value."""
  statsConvoCount_not: Int

  """All values that are contained in given list."""
  statsConvoCount_in: [Int!]

  """All values that are not contained in given list."""
  statsConvoCount_not_in: [Int!]

  """All values less than the given value."""
  statsConvoCount_lt: Int

  """All values less than or equal the given value."""
  statsConvoCount_lte: Int

  """All values greater than the given value."""
  statsConvoCount_gt: Int

  """All values greater than or equal the given value."""
  statsConvoCount_gte: Int
  statsPartialConvoCount: Int

  """All values that are not equal to given value."""
  statsPartialConvoCount_not: Int

  """All values that are contained in given list."""
  statsPartialConvoCount_in: [Int!]

  """All values that are not contained in given list."""
  statsPartialConvoCount_not_in: [Int!]

  """All values less than the given value."""
  statsPartialConvoCount_lt: Int

  """All values less than or equal the given value."""
  statsPartialConvoCount_lte: Int

  """All values greater than the given value."""
  statsPartialConvoCount_gt: Int

  """All values greater than or equal the given value."""
  statsPartialConvoCount_gte: Int
  statsUtterancesCount: Int

  """All values that are not equal to given value."""
  statsUtterancesCount_not: Int

  """All values that are contained in given list."""
  statsUtterancesCount_in: [Int!]

  """All values that are not contained in given list."""
  statsUtterancesCount_not_in: [Int!]

  """All values less than the given value."""
  statsUtterancesCount_lt: Int

  """All values less than or equal the given value."""
  statsUtterancesCount_lte: Int

  """All values greater than the given value."""
  statsUtterancesCount_gt: Int

  """All values greater than or equal the given value."""
  statsUtterancesCount_gte: Int
  statsScriptingMemoryCount: Int

  """All values that are not equal to given value."""
  statsScriptingMemoryCount_not: Int

  """All values that are contained in given list."""
  statsScriptingMemoryCount_in: [Int!]

  """All values that are not contained in given list."""
  statsScriptingMemoryCount_not_in: [Int!]

  """All values less than the given value."""
  statsScriptingMemoryCount_lt: Int

  """All values less than or equal the given value."""
  statsScriptingMemoryCount_lte: Int

  """All values greater than the given value."""
  statsScriptingMemoryCount_gt: Int

  """All values greater than or equal the given value."""
  statsScriptingMemoryCount_gte: Int
}

type TestSetScript implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  script: String!
  scriptType: TestSetScriptType!
  testSet: TestSet!
}

"""A connection to a list of items."""
type TestSetScriptConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TestSetScriptEdge]!
  aggregate: AggregateTestSetScript!
}

input TestSetScriptCreateInput {
  name: String!
  description: String
  script: String!
  scriptType: TestSetScriptType!
  testSet: TestSetCreateOneWithoutScriptsInput!
}

input TestSetScriptCreateManyWithoutTestSetInput {
  create: [TestSetScriptCreateWithoutTestSetInput!]
  connect: [TestSetScriptWhereUniqueInput!]
}

input TestSetScriptCreateOneInput {
  create: TestSetScriptCreateInput
  connect: TestSetScriptWhereUniqueInput
}

input TestSetScriptCreateWithoutTestSetInput {
  name: String!
  description: String
  script: String!
  scriptType: TestSetScriptType!
}

"""An edge in a connection."""
type TestSetScriptEdge {
  """The item at the end of the edge."""
  node: TestSetScript!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TestSetScriptOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  script_ASC
  script_DESC
  scriptType_ASC
  scriptType_DESC
}

type TestSetScriptPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  script: String!
  scriptType: TestSetScriptType!
}

input TestSetScriptScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetScriptScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetScriptScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetScriptScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  script: String

  """All values that are not equal to given value."""
  script_not: String

  """All values that are contained in given list."""
  script_in: [String!]

  """All values that are not contained in given list."""
  script_not_in: [String!]

  """All values less than the given value."""
  script_lt: String

  """All values less than or equal the given value."""
  script_lte: String

  """All values greater than the given value."""
  script_gt: String

  """All values greater than or equal the given value."""
  script_gte: String

  """All values containing the given string."""
  script_contains: String

  """All values not containing the given string."""
  script_not_contains: String

  """All values starting with the given string."""
  script_starts_with: String

  """All values not starting with the given string."""
  script_not_starts_with: String

  """All values ending with the given string."""
  script_ends_with: String

  """All values not ending with the given string."""
  script_not_ends_with: String
  scriptType: TestSetScriptType

  """All values that are not equal to given value."""
  scriptType_not: TestSetScriptType

  """All values that are contained in given list."""
  scriptType_in: [TestSetScriptType!]

  """All values that are not contained in given list."""
  scriptType_not_in: [TestSetScriptType!]
}

type TestSetScriptSubscriptionPayload {
  mutation: MutationType!
  node: TestSetScript
  updatedFields: [String!]
  previousValues: TestSetScriptPreviousValues
}

input TestSetScriptSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetScriptSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetScriptSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetScriptSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TestSetScriptWhereInput
}

enum TestSetScriptType {
  SCRIPTING_TYPE_CONVO
  SCRIPTING_TYPE_PCONVO
  SCRIPTING_TYPE_UTTERANCES
  SCRIPTING_TYPE_SCRIPTING_MEMORY
}

input TestSetScriptUpdateDataInput {
  name: String
  description: String
  script: String
  scriptType: TestSetScriptType
  testSet: TestSetUpdateOneRequiredWithoutScriptsInput
}

input TestSetScriptUpdateInput {
  name: String
  description: String
  script: String
  scriptType: TestSetScriptType
  testSet: TestSetUpdateOneRequiredWithoutScriptsInput
}

input TestSetScriptUpdateManyDataInput {
  name: String
  description: String
  script: String
  scriptType: TestSetScriptType
}

input TestSetScriptUpdateManyMutationInput {
  name: String
  description: String
  script: String
  scriptType: TestSetScriptType
}

input TestSetScriptUpdateManyWithoutTestSetInput {
  create: [TestSetScriptCreateWithoutTestSetInput!]
  connect: [TestSetScriptWhereUniqueInput!]
  set: [TestSetScriptWhereUniqueInput!]
  disconnect: [TestSetScriptWhereUniqueInput!]
  delete: [TestSetScriptWhereUniqueInput!]
  update: [TestSetScriptUpdateWithWhereUniqueWithoutTestSetInput!]
  updateMany: [TestSetScriptUpdateManyWithWhereNestedInput!]
  deleteMany: [TestSetScriptScalarWhereInput!]
  upsert: [TestSetScriptUpsertWithWhereUniqueWithoutTestSetInput!]
}

input TestSetScriptUpdateManyWithWhereNestedInput {
  where: TestSetScriptScalarWhereInput!
  data: TestSetScriptUpdateManyDataInput!
}

input TestSetScriptUpdateOneInput {
  create: TestSetScriptCreateInput
  connect: TestSetScriptWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TestSetScriptUpdateDataInput
  upsert: TestSetScriptUpsertNestedInput
}

input TestSetScriptUpdateWithoutTestSetDataInput {
  name: String
  description: String
  script: String
  scriptType: TestSetScriptType
}

input TestSetScriptUpdateWithWhereUniqueWithoutTestSetInput {
  where: TestSetScriptWhereUniqueInput!
  data: TestSetScriptUpdateWithoutTestSetDataInput!
}

input TestSetScriptUpsertNestedInput {
  update: TestSetScriptUpdateDataInput!
  create: TestSetScriptCreateInput!
}

input TestSetScriptUpsertWithWhereUniqueWithoutTestSetInput {
  where: TestSetScriptWhereUniqueInput!
  update: TestSetScriptUpdateWithoutTestSetDataInput!
  create: TestSetScriptCreateWithoutTestSetInput!
}

input TestSetScriptWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetScriptWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetScriptWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetScriptWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  script: String

  """All values that are not equal to given value."""
  script_not: String

  """All values that are contained in given list."""
  script_in: [String!]

  """All values that are not contained in given list."""
  script_not_in: [String!]

  """All values less than the given value."""
  script_lt: String

  """All values less than or equal the given value."""
  script_lte: String

  """All values greater than the given value."""
  script_gt: String

  """All values greater than or equal the given value."""
  script_gte: String

  """All values containing the given string."""
  script_contains: String

  """All values not containing the given string."""
  script_not_contains: String

  """All values starting with the given string."""
  script_starts_with: String

  """All values not starting with the given string."""
  script_not_starts_with: String

  """All values ending with the given string."""
  script_ends_with: String

  """All values not ending with the given string."""
  script_not_ends_with: String
  scriptType: TestSetScriptType

  """All values that are not equal to given value."""
  scriptType_not: TestSetScriptType

  """All values that are contained in given list."""
  scriptType_in: [TestSetScriptType!]

  """All values that are not contained in given list."""
  scriptType_not_in: [TestSetScriptType!]
  testSet: TestSetWhereInput
}

input TestSetScriptWhereUniqueInput {
  id: ID
}

enum TestSetSelectionType {
  SELECTION_TYPE_LOCAL_ONLY
  SELECTION_TYPE_REMOTE_ONLY
  SELECTION_TYPE_LOCAL_AND_REMOTE
}

type TestSetSubscriptionPayload {
  mutation: MutationType!
  node: TestSet
  updatedFields: [String!]
  previousValues: TestSetPreviousValues
}

input TestSetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TestSetWhereInput
}

input TestSetUpdateDataInput {
  name: String
  description: String
  useMatchingMode: TestSetMatchingModeType
  expandConvos: Boolean
  expandConvosMode: TestSetExpandConvosModeType
  expandConvosModeRandomCount: Int
  expandUtterancesToConvos: Boolean
  expandUtterancesIncomprehension: String
  useScriptingMemory: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType
  expandScriptingMemory: Boolean
  normalizeText: Boolean
  excelHasConvos: Boolean
  excelHasPartialConvos: Boolean
  excelHasUtterances: Boolean
  excelWorksheetsConvos: String
  excelWorksheetsPartialConvos: String
  excelWorksheetsUtterances: String
  excelStartRow: Int
  excelStartCol: Int
  selectionType: TestSetSelectionType
  statsUpdatedAt: DateTime
  statsConvoCount: Int
  statsPartialConvoCount: Int
  statsUtterancesCount: Int
  statsScriptingMemoryCount: Int
  tags: TestSetUpdatetagsInput
  client: ClientUpdateOneInput
  scripts: TestSetScriptUpdateManyWithoutTestSetInput
  repositories: TestSetRepositoryUpdateManyWithoutTestSetInput
  folders: TestSetFolderUpdateManyWithoutTestSetInput
  excels: TestSetExcelUpdateManyWithoutTestSetInput
  statsCompiledConvos: TestSetCompiledConvoUpdateManyInput
  dependencies: TestSetUpdateManyInput
}

input TestSetUpdateInput {
  name: String
  description: String
  useMatchingMode: TestSetMatchingModeType
  expandConvos: Boolean
  expandConvosMode: TestSetExpandConvosModeType
  expandConvosModeRandomCount: Int
  expandUtterancesToConvos: Boolean
  expandUtterancesIncomprehension: String
  useScriptingMemory: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType
  expandScriptingMemory: Boolean
  normalizeText: Boolean
  excelHasConvos: Boolean
  excelHasPartialConvos: Boolean
  excelHasUtterances: Boolean
  excelWorksheetsConvos: String
  excelWorksheetsPartialConvos: String
  excelWorksheetsUtterances: String
  excelStartRow: Int
  excelStartCol: Int
  selectionType: TestSetSelectionType
  statsUpdatedAt: DateTime
  statsConvoCount: Int
  statsPartialConvoCount: Int
  statsUtterancesCount: Int
  statsScriptingMemoryCount: Int
  tags: TestSetUpdatetagsInput
  client: ClientUpdateOneInput
  scripts: TestSetScriptUpdateManyWithoutTestSetInput
  repositories: TestSetRepositoryUpdateManyWithoutTestSetInput
  folders: TestSetFolderUpdateManyWithoutTestSetInput
  excels: TestSetExcelUpdateManyWithoutTestSetInput
  statsCompiledConvos: TestSetCompiledConvoUpdateManyInput
  dependencies: TestSetUpdateManyInput
}

input TestSetUpdateManyDataInput {
  name: String
  description: String
  useMatchingMode: TestSetMatchingModeType
  expandConvos: Boolean
  expandConvosMode: TestSetExpandConvosModeType
  expandConvosModeRandomCount: Int
  expandUtterancesToConvos: Boolean
  expandUtterancesIncomprehension: String
  useScriptingMemory: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType
  expandScriptingMemory: Boolean
  normalizeText: Boolean
  excelHasConvos: Boolean
  excelHasPartialConvos: Boolean
  excelHasUtterances: Boolean
  excelWorksheetsConvos: String
  excelWorksheetsPartialConvos: String
  excelWorksheetsUtterances: String
  excelStartRow: Int
  excelStartCol: Int
  selectionType: TestSetSelectionType
  statsUpdatedAt: DateTime
  statsConvoCount: Int
  statsPartialConvoCount: Int
  statsUtterancesCount: Int
  statsScriptingMemoryCount: Int
  tags: TestSetUpdatetagsInput
}

input TestSetUpdateManyInput {
  create: [TestSetCreateInput!]
  connect: [TestSetWhereUniqueInput!]
  set: [TestSetWhereUniqueInput!]
  disconnect: [TestSetWhereUniqueInput!]
  delete: [TestSetWhereUniqueInput!]
  update: [TestSetUpdateWithWhereUniqueNestedInput!]
  updateMany: [TestSetUpdateManyWithWhereNestedInput!]
  deleteMany: [TestSetScalarWhereInput!]
  upsert: [TestSetUpsertWithWhereUniqueNestedInput!]
}

input TestSetUpdateManyMutationInput {
  name: String
  description: String
  useMatchingMode: TestSetMatchingModeType
  expandConvos: Boolean
  expandConvosMode: TestSetExpandConvosModeType
  expandConvosModeRandomCount: Int
  expandUtterancesToConvos: Boolean
  expandUtterancesIncomprehension: String
  useScriptingMemory: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType
  expandScriptingMemory: Boolean
  normalizeText: Boolean
  excelHasConvos: Boolean
  excelHasPartialConvos: Boolean
  excelHasUtterances: Boolean
  excelWorksheetsConvos: String
  excelWorksheetsPartialConvos: String
  excelWorksheetsUtterances: String
  excelStartRow: Int
  excelStartCol: Int
  selectionType: TestSetSelectionType
  statsUpdatedAt: DateTime
  statsConvoCount: Int
  statsPartialConvoCount: Int
  statsUtterancesCount: Int
  statsScriptingMemoryCount: Int
  tags: TestSetUpdatetagsInput
}

input TestSetUpdateManyWithWhereNestedInput {
  where: TestSetScalarWhereInput!
  data: TestSetUpdateManyDataInput!
}

input TestSetUpdateOneInput {
  create: TestSetCreateInput
  connect: TestSetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TestSetUpdateDataInput
  upsert: TestSetUpsertNestedInput
}

input TestSetUpdateOneRequiredWithoutExcelsInput {
  create: TestSetCreateWithoutExcelsInput
  connect: TestSetWhereUniqueInput
  update: TestSetUpdateWithoutExcelsDataInput
  upsert: TestSetUpsertWithoutExcelsInput
}

input TestSetUpdateOneRequiredWithoutFoldersInput {
  create: TestSetCreateWithoutFoldersInput
  connect: TestSetWhereUniqueInput
  update: TestSetUpdateWithoutFoldersDataInput
  upsert: TestSetUpsertWithoutFoldersInput
}

input TestSetUpdateOneRequiredWithoutRepositoriesInput {
  create: TestSetCreateWithoutRepositoriesInput
  connect: TestSetWhereUniqueInput
  update: TestSetUpdateWithoutRepositoriesDataInput
  upsert: TestSetUpsertWithoutRepositoriesInput
}

input TestSetUpdateOneRequiredWithoutScriptsInput {
  create: TestSetCreateWithoutScriptsInput
  connect: TestSetWhereUniqueInput
  update: TestSetUpdateWithoutScriptsDataInput
  upsert: TestSetUpsertWithoutScriptsInput
}

input TestSetUpdatetagsInput {
  set: [String!]
}

input TestSetUpdateWithoutExcelsDataInput {
  name: String
  description: String
  useMatchingMode: TestSetMatchingModeType
  expandConvos: Boolean
  expandConvosMode: TestSetExpandConvosModeType
  expandConvosModeRandomCount: Int
  expandUtterancesToConvos: Boolean
  expandUtterancesIncomprehension: String
  useScriptingMemory: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType
  expandScriptingMemory: Boolean
  normalizeText: Boolean
  excelHasConvos: Boolean
  excelHasPartialConvos: Boolean
  excelHasUtterances: Boolean
  excelWorksheetsConvos: String
  excelWorksheetsPartialConvos: String
  excelWorksheetsUtterances: String
  excelStartRow: Int
  excelStartCol: Int
  selectionType: TestSetSelectionType
  statsUpdatedAt: DateTime
  statsConvoCount: Int
  statsPartialConvoCount: Int
  statsUtterancesCount: Int
  statsScriptingMemoryCount: Int
  tags: TestSetUpdatetagsInput
  client: ClientUpdateOneInput
  scripts: TestSetScriptUpdateManyWithoutTestSetInput
  repositories: TestSetRepositoryUpdateManyWithoutTestSetInput
  folders: TestSetFolderUpdateManyWithoutTestSetInput
  statsCompiledConvos: TestSetCompiledConvoUpdateManyInput
  dependencies: TestSetUpdateManyInput
}

input TestSetUpdateWithoutFoldersDataInput {
  name: String
  description: String
  useMatchingMode: TestSetMatchingModeType
  expandConvos: Boolean
  expandConvosMode: TestSetExpandConvosModeType
  expandConvosModeRandomCount: Int
  expandUtterancesToConvos: Boolean
  expandUtterancesIncomprehension: String
  useScriptingMemory: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType
  expandScriptingMemory: Boolean
  normalizeText: Boolean
  excelHasConvos: Boolean
  excelHasPartialConvos: Boolean
  excelHasUtterances: Boolean
  excelWorksheetsConvos: String
  excelWorksheetsPartialConvos: String
  excelWorksheetsUtterances: String
  excelStartRow: Int
  excelStartCol: Int
  selectionType: TestSetSelectionType
  statsUpdatedAt: DateTime
  statsConvoCount: Int
  statsPartialConvoCount: Int
  statsUtterancesCount: Int
  statsScriptingMemoryCount: Int
  tags: TestSetUpdatetagsInput
  client: ClientUpdateOneInput
  scripts: TestSetScriptUpdateManyWithoutTestSetInput
  repositories: TestSetRepositoryUpdateManyWithoutTestSetInput
  excels: TestSetExcelUpdateManyWithoutTestSetInput
  statsCompiledConvos: TestSetCompiledConvoUpdateManyInput
  dependencies: TestSetUpdateManyInput
}

input TestSetUpdateWithoutRepositoriesDataInput {
  name: String
  description: String
  useMatchingMode: TestSetMatchingModeType
  expandConvos: Boolean
  expandConvosMode: TestSetExpandConvosModeType
  expandConvosModeRandomCount: Int
  expandUtterancesToConvos: Boolean
  expandUtterancesIncomprehension: String
  useScriptingMemory: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType
  expandScriptingMemory: Boolean
  normalizeText: Boolean
  excelHasConvos: Boolean
  excelHasPartialConvos: Boolean
  excelHasUtterances: Boolean
  excelWorksheetsConvos: String
  excelWorksheetsPartialConvos: String
  excelWorksheetsUtterances: String
  excelStartRow: Int
  excelStartCol: Int
  selectionType: TestSetSelectionType
  statsUpdatedAt: DateTime
  statsConvoCount: Int
  statsPartialConvoCount: Int
  statsUtterancesCount: Int
  statsScriptingMemoryCount: Int
  tags: TestSetUpdatetagsInput
  client: ClientUpdateOneInput
  scripts: TestSetScriptUpdateManyWithoutTestSetInput
  folders: TestSetFolderUpdateManyWithoutTestSetInput
  excels: TestSetExcelUpdateManyWithoutTestSetInput
  statsCompiledConvos: TestSetCompiledConvoUpdateManyInput
  dependencies: TestSetUpdateManyInput
}

input TestSetUpdateWithoutScriptsDataInput {
  name: String
  description: String
  useMatchingMode: TestSetMatchingModeType
  expandConvos: Boolean
  expandConvosMode: TestSetExpandConvosModeType
  expandConvosModeRandomCount: Int
  expandUtterancesToConvos: Boolean
  expandUtterancesIncomprehension: String
  useScriptingMemory: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType
  expandScriptingMemory: Boolean
  normalizeText: Boolean
  excelHasConvos: Boolean
  excelHasPartialConvos: Boolean
  excelHasUtterances: Boolean
  excelWorksheetsConvos: String
  excelWorksheetsPartialConvos: String
  excelWorksheetsUtterances: String
  excelStartRow: Int
  excelStartCol: Int
  selectionType: TestSetSelectionType
  statsUpdatedAt: DateTime
  statsConvoCount: Int
  statsPartialConvoCount: Int
  statsUtterancesCount: Int
  statsScriptingMemoryCount: Int
  tags: TestSetUpdatetagsInput
  client: ClientUpdateOneInput
  repositories: TestSetRepositoryUpdateManyWithoutTestSetInput
  folders: TestSetFolderUpdateManyWithoutTestSetInput
  excels: TestSetExcelUpdateManyWithoutTestSetInput
  statsCompiledConvos: TestSetCompiledConvoUpdateManyInput
  dependencies: TestSetUpdateManyInput
}

input TestSetUpdateWithWhereUniqueNestedInput {
  where: TestSetWhereUniqueInput!
  data: TestSetUpdateDataInput!
}

input TestSetUpsertNestedInput {
  update: TestSetUpdateDataInput!
  create: TestSetCreateInput!
}

input TestSetUpsertWithoutExcelsInput {
  update: TestSetUpdateWithoutExcelsDataInput!
  create: TestSetCreateWithoutExcelsInput!
}

input TestSetUpsertWithoutFoldersInput {
  update: TestSetUpdateWithoutFoldersDataInput!
  create: TestSetCreateWithoutFoldersInput!
}

input TestSetUpsertWithoutRepositoriesInput {
  update: TestSetUpdateWithoutRepositoriesDataInput!
  create: TestSetCreateWithoutRepositoriesInput!
}

input TestSetUpsertWithoutScriptsInput {
  update: TestSetUpdateWithoutScriptsDataInput!
  create: TestSetCreateWithoutScriptsInput!
}

input TestSetUpsertWithWhereUniqueNestedInput {
  where: TestSetWhereUniqueInput!
  update: TestSetUpdateDataInput!
  create: TestSetCreateInput!
}

input TestSetWhereInput {
  """Logical AND on all given filters."""
  AND: [TestSetWhereInput!]

  """Logical OR on all given filters."""
  OR: [TestSetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TestSetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  useMatchingMode: TestSetMatchingModeType

  """All values that are not equal to given value."""
  useMatchingMode_not: TestSetMatchingModeType

  """All values that are contained in given list."""
  useMatchingMode_in: [TestSetMatchingModeType!]

  """All values that are not contained in given list."""
  useMatchingMode_not_in: [TestSetMatchingModeType!]
  expandConvos: Boolean

  """All values that are not equal to given value."""
  expandConvos_not: Boolean
  expandConvosMode: TestSetExpandConvosModeType

  """All values that are not equal to given value."""
  expandConvosMode_not: TestSetExpandConvosModeType

  """All values that are contained in given list."""
  expandConvosMode_in: [TestSetExpandConvosModeType!]

  """All values that are not contained in given list."""
  expandConvosMode_not_in: [TestSetExpandConvosModeType!]
  expandConvosModeRandomCount: Int

  """All values that are not equal to given value."""
  expandConvosModeRandomCount_not: Int

  """All values that are contained in given list."""
  expandConvosModeRandomCount_in: [Int!]

  """All values that are not contained in given list."""
  expandConvosModeRandomCount_not_in: [Int!]

  """All values less than the given value."""
  expandConvosModeRandomCount_lt: Int

  """All values less than or equal the given value."""
  expandConvosModeRandomCount_lte: Int

  """All values greater than the given value."""
  expandConvosModeRandomCount_gt: Int

  """All values greater than or equal the given value."""
  expandConvosModeRandomCount_gte: Int
  expandUtterancesToConvos: Boolean

  """All values that are not equal to given value."""
  expandUtterancesToConvos_not: Boolean
  expandUtterancesIncomprehension: String

  """All values that are not equal to given value."""
  expandUtterancesIncomprehension_not: String

  """All values that are contained in given list."""
  expandUtterancesIncomprehension_in: [String!]

  """All values that are not contained in given list."""
  expandUtterancesIncomprehension_not_in: [String!]

  """All values less than the given value."""
  expandUtterancesIncomprehension_lt: String

  """All values less than or equal the given value."""
  expandUtterancesIncomprehension_lte: String

  """All values greater than the given value."""
  expandUtterancesIncomprehension_gt: String

  """All values greater than or equal the given value."""
  expandUtterancesIncomprehension_gte: String

  """All values containing the given string."""
  expandUtterancesIncomprehension_contains: String

  """All values not containing the given string."""
  expandUtterancesIncomprehension_not_contains: String

  """All values starting with the given string."""
  expandUtterancesIncomprehension_starts_with: String

  """All values not starting with the given string."""
  expandUtterancesIncomprehension_not_starts_with: String

  """All values ending with the given string."""
  expandUtterancesIncomprehension_ends_with: String

  """All values not ending with the given string."""
  expandUtterancesIncomprehension_not_ends_with: String
  useScriptingMemory: Boolean

  """All values that are not equal to given value."""
  useScriptingMemory_not: Boolean
  useScriptingMemoryMatchingMode: TestSetMemoryMatchingModeType

  """All values that are not equal to given value."""
  useScriptingMemoryMatchingMode_not: TestSetMemoryMatchingModeType

  """All values that are contained in given list."""
  useScriptingMemoryMatchingMode_in: [TestSetMemoryMatchingModeType!]

  """All values that are not contained in given list."""
  useScriptingMemoryMatchingMode_not_in: [TestSetMemoryMatchingModeType!]
  expandScriptingMemory: Boolean

  """All values that are not equal to given value."""
  expandScriptingMemory_not: Boolean
  normalizeText: Boolean

  """All values that are not equal to given value."""
  normalizeText_not: Boolean
  excelHasConvos: Boolean

  """All values that are not equal to given value."""
  excelHasConvos_not: Boolean
  excelHasPartialConvos: Boolean

  """All values that are not equal to given value."""
  excelHasPartialConvos_not: Boolean
  excelHasUtterances: Boolean

  """All values that are not equal to given value."""
  excelHasUtterances_not: Boolean
  excelWorksheetsConvos: String

  """All values that are not equal to given value."""
  excelWorksheetsConvos_not: String

  """All values that are contained in given list."""
  excelWorksheetsConvos_in: [String!]

  """All values that are not contained in given list."""
  excelWorksheetsConvos_not_in: [String!]

  """All values less than the given value."""
  excelWorksheetsConvos_lt: String

  """All values less than or equal the given value."""
  excelWorksheetsConvos_lte: String

  """All values greater than the given value."""
  excelWorksheetsConvos_gt: String

  """All values greater than or equal the given value."""
  excelWorksheetsConvos_gte: String

  """All values containing the given string."""
  excelWorksheetsConvos_contains: String

  """All values not containing the given string."""
  excelWorksheetsConvos_not_contains: String

  """All values starting with the given string."""
  excelWorksheetsConvos_starts_with: String

  """All values not starting with the given string."""
  excelWorksheetsConvos_not_starts_with: String

  """All values ending with the given string."""
  excelWorksheetsConvos_ends_with: String

  """All values not ending with the given string."""
  excelWorksheetsConvos_not_ends_with: String
  excelWorksheetsPartialConvos: String

  """All values that are not equal to given value."""
  excelWorksheetsPartialConvos_not: String

  """All values that are contained in given list."""
  excelWorksheetsPartialConvos_in: [String!]

  """All values that are not contained in given list."""
  excelWorksheetsPartialConvos_not_in: [String!]

  """All values less than the given value."""
  excelWorksheetsPartialConvos_lt: String

  """All values less than or equal the given value."""
  excelWorksheetsPartialConvos_lte: String

  """All values greater than the given value."""
  excelWorksheetsPartialConvos_gt: String

  """All values greater than or equal the given value."""
  excelWorksheetsPartialConvos_gte: String

  """All values containing the given string."""
  excelWorksheetsPartialConvos_contains: String

  """All values not containing the given string."""
  excelWorksheetsPartialConvos_not_contains: String

  """All values starting with the given string."""
  excelWorksheetsPartialConvos_starts_with: String

  """All values not starting with the given string."""
  excelWorksheetsPartialConvos_not_starts_with: String

  """All values ending with the given string."""
  excelWorksheetsPartialConvos_ends_with: String

  """All values not ending with the given string."""
  excelWorksheetsPartialConvos_not_ends_with: String
  excelWorksheetsUtterances: String

  """All values that are not equal to given value."""
  excelWorksheetsUtterances_not: String

  """All values that are contained in given list."""
  excelWorksheetsUtterances_in: [String!]

  """All values that are not contained in given list."""
  excelWorksheetsUtterances_not_in: [String!]

  """All values less than the given value."""
  excelWorksheetsUtterances_lt: String

  """All values less than or equal the given value."""
  excelWorksheetsUtterances_lte: String

  """All values greater than the given value."""
  excelWorksheetsUtterances_gt: String

  """All values greater than or equal the given value."""
  excelWorksheetsUtterances_gte: String

  """All values containing the given string."""
  excelWorksheetsUtterances_contains: String

  """All values not containing the given string."""
  excelWorksheetsUtterances_not_contains: String

  """All values starting with the given string."""
  excelWorksheetsUtterances_starts_with: String

  """All values not starting with the given string."""
  excelWorksheetsUtterances_not_starts_with: String

  """All values ending with the given string."""
  excelWorksheetsUtterances_ends_with: String

  """All values not ending with the given string."""
  excelWorksheetsUtterances_not_ends_with: String
  excelStartRow: Int

  """All values that are not equal to given value."""
  excelStartRow_not: Int

  """All values that are contained in given list."""
  excelStartRow_in: [Int!]

  """All values that are not contained in given list."""
  excelStartRow_not_in: [Int!]

  """All values less than the given value."""
  excelStartRow_lt: Int

  """All values less than or equal the given value."""
  excelStartRow_lte: Int

  """All values greater than the given value."""
  excelStartRow_gt: Int

  """All values greater than or equal the given value."""
  excelStartRow_gte: Int
  excelStartCol: Int

  """All values that are not equal to given value."""
  excelStartCol_not: Int

  """All values that are contained in given list."""
  excelStartCol_in: [Int!]

  """All values that are not contained in given list."""
  excelStartCol_not_in: [Int!]

  """All values less than the given value."""
  excelStartCol_lt: Int

  """All values less than or equal the given value."""
  excelStartCol_lte: Int

  """All values greater than the given value."""
  excelStartCol_gt: Int

  """All values greater than or equal the given value."""
  excelStartCol_gte: Int
  selectionType: TestSetSelectionType

  """All values that are not equal to given value."""
  selectionType_not: TestSetSelectionType

  """All values that are contained in given list."""
  selectionType_in: [TestSetSelectionType!]

  """All values that are not contained in given list."""
  selectionType_not_in: [TestSetSelectionType!]
  statsUpdatedAt: DateTime

  """All values that are not equal to given value."""
  statsUpdatedAt_not: DateTime

  """All values that are contained in given list."""
  statsUpdatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  statsUpdatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  statsUpdatedAt_lt: DateTime

  """All values less than or equal the given value."""
  statsUpdatedAt_lte: DateTime

  """All values greater than the given value."""
  statsUpdatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  statsUpdatedAt_gte: DateTime
  statsConvoCount: Int

  """All values that are not equal to given value."""
  statsConvoCount_not: Int

  """All values that are contained in given list."""
  statsConvoCount_in: [Int!]

  """All values that are not contained in given list."""
  statsConvoCount_not_in: [Int!]

  """All values less than the given value."""
  statsConvoCount_lt: Int

  """All values less than or equal the given value."""
  statsConvoCount_lte: Int

  """All values greater than the given value."""
  statsConvoCount_gt: Int

  """All values greater than or equal the given value."""
  statsConvoCount_gte: Int
  statsPartialConvoCount: Int

  """All values that are not equal to given value."""
  statsPartialConvoCount_not: Int

  """All values that are contained in given list."""
  statsPartialConvoCount_in: [Int!]

  """All values that are not contained in given list."""
  statsPartialConvoCount_not_in: [Int!]

  """All values less than the given value."""
  statsPartialConvoCount_lt: Int

  """All values less than or equal the given value."""
  statsPartialConvoCount_lte: Int

  """All values greater than the given value."""
  statsPartialConvoCount_gt: Int

  """All values greater than or equal the given value."""
  statsPartialConvoCount_gte: Int
  statsUtterancesCount: Int

  """All values that are not equal to given value."""
  statsUtterancesCount_not: Int

  """All values that are contained in given list."""
  statsUtterancesCount_in: [Int!]

  """All values that are not contained in given list."""
  statsUtterancesCount_not_in: [Int!]

  """All values less than the given value."""
  statsUtterancesCount_lt: Int

  """All values less than or equal the given value."""
  statsUtterancesCount_lte: Int

  """All values greater than the given value."""
  statsUtterancesCount_gt: Int

  """All values greater than or equal the given value."""
  statsUtterancesCount_gte: Int
  statsScriptingMemoryCount: Int

  """All values that are not equal to given value."""
  statsScriptingMemoryCount_not: Int

  """All values that are contained in given list."""
  statsScriptingMemoryCount_in: [Int!]

  """All values that are not contained in given list."""
  statsScriptingMemoryCount_not_in: [Int!]

  """All values less than the given value."""
  statsScriptingMemoryCount_lt: Int

  """All values less than or equal the given value."""
  statsScriptingMemoryCount_lte: Int

  """All values greater than the given value."""
  statsScriptingMemoryCount_gt: Int

  """All values greater than or equal the given value."""
  statsScriptingMemoryCount_gte: Int
  client: ClientWhereInput
  scripts_every: TestSetScriptWhereInput
  scripts_some: TestSetScriptWhereInput
  scripts_none: TestSetScriptWhereInput
  repositories_every: TestSetRepositoryWhereInput
  repositories_some: TestSetRepositoryWhereInput
  repositories_none: TestSetRepositoryWhereInput
  folders_every: TestSetFolderWhereInput
  folders_some: TestSetFolderWhereInput
  folders_none: TestSetFolderWhereInput
  excels_every: TestSetExcelWhereInput
  excels_some: TestSetExcelWhereInput
  excels_none: TestSetExcelWhereInput
  statsCompiledConvos_every: TestSetCompiledConvoWhereInput
  statsCompiledConvos_some: TestSetCompiledConvoWhereInput
  statsCompiledConvos_none: TestSetCompiledConvoWhereInput
  dependencies_every: TestSetWhereInput
  dependencies_some: TestSetWhereInput
  dependencies_none: TestSetWhereInput
}

input TestSetWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String
  name: String!
  roles(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRole!]
  clients(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Client!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String
  name: String!
  roles: UserRoleCreateManyInput
  clients: ClientCreateManyInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String
  name: String!
}

type UserRole implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  permissions: [String!]!
}

"""A connection to a list of items."""
type UserRoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserRoleEdge]!
  aggregate: AggregateUserRole!
}

input UserRoleCreateInput {
  name: String!
  description: String
  permissions: UserRoleCreatepermissionsInput
}

input UserRoleCreateManyInput {
  create: [UserRoleCreateInput!]
  connect: [UserRoleWhereUniqueInput!]
}

input UserRoleCreatepermissionsInput {
  set: [String!]
}

"""An edge in a connection."""
type UserRoleEdge {
  """The item at the end of the edge."""
  node: UserRole!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserRoleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type UserRolePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  permissions: [String!]!
}

input UserRoleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserRoleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserRoleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserRoleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type UserRoleSubscriptionPayload {
  mutation: MutationType!
  node: UserRole
  updatedFields: [String!]
  previousValues: UserRolePreviousValues
}

input UserRoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserRoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserRoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserRoleSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserRoleWhereInput
}

input UserRoleUpdateDataInput {
  name: String
  description: String
  permissions: UserRoleUpdatepermissionsInput
}

input UserRoleUpdateInput {
  name: String
  description: String
  permissions: UserRoleUpdatepermissionsInput
}

input UserRoleUpdateManyDataInput {
  name: String
  description: String
  permissions: UserRoleUpdatepermissionsInput
}

input UserRoleUpdateManyInput {
  create: [UserRoleCreateInput!]
  connect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  delete: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserRoleUpdateManyWithWhereNestedInput!]
  deleteMany: [UserRoleScalarWhereInput!]
  upsert: [UserRoleUpsertWithWhereUniqueNestedInput!]
}

input UserRoleUpdateManyMutationInput {
  name: String
  description: String
  permissions: UserRoleUpdatepermissionsInput
}

input UserRoleUpdateManyWithWhereNestedInput {
  where: UserRoleScalarWhereInput!
  data: UserRoleUpdateManyDataInput!
}

input UserRoleUpdatepermissionsInput {
  set: [String!]
}

input UserRoleUpdateWithWhereUniqueNestedInput {
  where: UserRoleWhereUniqueInput!
  data: UserRoleUpdateDataInput!
}

input UserRoleUpsertWithWhereUniqueNestedInput {
  where: UserRoleWhereUniqueInput!
  update: UserRoleUpdateDataInput!
  create: UserRoleCreateInput!
}

input UserRoleWhereInput {
  """Logical AND on all given filters."""
  AND: [UserRoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserRoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserRoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

input UserRoleWhereUniqueInput {
  id: ID
  name: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  roles: UserRoleUpdateManyInput
  clients: ClientUpdateManyInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  name: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  roles_every: UserRoleWhereInput
  roles_some: UserRoleWhereInput
  roles_none: UserRoleWhereInput
  clients_every: ClientWhereInput
  clients_some: ClientWhereInput
  clients_none: ClientWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  name: String
}

enum Verb {
  POST
  PUT
  DELETE
  GET
}
